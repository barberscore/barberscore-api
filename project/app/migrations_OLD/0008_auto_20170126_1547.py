# -*- coding: utf-8 -*-
# Generated by Django 1.10.5 on 2017-01-26 23:47
from __future__ import unicode_literals

import app.models
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone
import django_fsm
import model_utils.fields
import mptt.fields
import uuid


class Migration(migrations.Migration):

    dependencies = [
        ('app', '0007_auto_20170120_1924'),
    ]

    operations = [
        migrations.CreateModel(
            name='Entity',
            fields=[
                ('created', model_utils.fields.AutoCreatedField(default=django.utils.timezone.now, editable=False, verbose_name='created')),
                ('modified', model_utils.fields.AutoLastModifiedField(default=django.utils.timezone.now, editable=False, verbose_name='modified')),
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('nomen', models.CharField(max_length=255, null=True)),
                ('name', models.CharField(help_text=b'\n            The name of the resource.', max_length=200)),
                ('status', django_fsm.FSMIntegerField(choices=[(0, b'New'), (10, b'Active'), (20, b'Inactive')], default=0)),
                ('level', models.IntegerField(choices=[(0, b'organization'), (1, b'District'), (2, b'Division'), (3, b'Chapter'), (4, b'Group')])),
                ('kind', models.IntegerField(choices=[(b'International', [(1, b'Barbershop Harmony Society'), (2, b'Harmony Incorporated')]), (b'District', [(11, b'District'), (12, b'Noncompetitive'), (13, b'Affiliate')]), (b'Division', [(21, b'Division')]), (b'Chapter', [(31, b'Chapter')]), (b'Group', [(41, b'Chorus'), (42, b'Quartet'), (43, b'Very Large Quartet')])], help_text=b'\n            The kind of organization.')),
                ('age', models.IntegerField(blank=True, choices=[(10, b'Seniors'), (20, b'Collegiate'), (30, b'Youth')], null=True)),
                ('is_novice', models.BooleanField(default=False)),
                ('short_name', models.CharField(blank=True, help_text=b'\n            A short-form name for the resource.', max_length=200)),
                ('long_name', models.CharField(blank=True, help_text=b'\n            A long-form name for the resource.', max_length=200)),
                ('code', models.CharField(blank=True, help_text=b'\n            The chapter code.', max_length=200, null=True)),
                ('start_date', models.DateField(blank=True, null=True)),
                ('end_date', models.DateField(blank=True, null=True)),
                ('location', models.CharField(blank=True, help_text=b'\n            The geographical location of the resource.', max_length=200)),
                ('website', models.URLField(blank=True, help_text=b'\n            The website URL of the resource.')),
                ('facebook', models.URLField(blank=True, help_text=b'\n            The facebook URL of the resource.')),
                ('twitter', models.CharField(blank=True, help_text=b'\n            The twitter handle (in form @twitter_handle) of the resource.', max_length=16, validators=[django.core.validators.RegexValidator(message=b'\n                    Must be a single Twitter handle\n                    in the form `@twitter_handle`.\n                ', regex=b'@([A-Za-z0-9_]+)')])),
                ('email', models.EmailField(blank=True, help_text=b'\n            The contact email of the resource.', max_length=254)),
                ('phone', models.CharField(blank=True, default=b'', help_text=b'\n            The phone number of the resource.  Include country code.', max_length=25, null=True)),
                ('picture', models.ImageField(blank=True, help_text=b'\n            The picture/logo of the resource.', null=True, upload_to=app.models.generate_image_filename)),
                ('description', models.TextField(blank=True, help_text=b'\n            A description/bio of the resource.  Max 1000 characters.', max_length=1000)),
                ('notes', models.TextField(blank=True, help_text=b'\n            Notes (for internal use only).')),
                ('bhs_id', models.IntegerField(blank=True, null=True, unique=True)),
                ('lft', models.PositiveIntegerField(db_index=True, editable=False)),
                ('rght', models.PositiveIntegerField(db_index=True, editable=False)),
                ('tree_id', models.PositiveIntegerField(db_index=True, editable=False)),
                ('parent', mptt.fields.TreeForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='children', to='app.Entity')),
            ],
            options={
                'verbose_name_plural': 'entities',
            },
        ),
        migrations.AlterField(
            model_name='performer',
            name='baritone',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='performers_baritone', to='app.Person'),
        ),
        migrations.AlterField(
            model_name='performer',
            name='bass',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='performers_bass', to='app.Person'),
        ),
        migrations.AlterField(
            model_name='performer',
            name='codirector',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='performers_codirector', to='app.Person'),
        ),
        migrations.AlterField(
            model_name='performer',
            name='director',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='performers_director', to='app.Person'),
        ),
        migrations.AlterField(
            model_name='performer',
            name='lead',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='performers_lead', to='app.Person'),
        ),
        migrations.AlterField(
            model_name='performer',
            name='tenor',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='performers_tenor', to='app.Person'),
        ),
    ]
