# -*- coding: utf-8 -*-
# Generated by Django 1.10.5 on 2017-02-16 20:57
from __future__ import unicode_literals

import app.models
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion
import django_fsm
import timezone_field.fields


class Migration(migrations.Migration):

    dependencies = [
        ('app', '0045_auto_20170214_1515'),
    ]

    operations = [
        migrations.AlterField(
            model_name='assignment',
            name='kind',
            field=models.IntegerField(choices=[(5, 'DRCJ'), (10, 'CA'), (20, 'ACA'), (30, 'Music'), (40, 'Presentation'), (50, 'Singing')]),
        ),
        migrations.AlterField(
            model_name='assignment',
            name='status',
            field=models.IntegerField(choices=[(-10, 'Archived'), (0, 'New'), (10, 'Scheduled'), (20, 'Confirmed'), (25, 'Validated'), (30, 'Final')], default=0),
        ),
        migrations.AlterField(
            model_name='award',
            name='advance',
            field=models.FloatField(blank=True, help_text='\n            The score threshold to advance to next round (if any) in\n            multi-round qualification.\n        ', null=True),
        ),
        migrations.AlterField(
            model_name='award',
            name='championship_rounds',
            field=models.IntegerField(help_text='Number of rounds to determine the championship'),
        ),
        migrations.AlterField(
            model_name='award',
            name='championship_season',
            field=models.IntegerField(blank=True, choices=[(1, 'Summer'), (2, 'Midwinter'), (3, 'Fall'), (4, 'Spring'), (9, 'Video')], null=True),
        ),
        migrations.AlterField(
            model_name='award',
            name='is_district_representative',
            field=models.BooleanField(default=False, help_text='Boolean; true means the district rep qualifies.'),
        ),
        migrations.AlterField(
            model_name='award',
            name='is_improved',
            field=models.BooleanField(default=False, help_text="Designates 'Most-Improved'.  Implies manual."),
        ),
        migrations.AlterField(
            model_name='award',
            name='is_manual',
            field=models.BooleanField(default=False, help_text='Award must be determined manually.'),
        ),
        migrations.AlterField(
            model_name='award',
            name='is_multi',
            field=models.BooleanField(default=False, help_text='Award spans conventions; must be determined manually.'),
        ),
        migrations.AlterField(
            model_name='award',
            name='is_novice',
            field=models.BooleanField(default=False, help_text='Award for Novice groups.'),
        ),
        migrations.AlterField(
            model_name='award',
            name='is_primary',
            field=models.BooleanField(default=False, help_text='The primary award; requires qualification.'),
        ),
        migrations.AlterField(
            model_name='award',
            name='kind',
            field=models.IntegerField(choices=[(1, 'Quartet'), (2, 'Chorus'), (10, 'Seniors'), (20, 'Collegiate'), (30, 'Youth')]),
        ),
        migrations.AlterField(
            model_name='award',
            name='minimum',
            field=models.FloatField(blank=True, help_text='\n            The minimum score required for qualification (if any.)\n        ', null=True),
        ),
        migrations.AlterField(
            model_name='award',
            name='name',
            field=models.CharField(help_text='Award Name.', max_length=255),
        ),
        migrations.AlterField(
            model_name='award',
            name='qualifier_rounds',
            field=models.IntegerField(blank=True, help_text='Number of rounds to qualify for the award.', null=True),
        ),
        migrations.AlterField(
            model_name='award',
            name='qualifier_season',
            field=models.IntegerField(blank=True, choices=[(1, 'Summer'), (2, 'Midwinter'), (3, 'Fall'), (4, 'Spring'), (9, 'Video')], null=True),
        ),
        migrations.AlterField(
            model_name='award',
            name='scope',
            field=models.IntegerField(blank=True, choices=[(100, 'Plateau 1'), (110, 'Plateau 2'), (120, 'Plateau 3'), (130, 'Plateau 4'), (140, 'Plateau A'), (150, 'Plateau AA'), (160, 'Plateau AAA'), (170, 'Plateau AAAA'), (175, 'Plateau AAAAA')], null=True),
        ),
        migrations.AlterField(
            model_name='award',
            name='size',
            field=models.IntegerField(blank=True, choices=[(100, 'Plateau 1'), (110, 'Plateau 2'), (120, 'Plateau 3'), (130, 'Plateau 4'), (140, 'Plateau A'), (150, 'Plateau AA'), (160, 'Plateau AAA'), (170, 'Plateau AAAA'), (180, 'Plateau B'), (190, 'Plateau I'), (200, 'Plateau II'), (210, 'Plateau III'), (220, 'Plateau IV'), (230, 'Small')], null=True),
        ),
        migrations.AlterField(
            model_name='award',
            name='status',
            field=django_fsm.FSMIntegerField(choices=[(-10, 'Inactive'), (0, 'New'), (10, 'Active')], default=0),
        ),
        migrations.AlterField(
            model_name='award',
            name='threshold',
            field=models.FloatField(blank=True, help_text='\n            The score threshold for automatic qualification (if any.)\n        ', null=True),
        ),
        migrations.AlterField(
            model_name='catalog',
            name='difficulty',
            field=models.IntegerField(blank=True, choices=[(1, 'Very Easy'), (2, 'Easy'), (3, 'Medium'), (4, 'Hard'), (5, 'Very Hard')], null=True),
        ),
        migrations.AlterField(
            model_name='catalog',
            name='gender',
            field=models.IntegerField(blank=True, choices=[(1, 'Male'), (2, 'Female'), (3, 'Mixed')], null=True),
        ),
        migrations.AlterField(
            model_name='catalog',
            name='status',
            field=django_fsm.FSMIntegerField(choices=[(-10, 'Inactive'), (0, 'New'), (10, 'Active')], default=0),
        ),
        migrations.AlterField(
            model_name='catalog',
            name='tempo',
            field=models.IntegerField(blank=True, choices=[(1, 'Ballad'), (2, 'Uptune'), (3, 'Mixed')], null=True),
        ),
        migrations.AlterField(
            model_name='catalog',
            name='voicing',
            field=models.IntegerField(blank=True, choices=[(1, 'Barbershop'), (2, 'Chorus + Quartet'), (3, 'Double Quartet'), (4, 'Ensemble + Soloist')], null=True),
        ),
        migrations.AlterField(
            model_name='contest',
            name='status',
            field=django_fsm.FSMIntegerField(choices=[(0, 'New'), (10, 'Opened'), (15, 'Closed'), (35, 'Validated'), (42, 'Finished'), (45, 'Published')], default=0),
        ),
        migrations.AlterField(
            model_name='contestant',
            name='status',
            field=django_fsm.FSMIntegerField(choices=[(0, 'New'), (10, 'Eligible'), (20, 'Ineligible'), (40, 'District Representative'), (50, 'Qualified'), (55, 'Validated'), (60, 'Finished'), (70, 'Scratched'), (80, 'Disqualified'), (90, 'Published')], default=0),
        ),
        migrations.AlterField(
            model_name='convention',
            name='kind',
            field=models.IntegerField(blank=True, choices=[(10, 'International'), (20, 'District'), (30, 'Division'), (40, 'District/Division')], null=True),
        ),
        migrations.AlterField(
            model_name='convention',
            name='level',
            field=models.IntegerField(choices=[(0, 'International'), (1, 'District'), (2, 'Division'), (3, 'Chapter')]),
        ),
        migrations.AlterField(
            model_name='convention',
            name='panel',
            field=models.IntegerField(choices=[(0, 'Unknown'), (1, 'Single'), (2, 'Double'), (3, 'Triple'), (4, 'Quadruple'), (5, 'Quintiple')], default=0),
        ),
        migrations.AlterField(
            model_name='convention',
            name='season',
            field=models.IntegerField(choices=[(1, 'Summer'), (2, 'Midwinter'), (3, 'Fall'), (4, 'Spring'), (9, 'Video')]),
        ),
        migrations.AlterField(
            model_name='convention',
            name='status',
            field=django_fsm.FSMIntegerField(choices=[(0, 'New'), (2, 'Listed'), (4, 'Opened'), (8, 'Closed'), (10, 'Validated'), (20, 'Started'), (30, 'Finished'), (45, 'Published')], default=0),
        ),
        migrations.AlterField(
            model_name='convention',
            name='venue',
            field=models.ForeignKey(blank=True, help_text='\n            The venue for the convention.', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='conventions', to='app.Venue'),
        ),
        migrations.AlterField(
            model_name='entity',
            name='age',
            field=models.IntegerField(blank=True, choices=[(10, 'Seniors'), (20, 'Collegiate'), (30, 'Youth')], null=True),
        ),
        migrations.AlterField(
            model_name='entity',
            name='code',
            field=models.CharField(blank=True, help_text='\n            The chapter code.', max_length=200),
        ),
        migrations.AlterField(
            model_name='entity',
            name='description',
            field=models.TextField(blank=True, help_text='\n            A description/bio of the resource.  Max 1000 characters.', max_length=1000),
        ),
        migrations.AlterField(
            model_name='entity',
            name='email',
            field=models.EmailField(blank=True, help_text='\n            The contact email of the resource.', max_length=254),
        ),
        migrations.AlterField(
            model_name='entity',
            name='facebook',
            field=models.URLField(blank=True, help_text='\n            The facebook URL of the resource.'),
        ),
        migrations.AlterField(
            model_name='entity',
            name='kind',
            field=models.IntegerField(choices=[('Organization', [(1, 'Organization')]), ('District', [(11, 'District'), (12, 'Noncompetitive'), (13, 'Affiliate')]), ('Division', [(21, 'Division')]), ('Group', [(31, 'Quartet'), (32, 'Chorus'), (33, 'Very Large Quartet')])], help_text='\n            The kind of organization.'),
        ),
        migrations.AlterField(
            model_name='entity',
            name='level',
            field=models.IntegerField(choices=[(0, 'Organization'), (1, 'District'), (2, 'Division'), (3, 'Group')]),
        ),
        migrations.AlterField(
            model_name='entity',
            name='location',
            field=models.CharField(blank=True, help_text='\n            The geographical location of the resource.', max_length=200),
        ),
        migrations.AlterField(
            model_name='entity',
            name='long_name',
            field=models.CharField(blank=True, help_text='\n            A long-form name for the resource.', max_length=200),
        ),
        migrations.AlterField(
            model_name='entity',
            name='name',
            field=models.CharField(help_text='\n            The name of the resource.', max_length=200),
        ),
        migrations.AlterField(
            model_name='entity',
            name='notes',
            field=models.TextField(blank=True, help_text='\n            Notes (for internal use only).'),
        ),
        migrations.AlterField(
            model_name='entity',
            name='phone',
            field=models.CharField(blank=True, help_text='\n            The phone number of the resource.  Include country code.', max_length=25),
        ),
        migrations.AlterField(
            model_name='entity',
            name='picture',
            field=models.ImageField(blank=True, help_text='\n            The picture/logo of the resource.', null=True, upload_to=app.models.generate_image_filename),
        ),
        migrations.AlterField(
            model_name='entity',
            name='short_name',
            field=models.CharField(blank=True, help_text='\n            A short-form name for the resource.', max_length=200),
        ),
        migrations.AlterField(
            model_name='entity',
            name='status',
            field=django_fsm.FSMIntegerField(choices=[(-10, 'Inactive'), (0, 'New'), (10, 'Active')], default=0),
        ),
        migrations.AlterField(
            model_name='entity',
            name='twitter',
            field=models.CharField(blank=True, help_text='\n            The twitter handle (in form @twitter_handle) of the resource.', max_length=16, validators=[django.core.validators.RegexValidator(message='\n                    Must be a single Twitter handle\n                    in the form `@twitter_handle`.\n                ', regex='@([A-Za-z0-9_]+)')]),
        ),
        migrations.AlterField(
            model_name='entity',
            name='website',
            field=models.URLField(blank=True, help_text='\n            The website URL of the resource.'),
        ),
        migrations.AlterField(
            model_name='host',
            name='status',
            field=models.IntegerField(choices=[(-10, 'Inactive'), (0, 'New'), (10, 'Active')], default=0),
        ),
        migrations.AlterField(
            model_name='membership',
            name='part',
            field=models.IntegerField(blank=True, choices=[(1, 'Tenor'), (2, 'Lead'), (3, 'Baritone'), (4, 'Bass'), (5, 'Director')], null=True),
        ),
        migrations.AlterField(
            model_name='membership',
            name='status',
            field=models.IntegerField(choices=[(-10, 'Inactive'), (0, 'New'), (10, 'Active')], default=0),
        ),
        migrations.AlterField(
            model_name='office',
            name='kind',
            field=django_fsm.FSMIntegerField(choices=[(0, 'New'), (1, 'One'), (10, 'Ten'), (20, 'Twenty'), (30, 'Thirty')], default=0),
        ),
        migrations.AlterField(
            model_name='office',
            name='status',
            field=django_fsm.FSMIntegerField(choices=[(-10, 'Inactive'), (0, 'New'), (10, 'Active')], default=0),
        ),
        migrations.AlterField(
            model_name='officer',
            name='status',
            field=models.IntegerField(choices=[(-10, 'Inactive'), (0, 'New'), (10, 'Active')], default=0),
        ),
        migrations.AlterField(
            model_name='performance',
            name='actual_finish',
            field=models.DateTimeField(blank=True, help_text='\n            The actual performance window.', null=True),
        ),
        migrations.AlterField(
            model_name='performance',
            name='actual_start',
            field=models.DateTimeField(blank=True, help_text='\n            The actual performance window.', null=True),
        ),
        migrations.AlterField(
            model_name='performance',
            name='status',
            field=django_fsm.FSMIntegerField(choices=[(0, 'New'), (5, 'Validated'), (10, 'Started'), (20, 'Finished'), (30, 'Entered'), (40, 'Flagged'), (60, 'Cleared'), (90, 'Published')], default=0),
        ),
        migrations.AlterField(
            model_name='performer',
            name='is_evaluation',
            field=models.BooleanField(default=True, help_text='\n            Performer requests evaluation.'),
        ),
        migrations.AlterField(
            model_name='performer',
            name='is_private',
            field=models.BooleanField(default=False, help_text='\n            Keep scores private.'),
        ),
        migrations.AlterField(
            model_name='performer',
            name='men',
            field=models.IntegerField(blank=True, help_text='\n            The number of men on stage.', null=True),
        ),
        migrations.AlterField(
            model_name='performer',
            name='picture',
            field=models.ImageField(blank=True, help_text='\n            The on-stage session picture (as opposed to the "official" photo).', null=True, upload_to=app.models.generate_image_filename),
        ),
        migrations.AlterField(
            model_name='performer',
            name='prelim',
            field=models.FloatField(blank=True, help_text='\n            The incoming prelim score.', null=True),
        ),
        migrations.AlterField(
            model_name='performer',
            name='risers',
            field=models.IntegerField(blank=True, help_text='\n            The number of risers select.', null=True),
        ),
        migrations.AlterField(
            model_name='performer',
            name='seed',
            field=models.IntegerField(blank=True, help_text='\n            The incoming rank based on prelim score.', null=True),
        ),
        migrations.AlterField(
            model_name='performer',
            name='status',
            field=django_fsm.FSMIntegerField(choices=[(0, 'New'), (10, 'Registered'), (20, 'Accepted'), (30, 'Declined'), (40, 'Dropped'), (50, 'Validated'), (52, 'Scratched'), (55, 'Disqualified'), (57, 'Started'), (60, 'Finished'), (90, 'Published')], default=0),
        ),
        migrations.AlterField(
            model_name='performerscore',
            name='csa_pdf',
            field=models.FileField(blank=True, help_text='\n            The historical PDF CSA.', null=True, upload_to=app.models.generate_image_filename),
        ),
        migrations.AlterField(
            model_name='person',
            name='description',
            field=models.TextField(blank=True, help_text='\n            A description/bio of the resource.  Max 1000 characters.', max_length=1000),
        ),
        migrations.AlterField(
            model_name='person',
            name='email',
            field=models.EmailField(blank=True, help_text='\n            The contact email of the resource.', max_length=254),
        ),
        migrations.AlterField(
            model_name='person',
            name='facebook',
            field=models.URLField(blank=True, help_text='\n            The facebook URL of the resource.'),
        ),
        migrations.AlterField(
            model_name='person',
            name='kind',
            field=models.IntegerField(choices=[(0, 'New'), (10, 'Member'), (20, 'Non-Member'), (30, 'Associate')], default=0),
        ),
        migrations.AlterField(
            model_name='person',
            name='location',
            field=models.CharField(blank=True, help_text='\n            The geographical location of the resource.', max_length=200),
        ),
        migrations.AlterField(
            model_name='person',
            name='name',
            field=models.CharField(help_text='\n            The name of the resource.', max_length=200),
        ),
        migrations.AlterField(
            model_name='person',
            name='notes',
            field=models.TextField(blank=True, help_text='\n            Notes (for internal use only).'),
        ),
        migrations.AlterField(
            model_name='person',
            name='phone',
            field=models.CharField(blank=True, help_text='\n            The phone number of the resource.  Include country code.', max_length=25),
        ),
        migrations.AlterField(
            model_name='person',
            name='picture',
            field=models.ImageField(blank=True, help_text='\n            The picture/logo of the resource.', null=True, upload_to=app.models.generate_image_filename),
        ),
        migrations.AlterField(
            model_name='person',
            name='status',
            field=models.IntegerField(choices=[(-10, 'Inactive'), (0, 'New'), (1, 'Active'), (3, 'Retired'), (5, 'Deceased'), (6, '(Six)'), (9, '(Nine)')], default=0),
        ),
        migrations.AlterField(
            model_name='person',
            name='twitter',
            field=models.CharField(blank=True, help_text='\n            The twitter handle (in form @twitter_handle) of the resource.', max_length=16, validators=[django.core.validators.RegexValidator(message='\n                    Must be a single Twitter handle\n                    in the form `@twitter_handle`.\n                ', regex='@([A-Za-z0-9_]+)')]),
        ),
        migrations.AlterField(
            model_name='person',
            name='website',
            field=models.URLField(blank=True, help_text='\n            The website URL of the resource.'),
        ),
        migrations.AlterField(
            model_name='round',
            name='ann_pdf',
            field=models.FileField(blank=True, help_text='\n            The announcement PDF.', null=True, upload_to=app.models.generate_image_filename),
        ),
        migrations.AlterField(
            model_name='round',
            name='kind',
            field=models.IntegerField(choices=[(1, 'Finals'), (2, 'Semi-Finals'), (3, 'Quarter-Finals')]),
        ),
        migrations.AlterField(
            model_name='round',
            name='status',
            field=django_fsm.FSMIntegerField(choices=[(0, 'New'), (10, 'Drawn'), (15, 'Validated'), (20, 'Started'), (25, 'Finished'), (50, 'Published')], default=0),
        ),
        migrations.AlterField(
            model_name='score',
            name='category',
            field=models.IntegerField(choices=[(1, 'Music'), (2, 'Presentation'), (3, 'Singing')]),
        ),
        migrations.AlterField(
            model_name='score',
            name='kind',
            field=models.IntegerField(choices=[(10, 'Official'), (20, 'Practice'), (30, 'Composite')]),
        ),
        migrations.AlterField(
            model_name='score',
            name='original',
            field=models.IntegerField(blank=True, help_text='\n            The original score (before revision).', null=True, validators=[django.core.validators.MaxValueValidator(100, message='Points must be between 0 - 100'), django.core.validators.MinValueValidator(0, message='Points must be between 0 - 100')]),
        ),
        migrations.AlterField(
            model_name='score',
            name='penalty',
            field=models.IntegerField(blank=True, help_text='\n            The penalty (0-100)', null=True, validators=[django.core.validators.MaxValueValidator(100, message='Points must be between 0 - 100'), django.core.validators.MinValueValidator(0, message='Points must be between 0 - 100')]),
        ),
        migrations.AlterField(
            model_name='score',
            name='points',
            field=models.IntegerField(blank=True, help_text='\n            The number of points (0-100)', null=True, validators=[django.core.validators.MaxValueValidator(100, message='Points must be between 0 - 100'), django.core.validators.MinValueValidator(0, message='Points must be between 0 - 100')]),
        ),
        migrations.AlterField(
            model_name='score',
            name='status',
            field=django_fsm.FSMIntegerField(choices=[(0, 'New'), (10, 'Validated'), (25, 'Cleared'), (30, 'Flagged'), (35, 'Revised'), (40, 'Confirmed')], default=0),
        ),
        migrations.AlterField(
            model_name='score',
            name='violation',
            field=django_fsm.FSMIntegerField(blank=True, choices=[(10, 'General')], null=True),
        ),
        migrations.AlterField(
            model_name='session',
            name='kind',
            field=models.IntegerField(choices=[(1, 'Quartet'), (2, 'Chorus'), (10, 'Seniors'), (20, 'Collegiate'), (30, 'Youth')], help_text='\n            The kind of session.  Generally this will be either quartet or chorus,\n            with the exception being International and Midwinter which hold exclusive\n            Youth and Senior sessions respectively.'),
        ),
        migrations.AlterField(
            model_name='session',
            name='scoresheet_pdf',
            field=models.FileField(blank=True, help_text='\n            The historical PDF OSS.', null=True, upload_to=app.models.generate_image_filename),
        ),
        migrations.AlterField(
            model_name='session',
            name='status',
            field=django_fsm.FSMIntegerField(choices=[(0, 'New'), (2, 'Listed'), (4, 'Opened'), (8, 'Closed'), (10, 'Validated'), (20, 'Started'), (30, 'Finished'), (45, 'Published')], default=0),
        ),
        migrations.AlterField(
            model_name='slot',
            name='status',
            field=django_fsm.FSMIntegerField(choices=[(0, 'New')], default=0),
        ),
        migrations.AlterField(
            model_name='song',
            name='status',
            field=django_fsm.FSMIntegerField(choices=[(0, 'New'), (10, 'Validated'), (38, 'Finished'), (40, 'Confirmed'), (50, 'Final'), (90, 'Published')], default=0),
        ),
        migrations.AlterField(
            model_name='submission',
            name='arrangers',
            field=models.TextField(blank=True, help_text='\n            Names of the Arranger(s).\n        '),
        ),
        migrations.AlterField(
            model_name='submission',
            name='bhs_catalog',
            field=models.IntegerField(blank=True, help_text='\n            The BHS Catalog Number.\n        ', null=True),
        ),
        migrations.AlterField(
            model_name='submission',
            name='composers',
            field=models.TextField(blank=True, help_text='\n            Names of the Composer(s) and/or Lyricist(s).\n        '),
        ),
        migrations.AlterField(
            model_name='submission',
            name='holders',
            field=models.TextField(blank=True, help_text='\n            Names of the Copyright Holder(s).\n        '),
        ),
        migrations.AlterField(
            model_name='submission',
            name='status',
            field=django_fsm.FSMIntegerField(choices=[(0, 'New'), (10, 'Pre-Submitted'), (20, 'Post-Submitted'), (30, 'Validated')], default=0),
        ),
        migrations.AlterField(
            model_name='submission',
            name='title',
            field=models.CharField(help_text='\n            Title of the composition.\n        ', max_length=200),
        ),
        migrations.AlterField(
            model_name='venue',
            name='name',
            field=models.CharField(help_text='\n            The name of the resource.', max_length=200),
        ),
        migrations.AlterField(
            model_name='venue',
            name='status',
            field=django_fsm.FSMIntegerField(choices=[(-10, 'Inactive'), (0, 'New'), (10, 'Active')], default=0),
        ),
        migrations.AlterField(
            model_name='venue',
            name='timezone',
            field=timezone_field.fields.TimeZoneField(blank=True, help_text='\n            The local timezone of the venue.'),
        ),
    ]
