# -*- coding: utf-8 -*-
# Generated by Django 1.10.5 on 2017-01-29 14:46
from __future__ import unicode_literals

import app.models
from django.conf import settings
import django.contrib.postgres.fields
import django.contrib.postgres.fields.ranges
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone
import django_fsm
import model_utils.fields
import mptt.fields
import timezone_field.fields
import uuid


class Migration(migrations.Migration):

    initial = True

    dependencies = [
    ]

    operations = [
        migrations.CreateModel(
            name='User',
            fields=[
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('username', models.CharField(blank=True, max_length=255, null=True, unique=True)),
                ('is_active', models.BooleanField(default=True)),
                ('is_staff', models.BooleanField(default=False)),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Assignment',
            fields=[
                ('created', model_utils.fields.AutoCreatedField(default=django.utils.timezone.now, editable=False, verbose_name='created')),
                ('modified', model_utils.fields.AutoLastModifiedField(default=django.utils.timezone.now, editable=False, verbose_name='modified')),
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('nomen', models.CharField(max_length=255, null=True)),
                ('status', models.IntegerField(choices=[(-10, b'Archived'), (0, b'New'), (10, b'Scheduled'), (20, b'Confirmed'), (25, b'Validated'), (30, b'Final')], default=0)),
                ('category', models.IntegerField(choices=[(0, b'Admin'), (1, b'Music'), (2, b'Presentation'), (3, b'Singing')])),
                ('kind', models.IntegerField(choices=[(10, b'Official'), (20, b'Practice'), (30, b'Composite')])),
                ('slot', models.IntegerField(blank=True, null=True)),
                ('bhs_id', models.IntegerField(blank=True, null=True)),
            ],
        ),
        migrations.CreateModel(
            name='Award',
            fields=[
                ('created', model_utils.fields.AutoCreatedField(default=django.utils.timezone.now, editable=False, verbose_name='created')),
                ('modified', model_utils.fields.AutoLastModifiedField(default=django.utils.timezone.now, editable=False, verbose_name='modified')),
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('nomen', models.CharField(max_length=255, null=True)),
                ('name', models.CharField(help_text=b'Award Name.', max_length=255)),
                ('status', django_fsm.FSMIntegerField(choices=[(-10, b'Inactive'), (0, b'New'), (10, b'Active')], default=0)),
                ('kind', models.IntegerField(choices=[(1, b'Quartet'), (2, b'Chorus'), (10, b'Seniors'), (20, b'Collegiate'), (30, b'Youth')])),
                ('championship_season', models.IntegerField(blank=True, choices=[(1, b'Summer'), (2, b'Midwinter'), (3, b'Fall'), (4, b'Spring'), (9, b'Video')], null=True)),
                ('qualifier_season', models.IntegerField(blank=True, choices=[(1, b'Summer'), (2, b'Midwinter'), (3, b'Fall'), (4, b'Spring'), (9, b'Video')], null=True)),
                ('size', models.IntegerField(blank=True, choices=[(100, b'Plateau 1'), (110, b'Plateau 2'), (120, b'Plateau 3'), (130, b'Plateau 4'), (140, b'Plateau A'), (150, b'Plateau AA'), (160, b'Plateau AAA'), (170, b'Plateau AAAA'), (180, b'Plateau B'), (190, b'Plateau I'), (200, b'Plateau II'), (210, b'Plateau III'), (220, b'Plateau IV'), (230, b'Small')], null=True)),
                ('size_range', django.contrib.postgres.fields.ranges.IntegerRangeField(blank=True, null=True)),
                ('scope', models.IntegerField(blank=True, choices=[(100, b'Plateau 1'), (110, b'Plateau 2'), (120, b'Plateau 3'), (130, b'Plateau 4'), (140, b'Plateau A'), (150, b'Plateau AA'), (160, b'Plateau AAA'), (170, b'Plateau AAAA'), (175, b'Plateau AAAAA')], null=True)),
                ('scope_range', django.contrib.postgres.fields.ranges.FloatRangeField(blank=True, null=True)),
                ('is_primary', models.BooleanField(default=False, help_text=b'No secondary award critera.')),
                ('is_improved', models.BooleanField(default=False, help_text=b"Designates 'Most-Improved'.  Implies manual.")),
                ('is_novice', models.BooleanField(default=False)),
                ('is_manual', models.BooleanField(default=False, help_text=b'Award must be determined manually.')),
                ('idiom', models.CharField(blank=True, max_length=200, null=True)),
                ('is_multi', models.BooleanField(default=False, help_text=b'Award spans conventions; must be determined manually.')),
                ('championship_rounds', models.IntegerField(help_text=b'Number of rounds to determine the championship')),
                ('is_qualification_required', models.BooleanField(default=False, help_text=b'Boolean; true means qualification is required.')),
                ('is_district_representative', models.BooleanField(default=False, help_text=b'Boolean; true means the district rep qualifies.')),
                ('qualifier_rounds', models.IntegerField(blank=True, help_text=b'Number of rounds to qualify for the award.', null=True)),
                ('threshold', models.FloatField(blank=True, help_text=b'\n            The score threshold for automatic qualification (if any.)\n        ', null=True)),
                ('minimum', models.FloatField(blank=True, help_text=b'The minimum score required for qualification (if any.)', null=True)),
                ('advance', models.FloatField(blank=True, help_text=b'\n            The score threshold to advance to next round (if any) in\n            multi-round qualification.\n        ', null=True)),
                ('stix_num', models.IntegerField(blank=True, null=True)),
                ('stix_name', models.CharField(blank=True, default=b'', max_length=200)),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Catalog',
            fields=[
                ('created', model_utils.fields.AutoCreatedField(default=django.utils.timezone.now, editable=False, verbose_name='created')),
                ('modified', model_utils.fields.AutoLastModifiedField(default=django.utils.timezone.now, editable=False, verbose_name='modified')),
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('nomen', models.CharField(max_length=255, null=True)),
                ('status', django_fsm.FSMIntegerField(choices=[(-10, b'Inactive'), (0, b'New'), (10, b'Active')], default=0)),
                ('bhs_id', models.IntegerField(unique=True)),
                ('title', models.CharField(max_length=200)),
                ('published', models.DateField(blank=True, null=True)),
                ('arranger', models.CharField(blank=True, max_length=200)),
                ('arranger_fee', models.FloatField(blank=True, null=True)),
                ('difficulty', models.IntegerField(blank=True, choices=[(1, b'Very Easy'), (2, b'Easy'), (3, b'Medium'), (4, b'Hard'), (5, b'Very Hard')], null=True)),
                ('gender', models.IntegerField(blank=True, choices=[(1, b'Male'), (2, b'Female'), (3, b'Mixed')], null=True)),
                ('tempo', models.IntegerField(blank=True, choices=[(1, b'Ballad'), (2, b'Uptune'), (3, b'Mixed')], null=True)),
                ('is_medley', models.BooleanField(default=False)),
                ('is_learning', models.BooleanField(default=False)),
                ('voicing', models.IntegerField(blank=True, choices=[(1, b'Barbershop'), (2, b'Chorus + Quartet'), (3, b'Double Quartet'), (4, b'Ensemble + Soloist')], null=True)),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Contest',
            fields=[
                ('created', model_utils.fields.AutoCreatedField(default=django.utils.timezone.now, editable=False, verbose_name='created')),
                ('modified', model_utils.fields.AutoLastModifiedField(default=django.utils.timezone.now, editable=False, verbose_name='modified')),
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('nomen', models.CharField(max_length=255, null=True)),
                ('status', django_fsm.FSMIntegerField(choices=[(0, b'New'), (10, b'Opened'), (15, b'Closed'), (35, b'Validated'), (42, b'Finished'), (45, b'Published')], default=0)),
                ('is_qualifier', models.BooleanField(default=False)),
                ('num_rounds', models.IntegerField(blank=True, null=True)),
                ('stix_num', models.IntegerField(blank=True, null=True)),
                ('stix_name', models.CharField(blank=True, default=b'', max_length=255)),
            ],
        ),
        migrations.CreateModel(
            name='Contestant',
            fields=[
                ('created', model_utils.fields.AutoCreatedField(default=django.utils.timezone.now, editable=False, verbose_name='created')),
                ('modified', model_utils.fields.AutoLastModifiedField(default=django.utils.timezone.now, editable=False, verbose_name='modified')),
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('nomen', models.CharField(max_length=255, null=True)),
                ('status', django_fsm.FSMIntegerField(choices=[(0, b'New'), (10, b'Eligible'), (20, b'Ineligible'), (40, b'District Representative'), (50, b'Qualified'), (55, b'Validated'), (60, b'Finished'), (70, b'Scratched'), (80, b'Disqualified'), (90, b'Published')], default=0)),
            ],
        ),
        migrations.CreateModel(
            name='Convention',
            fields=[
                ('created', model_utils.fields.AutoCreatedField(default=django.utils.timezone.now, editable=False, verbose_name='created')),
                ('modified', model_utils.fields.AutoLastModifiedField(default=django.utils.timezone.now, editable=False, verbose_name='modified')),
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('nomen', models.CharField(max_length=255, null=True)),
                ('name', models.CharField(max_length=255)),
                ('status', django_fsm.FSMIntegerField(choices=[(0, b'New'), (2, b'Listed'), (4, b'Opened'), (8, b'Closed'), (10, b'Validated'), (20, b'Started'), (30, b'Finished'), (45, b'Published')], default=0)),
                ('kind', models.IntegerField(blank=True, choices=[(10, b'International'), (20, b'District'), (30, b'Division'), (40, b'District and Division'), (200, b'EVG Division I'), (210, b'EVG Division II'), (220, b'EVG Division III'), (230, b'EVG Division IV'), (240, b'EVG Division V'), (250, b'FWD Arizona Division'), (260, b'FWD NE/NW Divisions'), (270, b'FWD SE/SW Divisions'), (280, b'LOL Division One/Packerland Divisions'), (290, b'LOL Northern Plains Division'), (300, b'LOL 10,000 Lakes and Southwest Divisions'), (322, b'MAD Northern Division'), (324, b'MAD Central Division'), (330, b'MAD Southern Division'), (340, b'NED Sunrise Division'), (342, b'NED Western Regional'), (344, b'NED Eastern Regional'), (350, b'SWD NE/NW/SE/SW Divisions')], null=True)),
                ('level', models.IntegerField(choices=[(0, b'International'), (1, b'District'), (2, b'Division'), (3, b'Chapter')])),
                ('season', models.IntegerField(choices=[(1, b'Summer'), (2, b'Midwinter'), (3, b'Fall'), (4, b'Spring'), (9, b'Video')])),
                ('risers', django.contrib.postgres.fields.ArrayField(base_field=models.IntegerField(blank=True, null=True), blank=True, null=True, size=None)),
                ('year', models.IntegerField(choices=[(2018, 2018), (2017, 2017), (2016, 2016), (2015, 2015), (2014, 2014), (2013, 2013), (2012, 2012), (2011, 2011), (2010, 2010), (2009, 2009), (2008, 2008), (2007, 2007), (2006, 2006), (2005, 2005), (2004, 2004), (2003, 2003), (2002, 2002), (2001, 2001), (2000, 2000), (1999, 1999), (1998, 1998), (1997, 1997), (1996, 1996), (1995, 1995), (1994, 1994), (1993, 1993), (1992, 1992), (1991, 1991), (1990, 1990), (1989, 1989), (1988, 1988), (1987, 1987), (1986, 1986), (1985, 1985), (1984, 1984), (1983, 1983), (1982, 1982), (1981, 1981), (1980, 1980), (1979, 1979), (1978, 1978), (1977, 1977), (1976, 1976), (1975, 1975), (1974, 1974), (1973, 1973), (1972, 1972), (1971, 1971), (1970, 1970), (1969, 1969), (1968, 1968), (1967, 1967), (1966, 1966), (1965, 1965), (1964, 1964), (1963, 1963), (1962, 1962), (1961, 1961), (1960, 1960), (1959, 1959), (1958, 1958), (1957, 1957), (1956, 1956), (1955, 1955), (1954, 1954), (1953, 1953), (1952, 1952), (1951, 1951), (1950, 1950), (1949, 1949), (1948, 1948), (1947, 1947), (1946, 1946), (1945, 1945), (1944, 1944), (1943, 1943), (1942, 1942), (1941, 1941), (1940, 1940), (1939, 1939)])),
                ('start_date', models.DateField(blank=True, null=True)),
                ('end_date', models.DateField(blank=True, null=True)),
                ('is_prelims', models.BooleanField(default=False)),
                ('bhs_id', models.IntegerField(blank=True, null=True)),
                ('stix_name', models.CharField(blank=True, max_length=200, null=True)),
                ('stix_div', models.CharField(blank=True, max_length=200, null=True)),
                ('stix_file', models.FileField(blank=True, help_text=b'\n            The bbstix file.', null=True, upload_to=app.models.generate_image_filename)),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Entity',
            fields=[
                ('created', model_utils.fields.AutoCreatedField(default=django.utils.timezone.now, editable=False, verbose_name='created')),
                ('modified', model_utils.fields.AutoLastModifiedField(default=django.utils.timezone.now, editable=False, verbose_name='modified')),
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('nomen', models.CharField(blank=True, max_length=255, null=True)),
                ('name', models.CharField(help_text=b'\n            The name of the resource.', max_length=200)),
                ('status', django_fsm.FSMIntegerField(choices=[(-10, b'Inactive'), (0, b'New'), (10, b'Active')], default=0)),
                ('level', models.IntegerField(choices=[(0, b'Organization'), (1, b'District'), (2, b'Division'), (3, b'Group')])),
                ('kind', models.IntegerField(choices=[(b'International', [(1, b'Barbershop Harmony Society'), (2, b'Harmony Incorporated')]), (b'District', [(11, b'District'), (12, b'Noncompetitive'), (13, b'Affiliate')]), (b'Division', [(21, b'Division')]), (b'Group', [(31, b'Quartet'), (32, b'Chorus'), (33, b'Very Large Quartet')])], help_text=b'\n            The kind of organization.')),
                ('age', models.IntegerField(blank=True, choices=[(10, b'Seniors'), (20, b'Collegiate'), (30, b'Youth')], null=True)),
                ('is_novice', models.BooleanField(default=False)),
                ('short_name', models.CharField(blank=True, help_text=b'\n            A short-form name for the resource.', max_length=200)),
                ('long_name', models.CharField(blank=True, help_text=b'\n            A long-form name for the resource.', max_length=200)),
                ('code', models.CharField(blank=True, help_text=b'\n            The chapter code.', max_length=200, null=True)),
                ('start_date', models.DateField(blank=True, null=True)),
                ('end_date', models.DateField(blank=True, null=True)),
                ('location', models.CharField(blank=True, help_text=b'\n            The geographical location of the resource.', max_length=200)),
                ('website', models.URLField(blank=True, help_text=b'\n            The website URL of the resource.')),
                ('facebook', models.URLField(blank=True, help_text=b'\n            The facebook URL of the resource.')),
                ('twitter', models.CharField(blank=True, help_text=b'\n            The twitter handle (in form @twitter_handle) of the resource.', max_length=16, validators=[django.core.validators.RegexValidator(message=b'\n                    Must be a single Twitter handle\n                    in the form `@twitter_handle`.\n                ', regex=b'@([A-Za-z0-9_]+)')])),
                ('email', models.EmailField(blank=True, help_text=b'\n            The contact email of the resource.', max_length=254)),
                ('phone', models.CharField(blank=True, default=b'', help_text=b'\n            The phone number of the resource.  Include country code.', max_length=25, null=True)),
                ('picture', models.ImageField(blank=True, help_text=b'\n            The picture/logo of the resource.', null=True, upload_to=app.models.generate_image_filename)),
                ('description', models.TextField(blank=True, help_text=b'\n            A description/bio of the resource.  Max 1000 characters.', max_length=1000)),
                ('notes', models.TextField(blank=True, help_text=b'\n            Notes (for internal use only).')),
                ('bhs_id', models.IntegerField(blank=True, null=True, unique=True)),
                ('legacy_id', models.CharField(blank=True, max_length=255, null=True)),
                ('legacy_parent', models.CharField(blank=True, max_length=255, null=True)),
                ('lft', models.PositiveIntegerField(db_index=True, editable=False)),
                ('rght', models.PositiveIntegerField(db_index=True, editable=False)),
                ('tree_id', models.PositiveIntegerField(db_index=True, editable=False)),
                ('parent', mptt.fields.TreeForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='children', to='app.Entity')),
            ],
            options={
                'verbose_name_plural': 'entities',
            },
        ),
        migrations.CreateModel(
            name='Host',
            fields=[
                ('created', model_utils.fields.AutoCreatedField(default=django.utils.timezone.now, editable=False, verbose_name='created')),
                ('modified', model_utils.fields.AutoLastModifiedField(default=django.utils.timezone.now, editable=False, verbose_name='modified')),
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('nomen', models.CharField(max_length=255, null=True)),
                ('status', models.IntegerField(choices=[(-10, b'Inactive'), (0, b'New'), (10, b'Active')], default=0)),
                ('convention', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='hosts', to='app.Convention')),
                ('entity', mptt.fields.TreeForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='hosts', to='app.Entity')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Membership',
            fields=[
                ('created', model_utils.fields.AutoCreatedField(default=django.utils.timezone.now, editable=False, verbose_name='created')),
                ('modified', model_utils.fields.AutoLastModifiedField(default=django.utils.timezone.now, editable=False, verbose_name='modified')),
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('nomen', models.CharField(max_length=255, null=True)),
                ('status', models.IntegerField(choices=[(-10, b'Inactive'), (0, b'New'), (10, b'Active')], default=0)),
                ('part', models.IntegerField(blank=True, choices=[(1, b'Tenor'), (2, b'Lead'), (3, b'Baritone'), (4, b'Bass'), (5, b'Director')], null=True)),
                ('start_date', models.DateField(blank=True, null=True)),
                ('end_date', models.DateField(blank=True, null=True)),
                ('entity', mptt.fields.TreeForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='memberships', to='app.Entity')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Office',
            fields=[
                ('created', model_utils.fields.AutoCreatedField(default=django.utils.timezone.now, editable=False, verbose_name='created')),
                ('modified', model_utils.fields.AutoLastModifiedField(default=django.utils.timezone.now, editable=False, verbose_name='modified')),
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('nomen', models.CharField(blank=True, max_length=255, null=True)),
                ('name', models.CharField(max_length=200)),
                ('status', django_fsm.FSMIntegerField(choices=[(-10, b'Inactive'), (0, b'New'), (10, b'Active')], default=0)),
                ('kind', django_fsm.FSMIntegerField(choices=[(0, b'New'), (1, b'One'), (10, b'Ten'), (20, b'Twenty'), (30, b'Thirty')], default=0)),
                ('short_name', models.CharField(blank=True, max_length=255, null=True)),
                ('long_name', models.CharField(blank=True, max_length=255, null=True)),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Officer',
            fields=[
                ('created', model_utils.fields.AutoCreatedField(default=django.utils.timezone.now, editable=False, verbose_name='created')),
                ('modified', model_utils.fields.AutoLastModifiedField(default=django.utils.timezone.now, editable=False, verbose_name='modified')),
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('nomen', models.CharField(blank=True, max_length=255, null=True)),
                ('status', models.IntegerField(choices=[(-10, b'Inactive'), (0, b'New'), (10, b'Active')], default=0)),
                ('start_date', models.DateField(blank=True, null=True)),
                ('end_date', models.DateField(blank=True, null=True)),
                ('membership', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='officers', to='app.Membership')),
                ('office', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='officers', to='app.Office')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Performance',
            fields=[
                ('created', model_utils.fields.AutoCreatedField(default=django.utils.timezone.now, editable=False, verbose_name='created')),
                ('modified', model_utils.fields.AutoLastModifiedField(default=django.utils.timezone.now, editable=False, verbose_name='modified')),
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('nomen', models.CharField(max_length=255, null=True)),
                ('status', django_fsm.FSMIntegerField(choices=[(0, b'New'), (5, b'Validated'), (10, b'Started'), (20, b'Finished'), (30, b'Entered'), (40, b'Flagged'), (60, b'Cleared'), (90, b'Published')], default=0)),
                ('num', models.IntegerField(blank=True, null=True)),
                ('actual_start', models.DateTimeField(blank=True, help_text=b'\n            The actual performance window.', null=True)),
                ('actual_finish', models.DateTimeField(blank=True, help_text=b'\n            The actual performance window.', null=True)),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Performer',
            fields=[
                ('created', model_utils.fields.AutoCreatedField(default=django.utils.timezone.now, editable=False, verbose_name='created')),
                ('modified', model_utils.fields.AutoLastModifiedField(default=django.utils.timezone.now, editable=False, verbose_name='modified')),
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('nomen', models.CharField(max_length=255, null=True)),
                ('status', django_fsm.FSMIntegerField(choices=[(0, b'New'), (10, b'Registered'), (20, b'Accepted'), (30, b'Declined'), (40, b'Dropped'), (50, b'Validated'), (52, b'Scratched'), (55, b'Disqualified'), (57, b'Started'), (60, b'Finished'), (90, b'Published')], default=0)),
                ('picture', models.ImageField(blank=True, help_text=b'\n            The on-stage session picture (as opposed to the "official" photo).', null=True, upload_to=app.models.generate_image_filename)),
                ('men', models.IntegerField(blank=True, help_text=b'\n            The number of men on stage.', null=True)),
                ('risers', models.IntegerField(blank=True, help_text=b'\n            The number of risers select.', null=True)),
                ('is_evaluation', models.BooleanField(default=True, help_text=b'\n            Performer requests evaluation.')),
                ('is_private', models.BooleanField(default=False, help_text=b'\n            Keep scores private.')),
                ('bhs_id', models.IntegerField(blank=True, null=True)),
                ('seed', models.IntegerField(blank=True, help_text=b'\n            The incoming rank based on prelim score.', null=True)),
                ('prelim', models.FloatField(blank=True, help_text=b'\n            The incoming prelim score.', null=True)),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Person',
            fields=[
                ('created', model_utils.fields.AutoCreatedField(default=django.utils.timezone.now, editable=False, verbose_name='created')),
                ('modified', model_utils.fields.AutoLastModifiedField(default=django.utils.timezone.now, editable=False, verbose_name='modified')),
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('nomen', models.CharField(editable=False, max_length=255, unique=True)),
                ('name', models.CharField(help_text=b'\n            The name of the resource.', max_length=200)),
                ('status', models.IntegerField(choices=[(-10, b'Inactive'), (0, b'New'), (1, b'Active'), (3, b'Retired'), (5, b'Deceased'), (6, b'(Six)'), (9, b'(Nine)')], default=0)),
                ('kind', models.IntegerField(choices=[(0, b'New'), (10, b'Member'), (20, b'Non-Member'), (30, b'Associate')], default=0)),
                ('bhs_status', models.IntegerField(blank=True, null=True)),
                ('birth_date', models.DateField(blank=True, null=True)),
                ('start_date', models.DateField(blank=True, null=True)),
                ('end_date', models.DateField(blank=True, null=True)),
                ('dues_thru', models.DateField(blank=True, null=True)),
                ('mon', models.IntegerField(blank=True, null=True)),
                ('spouse', models.CharField(blank=True, max_length=255, null=True)),
                ('address1', models.CharField(blank=True, default=b'', max_length=200)),
                ('address2', models.CharField(blank=True, default=b'', max_length=200)),
                ('city', models.CharField(blank=True, default=b'', max_length=200)),
                ('state', models.CharField(blank=True, default=b'', max_length=200)),
                ('country', models.CharField(blank=True, default=b'', max_length=200)),
                ('postal_code', models.CharField(blank=True, default=b'', max_length=20)),
                ('location', models.CharField(blank=True, default=b'', help_text=b'\n            The geographical location of the resource.', max_length=200)),
                ('website', models.URLField(blank=True, default=b'', help_text=b'\n            The website URL of the resource.')),
                ('facebook', models.URLField(blank=True, default=b'', help_text=b'\n            The facebook URL of the resource.')),
                ('twitter', models.CharField(blank=True, default=b'', help_text=b'\n            The twitter handle (in form @twitter_handle) of the resource.', max_length=16, validators=[django.core.validators.RegexValidator(message=b'\n                    Must be a single Twitter handle\n                    in the form `@twitter_handle`.\n                ', regex=b'@([A-Za-z0-9_]+)')])),
                ('email', models.EmailField(blank=True, default=b'', help_text=b'\n            The contact email of the resource.', max_length=254)),
                ('phone', models.CharField(blank=True, default=b'', help_text=b'\n            The phone number of the resource.  Include country code.', max_length=25, null=True)),
                ('picture', models.ImageField(blank=True, help_text=b'\n            The picture/logo of the resource.', null=True, upload_to=app.models.generate_image_filename)),
                ('description', models.TextField(blank=True, help_text=b'\n            A description/bio of the resource.  Max 1000 characters.', max_length=1000)),
                ('notes', models.TextField(blank=True, help_text=b'\n            Notes (for internal use only).')),
                ('bhs_id', models.IntegerField(blank=True, null=True, unique=True)),
                ('common_name', models.CharField(blank=True, default=b'', editable=False, max_length=255)),
                ('full_name', models.CharField(blank=True, default=b'', editable=False, max_length=255)),
                ('formal_name', models.CharField(blank=True, default=b'', editable=False, max_length=255)),
                ('user', models.OneToOneField(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Round',
            fields=[
                ('created', model_utils.fields.AutoCreatedField(default=django.utils.timezone.now, editable=False, verbose_name='created')),
                ('modified', model_utils.fields.AutoLastModifiedField(default=django.utils.timezone.now, editable=False, verbose_name='modified')),
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('nomen', models.CharField(max_length=255, null=True)),
                ('status', django_fsm.FSMIntegerField(choices=[(0, b'New'), (10, b'Drawn'), (15, b'Validated'), (20, b'Started'), (25, b'Finished'), (50, b'Published')], default=0)),
                ('kind', models.IntegerField(choices=[(1, b'Finals'), (2, b'Semi-Finals'), (3, b'Quarter-Finals')])),
                ('num', models.IntegerField()),
                ('num_songs', models.IntegerField(default=2)),
                ('start_date', models.DateField(blank=True, null=True)),
                ('end_date', models.DateField(blank=True, null=True)),
                ('ann_pdf', models.FileField(blank=True, help_text=b'\n            The announcement PDF.', null=True, upload_to=app.models.generate_image_filename)),
                ('stix_name', models.CharField(blank=True, default=b'', max_length=255)),
            ],
        ),
        migrations.CreateModel(
            name='Score',
            fields=[
                ('created', model_utils.fields.AutoCreatedField(default=django.utils.timezone.now, editable=False, verbose_name='created')),
                ('modified', model_utils.fields.AutoLastModifiedField(default=django.utils.timezone.now, editable=False, verbose_name='modified')),
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('nomen', models.CharField(max_length=255, null=True)),
                ('status', django_fsm.FSMIntegerField(choices=[(0, b'New'), (10, b'Validated'), (25, b'Cleared'), (30, b'Flagged'), (35, b'Revised'), (40, b'Confirmed')], default=0)),
                ('category', models.IntegerField(choices=[(1, b'Music'), (2, b'Presentation'), (3, b'Singing')])),
                ('kind', models.IntegerField(choices=[(10, b'Official'), (20, b'Practice'), (30, b'Composite')])),
                ('points', models.IntegerField(blank=True, help_text=b'\n            The number of points (0-100)', null=True, validators=[django.core.validators.MaxValueValidator(100, message=b'Points must be between 0 - 100'), django.core.validators.MinValueValidator(0, message=b'Points must be between 0 - 100')])),
                ('original', models.IntegerField(blank=True, help_text=b'\n            The original score (before revision).', null=True, validators=[django.core.validators.MaxValueValidator(100, message=b'Points must be between 0 - 100'), django.core.validators.MinValueValidator(0, message=b'Points must be between 0 - 100')])),
                ('violation', django_fsm.FSMIntegerField(blank=True, choices=[(10, b'General')], null=True)),
                ('penalty', models.IntegerField(blank=True, help_text=b'\n            The penalty (0-100)', null=True, validators=[django.core.validators.MaxValueValidator(100, message=b'Points must be between 0 - 100'), django.core.validators.MinValueValidator(0, message=b'Points must be between 0 - 100')])),
                ('is_flagged', models.BooleanField(default=False)),
                ('person', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='scores', to='app.Person')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Session',
            fields=[
                ('created', model_utils.fields.AutoCreatedField(default=django.utils.timezone.now, editable=False, verbose_name='created')),
                ('modified', model_utils.fields.AutoLastModifiedField(default=django.utils.timezone.now, editable=False, verbose_name='modified')),
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('nomen', models.CharField(max_length=255, null=True)),
                ('status', django_fsm.FSMIntegerField(choices=[(0, b'New'), (2, b'Listed'), (4, b'Opened'), (8, b'Closed'), (10, b'Validated'), (20, b'Started'), (30, b'Finished'), (45, b'Published')], default=0)),
                ('kind', models.IntegerField(choices=[(1, b'Quartet'), (2, b'Chorus'), (10, b'Seniors'), (20, b'Collegiate'), (30, b'Youth')], help_text=b'\n            The kind of session.  Generally this will be either quartet or chorus,\n            with the exception being International and Midwinter which hold exclusive\n            Youth and Senior sessions respectively.')),
                ('start_date', models.DateField(blank=True, null=True)),
                ('end_date', models.DateField(blank=True, null=True)),
                ('num_rounds', models.IntegerField()),
                ('panel_size', models.IntegerField(blank=True, null=True)),
                ('scoresheet_pdf', models.FileField(blank=True, help_text=b'\n            The historical PDF OSS.', null=True, upload_to=app.models.generate_image_filename)),
                ('convention', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='sessions', to='app.Convention')),
                ('current', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='current_session', to='app.Round')),
            ],
        ),
        migrations.CreateModel(
            name='Slot',
            fields=[
                ('created', model_utils.fields.AutoCreatedField(default=django.utils.timezone.now, editable=False, verbose_name='created')),
                ('modified', model_utils.fields.AutoLastModifiedField(default=django.utils.timezone.now, editable=False, verbose_name='modified')),
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('nomen', models.CharField(max_length=255, null=True)),
                ('status', django_fsm.FSMIntegerField(choices=[(0, b'New')], default=0)),
                ('num', models.IntegerField()),
                ('location', models.CharField(blank=True, max_length=255, null=True)),
                ('photo', models.DateTimeField(blank=True, null=True)),
                ('arrive', models.DateTimeField(blank=True, null=True)),
                ('depart', models.DateTimeField(blank=True, null=True)),
                ('backstage', models.DateTimeField(blank=True, null=True)),
                ('onstage', models.DateTimeField(blank=True, null=True)),
                ('round', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='slots', to='app.Round')),
            ],
        ),
        migrations.CreateModel(
            name='Song',
            fields=[
                ('created', model_utils.fields.AutoCreatedField(default=django.utils.timezone.now, editable=False, verbose_name='created')),
                ('modified', model_utils.fields.AutoLastModifiedField(default=django.utils.timezone.now, editable=False, verbose_name='modified')),
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('nomen', models.CharField(max_length=255, null=True)),
                ('status', django_fsm.FSMIntegerField(choices=[(0, b'New'), (10, b'Validated'), (38, b'Finished'), (40, b'Confirmed'), (50, b'Final'), (90, b'Published')], default=0)),
                ('num', models.IntegerField()),
            ],
        ),
        migrations.CreateModel(
            name='Submission',
            fields=[
                ('created', model_utils.fields.AutoCreatedField(default=django.utils.timezone.now, editable=False, verbose_name='created')),
                ('modified', model_utils.fields.AutoLastModifiedField(default=django.utils.timezone.now, editable=False, verbose_name='modified')),
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('nomen', models.CharField(max_length=255, null=True)),
                ('status', django_fsm.FSMIntegerField(choices=[(0, b'New'), (10, b'Pre-Submitted'), (20, b'Post-Submitted'), (30, b'Validated')], default=0)),
                ('title', models.CharField(max_length=200)),
                ('arranger', models.CharField(blank=True, max_length=200)),
                ('source', models.CharField(blank=True, max_length=200)),
                ('is_medley', models.BooleanField(default=False)),
                ('is_parody', models.BooleanField(default=False)),
                ('catalog', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='submissions', to='app.Catalog')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Venue',
            fields=[
                ('created', model_utils.fields.AutoCreatedField(default=django.utils.timezone.now, editable=False, verbose_name='created')),
                ('modified', model_utils.fields.AutoLastModifiedField(default=django.utils.timezone.now, editable=False, verbose_name='modified')),
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('nomen', models.CharField(editable=False, max_length=255, unique=True)),
                ('name', models.CharField(help_text=b'\n            The name of the resource.', max_length=200)),
                ('status', django_fsm.FSMIntegerField(choices=[(-10, b'Inactive'), (0, b'New'), (10, b'Active')], default=0)),
                ('location', models.CharField(max_length=255)),
                ('city', models.CharField(max_length=255)),
                ('state', models.CharField(max_length=255)),
                ('airport', models.CharField(blank=True, max_length=3, null=True)),
                ('timezone', timezone_field.fields.TimeZoneField(help_text=b'\n            The local timezone of the venue.')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='ContestantScore',
            fields=[
                ('contestant_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='app.Contestant')),
                ('rank', models.IntegerField(blank=True, null=True)),
                ('mus_points', models.IntegerField(blank=True, null=True)),
                ('prs_points', models.IntegerField(blank=True, null=True)),
                ('sng_points', models.IntegerField(blank=True, null=True)),
                ('total_points', models.IntegerField(blank=True, null=True)),
                ('mus_score', models.FloatField(blank=True, null=True)),
                ('prs_score', models.FloatField(blank=True, null=True)),
                ('sng_score', models.FloatField(blank=True, null=True)),
                ('total_score', models.FloatField(blank=True, null=True)),
            ],
            options={
                'abstract': False,
            },
            bases=('app.contestant',),
        ),
        migrations.CreateModel(
            name='ContestScore',
            fields=[
                ('contest_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='app.Contest')),
            ],
            options={
                'abstract': False,
            },
            bases=('app.contest',),
        ),
        migrations.CreateModel(
            name='PerformanceScore',
            fields=[
                ('performance_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='app.Performance')),
                ('rank', models.IntegerField(blank=True, null=True)),
                ('mus_points', models.IntegerField(blank=True, null=True)),
                ('prs_points', models.IntegerField(blank=True, null=True)),
                ('sng_points', models.IntegerField(blank=True, null=True)),
                ('total_points', models.IntegerField(blank=True, null=True)),
                ('mus_score', models.FloatField(blank=True, null=True)),
                ('prs_score', models.FloatField(blank=True, null=True)),
                ('sng_score', models.FloatField(blank=True, null=True)),
                ('total_score', models.FloatField(blank=True, null=True)),
            ],
            options={
                'abstract': False,
            },
            bases=('app.performance',),
        ),
        migrations.CreateModel(
            name='PerformerScore',
            fields=[
                ('performer_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='app.Performer')),
                ('rank', models.IntegerField(blank=True, null=True)),
                ('mus_points', models.IntegerField(blank=True, null=True)),
                ('prs_points', models.IntegerField(blank=True, null=True)),
                ('sng_points', models.IntegerField(blank=True, null=True)),
                ('total_points', models.IntegerField(blank=True, null=True)),
                ('mus_score', models.FloatField(blank=True, null=True)),
                ('prs_score', models.FloatField(blank=True, null=True)),
                ('sng_score', models.FloatField(blank=True, null=True)),
                ('total_score', models.FloatField(blank=True, null=True)),
                ('csa_pdf', models.FileField(blank=True, help_text=b'\n            The historical PDF CSA.', null=True, upload_to=app.models.generate_image_filename)),
            ],
            options={
                'abstract': False,
            },
            bases=('app.performer',),
        ),
        migrations.CreateModel(
            name='SongScore',
            fields=[
                ('song_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='app.Song')),
                ('rank', models.IntegerField(blank=True, null=True)),
                ('mus_points', models.IntegerField(blank=True, null=True)),
                ('prs_points', models.IntegerField(blank=True, null=True)),
                ('sng_points', models.IntegerField(blank=True, null=True)),
                ('total_points', models.IntegerField(blank=True, null=True)),
                ('mus_score', models.FloatField(blank=True, null=True)),
                ('prs_score', models.FloatField(blank=True, null=True)),
                ('sng_score', models.FloatField(blank=True, null=True)),
                ('total_score', models.FloatField(blank=True, null=True)),
            ],
            options={
                'abstract': False,
            },
            bases=('app.song',),
        ),
        migrations.AddField(
            model_name='submission',
            name='performer',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='submissions', to='app.Performer'),
        ),
        migrations.AddField(
            model_name='song',
            name='performance',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='songs', to='app.Performance'),
        ),
        migrations.AddField(
            model_name='song',
            name='submission',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='songs', to='app.Submission'),
        ),
        migrations.AddField(
            model_name='session',
            name='cursor',
            field=models.OneToOneField(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='app.Performance'),
        ),
        migrations.AddField(
            model_name='session',
            name='primary',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='primary_session', to='app.Contest'),
        ),
        migrations.AddField(
            model_name='score',
            name='song',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='scores', to='app.Song'),
        ),
        migrations.AddField(
            model_name='round',
            name='session',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='rounds', to='app.Session'),
        ),
        migrations.AddField(
            model_name='performer',
            name='baritone',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='performers_baritone', to='app.Person'),
        ),
        migrations.AddField(
            model_name='performer',
            name='bass',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='performers_bass', to='app.Person'),
        ),
        migrations.AddField(
            model_name='performer',
            name='codirector',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='performers_codirector', to='app.Person'),
        ),
        migrations.AddField(
            model_name='performer',
            name='director',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='performers_director', to='app.Person'),
        ),
        migrations.AddField(
            model_name='performer',
            name='entity',
            field=mptt.fields.TreeForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='performers', to='app.Entity'),
        ),
        migrations.AddField(
            model_name='performer',
            name='lead',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='performers_lead', to='app.Person'),
        ),
        migrations.AddField(
            model_name='performer',
            name='session',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='performers', to='app.Session'),
        ),
        migrations.AddField(
            model_name='performer',
            name='tenor',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='performers_tenor', to='app.Person'),
        ),
        migrations.AddField(
            model_name='performance',
            name='performer',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='performances', to='app.Performer'),
        ),
        migrations.AddField(
            model_name='performance',
            name='round',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='performances', to='app.Round'),
        ),
        migrations.AddField(
            model_name='performance',
            name='slot',
            field=models.OneToOneField(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='app.Slot'),
        ),
        migrations.AddField(
            model_name='membership',
            name='person',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='memberships', to='app.Person'),
        ),
        migrations.AddField(
            model_name='convention',
            name='entity',
            field=mptt.fields.TreeForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='conventions', to='app.Entity'),
        ),
        migrations.AddField(
            model_name='convention',
            name='venue',
            field=models.ForeignKey(blank=True, help_text=b'\n            The venue for the convention.', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='conventions', to='app.Venue'),
        ),
        migrations.AddField(
            model_name='contestant',
            name='contest',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='contestants', to='app.Contest'),
        ),
        migrations.AddField(
            model_name='contestant',
            name='performer',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='contestants', to='app.Performer'),
        ),
        migrations.AddField(
            model_name='contest',
            name='award',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='contests', to='app.Award'),
        ),
        migrations.AddField(
            model_name='contest',
            name='session',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='contests', to='app.Session'),
        ),
        migrations.AddField(
            model_name='award',
            name='entity',
            field=mptt.fields.TreeForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='awards', to='app.Entity'),
        ),
        migrations.AddField(
            model_name='assignment',
            name='entity',
            field=mptt.fields.TreeForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='assignments', to='app.Entity'),
        ),
        migrations.AddField(
            model_name='assignment',
            name='person',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='assignments', to='app.Person'),
        ),
        migrations.AddField(
            model_name='assignment',
            name='session',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='assignments', to='app.Session'),
        ),
        migrations.AlterUniqueTogether(
            name='song',
            unique_together=set([('performance', 'num')]),
        ),
        migrations.AlterUniqueTogether(
            name='slot',
            unique_together=set([('round', 'num')]),
        ),
        migrations.AlterUniqueTogether(
            name='session',
            unique_together=set([('convention', 'kind')]),
        ),
        migrations.AlterUniqueTogether(
            name='round',
            unique_together=set([('session', 'kind', 'num')]),
        ),
        migrations.AddField(
            model_name='contestscore',
            name='champion',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='app.Performer'),
        ),
        migrations.AlterUniqueTogether(
            name='contestant',
            unique_together=set([('performer', 'contest')]),
        ),
        migrations.AlterUniqueTogether(
            name='contest',
            unique_together=set([('session', 'award')]),
        ),
        migrations.AlterUniqueTogether(
            name='assignment',
            unique_together=set([('session', 'category', 'kind', 'slot')]),
        ),
    ]
