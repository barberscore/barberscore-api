# -*- coding: utf-8 -*-
# Generated by Django 1.10.5 on 2017-01-27 19:50
from __future__ import unicode_literals

from django.db import migrations

from app.models import (
    Organization,
    Group,
    Entity,
)


def copy_orgs(apps, schema_editor):
    # Organization = apps.get_model("app", "Organization")
    # Entity = apps.get_model("app", "Entity")
    kind_dict = {
        0: 1,
        50: 2,
        10: 11,
        20: 12,
        30: 13,
        40: 21,
    }
    with Entity.objects.disable_mptt_updates():
        for o in Organization.objects.all():
            kind = kind_dict[o.kind]
            if o.parent:
                parent = o.parent.id.hex
            else:
                parent = None

            Entity.objects.create(
                name=o.name,
                status=o.status,
                level=o.level,
                kind=kind,
                short_name=o.short_name,
                long_name=o.long_name,
                code=o.code,
                start_date=o.start_date,
                end_date=o.end_date,
                location=o.location,
                website=o.website,
                facebook=o.facebook,
                twitter=o.twitter,
                email=o.email,
                phone=o.phone,
                picture=o.picture,
                description=o.description,
                notes=o.notes,
                bhs_id=o.bhs_id,
                legacy_id=o.id.hex,
                legacy_parent=parent,
            )


def copy_groups(apps, schema_editor):
    # Group = apps.get_model("app", "Group")
    # Entity = apps.get_model("app", "Entity")
    fht = Organization.objects.get(kind=20)
    with Entity.objects.disable_mptt_updates():
        for g in Group.objects.all():

            if g.status == 50:
                status = 0
            else:
                status = g.status

            if g.kind == 1:
                kind = 31
            if g.kind == 2:
                kind = 32

            try:
                long_name = g.chapter.name
            except AttributeError:
                long_name = g.name

            try:
                code = g.chapter.code
            except AttributeError:
                code = None

            if g.kind == 2:
                try:
                    parent = g.chapter.organization.id.hex
                except AttributeError:
                    parent = fht.id.hex
            else:
                parent = fht.id.hex

            Entity.objects.create(
                name=g.name,
                status=status,
                kind=kind,
                level=3,
                age=g.age,
                is_novice=g.is_novice,
                short_name=g.name,
                long_name=long_name,
                code=code,
                start_date=g.start_date,
                end_date=g.end_date,
                location=g.location,
                website=g.website,
                facebook=g.facebook,
                twitter=g.twitter,
                email=g.email,
                phone=g.phone,
                picture=g.picture,
                description=g.description,
                notes=g.notes,
                bhs_id=g.bhs_id,
                legacy_id=g.id.hex,
                legacy_parent=parent,
            )


def fix_parents(apps, schema_editor):
    es = Entity.objects.all()
    with Entity.objects.disable_mptt_updates():
        for e in es:
            try:
                e.parent = Entity.objects.get(legacy_id=e.legacy_parent)
            except Entity.DoesNotExist:
                pass
            e.save()
    Entity.objects.rebuild()


class Migration(migrations.Migration):

    dependencies = [
        ('app', '0010_auto_20170127_1150'),
    ]

    operations = [
        migrations.RunPython(copy_orgs),
        migrations.RunPython(copy_groups),
        migrations.RunPython(fix_parents),
    ]
