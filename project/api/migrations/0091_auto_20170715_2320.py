# -*- coding: utf-8 -*-
# Generated by Django 1.11.3 on 2017-07-16 06:20
from __future__ import unicode_literals

import api.fields
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone
import django_fsm
import model_utils.fields
import uuid


class Migration(migrations.Migration):

    dependencies = [
        ('api', '0090_award_level'),
    ]

    operations = [
        migrations.CreateModel(
            name='Group',
            fields=[
                ('created', model_utils.fields.AutoCreatedField(default=django.utils.timezone.now, editable=False, verbose_name='created')),
                ('modified', model_utils.fields.AutoLastModifiedField(default=django.utils.timezone.now, editable=False, verbose_name='modified')),
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('nomen', models.CharField(editable=False, max_length=255)),
                ('name', models.CharField(help_text='\n            The name of the resource.\n        ', max_length=255)),
                ('status', django_fsm.FSMIntegerField(choices=[(-10, 'Inactive'), (0, 'New'), (10, 'Active')], default=0)),
                ('kind', models.IntegerField(choices=[(32, 'Chorus'), (33, 'Very Large Quartet'), (34, 'Mixed Group'), (41, 'Quartet')], help_text='\n            The kind of group.\n        ')),
                ('short_name', models.CharField(blank=True, help_text='\n            A short-form name for the resource.', max_length=255)),
                ('code', models.CharField(blank=True, help_text='\n            The chapter code.', max_length=255)),
                ('start_date', models.DateField(blank=True, null=True)),
                ('end_date', models.DateField(blank=True, null=True)),
                ('location', models.CharField(blank=True, help_text='\n            The geographical location of the resource.', max_length=255)),
                ('website', models.URLField(blank=True, help_text='\n            The website URL of the resource.')),
                ('facebook', models.URLField(blank=True, help_text='\n            The facebook URL of the resource.')),
                ('twitter', models.CharField(blank=True, help_text='\n            The twitter handle (in form @twitter_handle) of the resource.', max_length=16, validators=[django.core.validators.RegexValidator(message='\n                    Must be a single Twitter handle\n                    in the form `@twitter_handle`.\n                ', regex='@([A-Za-z0-9_]+)')])),
                ('email', models.EmailField(blank=True, help_text='\n            The contact email of the resource.', max_length=254)),
                ('phone', models.CharField(blank=True, help_text='\n            The phone number of the resource.  Include country code.', max_length=25)),
                ('image', models.ImageField(blank=True, max_length=255, null=True, upload_to=api.fields.PathAndRename())),
                ('description', models.TextField(blank=True, help_text='\n            A description of the entity.  Max 1000 characters.', max_length=1000)),
                ('notes', models.TextField(blank=True, help_text='\n            Notes (for internal use only).')),
                ('bhs_id', models.IntegerField(blank=True, null=True, unique=True)),
                ('org_sort', models.IntegerField(blank=True, editable=False, null=True, unique=True)),
            ],
            options={
                'verbose_name_plural': 'groups',
            },
        ),
        migrations.CreateModel(
            name='Organization',
            fields=[
                ('created', model_utils.fields.AutoCreatedField(default=django.utils.timezone.now, editable=False, verbose_name='created')),
                ('modified', model_utils.fields.AutoLastModifiedField(default=django.utils.timezone.now, editable=False, verbose_name='modified')),
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('nomen', models.CharField(editable=False, max_length=255)),
                ('name', models.CharField(help_text='\n            The name of the resource.\n        ', max_length=255)),
                ('status', django_fsm.FSMIntegerField(choices=[(-10, 'Inactive'), (0, 'New'), (10, 'Active')], default=0)),
                ('kind', models.IntegerField(choices=[('International', [(1, 'International')]), ('District', [(11, 'District'), (12, 'Noncompetitive'), (13, 'Affiliate')]), ('Division', [(21, 'Division')]), ('Chapter', [(30, 'Chapter')])], help_text='\n            The kind of organization.\n        ')),
                ('short_name', models.CharField(blank=True, help_text='\n            A short-form name for the resource.', max_length=255)),
                ('code', models.CharField(blank=True, help_text='\n            The chapter code.', max_length=255)),
                ('start_date', models.DateField(blank=True, null=True)),
                ('end_date', models.DateField(blank=True, null=True)),
                ('location', models.CharField(blank=True, help_text='\n            The geographical location of the resource.', max_length=255)),
                ('website', models.URLField(blank=True, help_text='\n            The website URL of the resource.')),
                ('facebook', models.URLField(blank=True, help_text='\n            The facebook URL of the resource.')),
                ('twitter', models.CharField(blank=True, help_text='\n            The twitter handle (in form @twitter_handle) of the resource.', max_length=16, validators=[django.core.validators.RegexValidator(message='\n                    Must be a single Twitter handle\n                    in the form `@twitter_handle`.\n                ', regex='@([A-Za-z0-9_]+)')])),
                ('email', models.EmailField(blank=True, help_text='\n            The contact email of the resource.', max_length=254)),
                ('phone', models.CharField(blank=True, help_text='\n            The phone number of the resource.  Include country code.', max_length=25)),
                ('image', models.ImageField(blank=True, max_length=255, null=True, upload_to=api.fields.PathAndRename())),
                ('description', models.TextField(blank=True, help_text='\n            A description of the entity.  Max 1000 characters.', max_length=1000)),
                ('notes', models.TextField(blank=True, help_text='\n            Notes (for internal use only).')),
                ('bhs_id', models.IntegerField(blank=True, null=True, unique=True)),
                ('org_sort', models.IntegerField(blank=True, editable=False, null=True, unique=True)),
                ('parent', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='children', to='api.Organization')),
            ],
            options={
                'verbose_name_plural': 'organizations',
            },
        ),
        migrations.AddField(
            model_name='group',
            name='organization',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='groups', to='api.Organization'),
        ),
        migrations.AddField(
            model_name='award',
            name='organization',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='awards', to='api.Organization'),
        ),
        migrations.AddField(
            model_name='convention',
            name='organization',
            field=models.ForeignKey(blank=True, help_text='\n            The owning entity for the convention.', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='conventions', to='api.Organization'),
        ),
        migrations.AddField(
            model_name='entry',
            name='group',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='entries', to='api.Group'),
        ),
        migrations.AddField(
            model_name='member',
            name='group',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='members', to='api.Group'),
        ),
        migrations.AddField(
            model_name='officer',
            name='organization',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='officers', to='api.Organization'),
        ),
        migrations.AddField(
            model_name='repertory',
            name='group',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='repertories', to='api.Group'),
        ),
    ]
