# Generated by Django 2.1.5 on 2019-02-06 03:35

import api.fields
import django.contrib.postgres.fields
import django.contrib.postgres.fields.jsonb
import django.contrib.postgres.fields.ranges
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone
import django_fsm
import model_utils.fields
import timezone_field.fields
import uuid


class Migration(migrations.Migration):

    initial = True

    dependencies = [
    ]

    operations = [
        migrations.CreateModel(
            name='User',
            fields=[
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('username', models.CharField(max_length=100, unique=True)),
                ('is_staff', models.BooleanField(default=False)),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('modified', models.DateTimeField(auto_now=True)),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Appearance',
            fields=[
                ('created', model_utils.fields.AutoCreatedField(default=django.utils.timezone.now, editable=False, verbose_name='created')),
                ('modified', model_utils.fields.AutoLastModifiedField(default=django.utils.timezone.now, editable=False, verbose_name='modified')),
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('status', django_fsm.FSMIntegerField(choices=[(0, 'New'), (7, 'Built'), (10, 'Started'), (20, 'Finished'), (25, 'Variance'), (30, 'Verified')], default=0, help_text='DO NOT CHANGE MANUALLY unless correcting a mistake.  Use the buttons to change state.')),
                ('num', models.IntegerField()),
                ('draw', models.IntegerField(blank=True, null=True)),
                ('actual_start', models.DateTimeField(blank=True, help_text='\n            The actual appearance window.', null=True)),
                ('actual_finish', models.DateTimeField(blank=True, help_text='\n            The actual appearance window.', null=True)),
                ('pos', models.IntegerField(blank=True, help_text='Actual Participants-on-Stage', null=True)),
                ('legacy_group', models.CharField(blank=True, max_length=255, null=True)),
                ('rank', models.IntegerField(blank=True, null=True)),
                ('mus_points', models.IntegerField(blank=True, null=True)),
                ('per_points', models.IntegerField(blank=True, null=True)),
                ('sng_points', models.IntegerField(blank=True, null=True)),
                ('tot_points', models.IntegerField(blank=True, null=True)),
                ('mus_score', models.FloatField(blank=True, null=True)),
                ('per_score', models.FloatField(blank=True, null=True)),
                ('sng_score', models.FloatField(blank=True, null=True)),
                ('tot_score', models.FloatField(blank=True, null=True)),
                ('mus_rank', models.IntegerField(blank=True, null=True)),
                ('per_rank', models.IntegerField(blank=True, null=True)),
                ('sng_rank', models.IntegerField(blank=True, null=True)),
                ('tot_rank', models.IntegerField(blank=True, null=True)),
                ('variance_report', models.FileField(blank=True, null=True, upload_to='')),
            ],
            options={
                'ordering': ['-round__num', 'num'],
            },
        ),
        migrations.CreateModel(
            name='Assignment',
            fields=[
                ('created', model_utils.fields.AutoCreatedField(default=django.utils.timezone.now, editable=False, verbose_name='created')),
                ('modified', model_utils.fields.AutoLastModifiedField(default=django.utils.timezone.now, editable=False, verbose_name='modified')),
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('status', django_fsm.FSMIntegerField(choices=[(-10, 'Inactive'), (0, 'New'), (10, 'Active')], default=0, help_text='DO NOT CHANGE MANUALLY unless correcting a mistake.  Use the buttons to change state.')),
                ('kind', models.IntegerField(choices=[(10, 'Official'), (20, 'Practice'), (30, 'Observer')])),
                ('category', models.IntegerField(blank=True, choices=[(5, 'DRCJ'), (10, 'CA'), (30, 'Music'), (40, 'Performance'), (50, 'Singing')], null=True)),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Award',
            fields=[
                ('created', model_utils.fields.AutoCreatedField(default=django.utils.timezone.now, editable=False, verbose_name='created')),
                ('modified', model_utils.fields.AutoLastModifiedField(default=django.utils.timezone.now, editable=False, verbose_name='modified')),
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('name', models.CharField(help_text='Award Name.', max_length=255)),
                ('status', django_fsm.FSMIntegerField(choices=[(-10, 'Inactive'), (0, 'New'), (10, 'Active')], default=0, help_text='DO NOT CHANGE MANUALLY unless correcting a mistake.  Use the buttons to change state.')),
                ('kind', models.IntegerField(choices=[(32, 'Chorus'), (41, 'Quartet')])),
                ('gender', models.IntegerField(choices=[(10, 'Male'), (20, 'Female'), (30, 'Mixed')], default=10, help_text='\n            The gender of session.\n        ')),
                ('level', models.IntegerField(choices=[(10, 'Championship'), (30, 'Qualifier'), (45, 'Representative'), (50, 'Deferred'), (60, 'Manual'), (70, 'Improved - Raw'), (80, 'Improved - Standard')])),
                ('season', models.IntegerField(choices=[(1, 'Summer'), (2, 'Midwinter'), (3, 'Fall'), (4, 'Spring')])),
                ('num_rounds', models.IntegerField(help_text='Number of rounds to determine the championship')),
                ('threshold', models.FloatField(blank=True, help_text='\n            The score threshold for automatic qualification (if any.)\n        ', null=True)),
                ('minimum', models.FloatField(blank=True, help_text='\n            The minimum score required for qualification (if any.)\n        ', null=True)),
                ('advance', models.FloatField(blank=True, help_text='\n            The score threshold to advance to next round (if any) in\n            multi-round qualification.\n        ', null=True)),
                ('spots', models.IntegerField(blank=True, help_text='Number of top spots which qualify', null=True)),
                ('description', models.TextField(blank=True, help_text='\n            The Public description of the award.', max_length=1000)),
                ('notes', models.TextField(blank=True, help_text='\n            Private Notes (for internal use only).')),
                ('division', models.IntegerField(blank=True, choices=[(10, 'EVG Division I'), (20, 'EVG Division II'), (30, 'EVG Division III'), (40, 'EVG Division IV'), (50, 'EVG Division V'), (60, 'FWD Arizona'), (70, 'FWD Northeast'), (80, 'FWD Northwest'), (90, 'FWD Southeast'), (100, 'FWD Southwest'), (110, 'LOL 10000 Lakes'), (120, 'LOL Division One'), (130, 'LOL Northern Plains'), (140, 'LOL Packerland'), (150, 'LOL Southwest'), (160, 'MAD Atlantic'), (170, 'MAD Central'), (180, 'MAD Northern'), (190, 'MAD Southern'), (200, 'MAD Western'), (210, 'NED Granite and Pine'), (220, 'NED Mountain'), (230, 'NED Patriot'), (240, 'NED Sunrise'), (250, 'NED Yankee'), (260, 'SWD Northeast'), (270, 'SWD Northwest'), (280, 'SWD Southeast'), (290, 'SWD Southwest')], null=True)),
                ('age', models.IntegerField(blank=True, choices=[(10, 'Seniors'), (20, 'Novice'), (30, 'Youth')], null=True)),
                ('size', models.IntegerField(blank=True, choices=[(100, 'Plateau 1'), (110, 'Plateau 2'), (120, 'Plateau 3'), (130, 'Plateau 4'), (140, 'Plateau A'), (150, 'Plateau AA'), (160, 'Plateau AAA'), (170, 'Plateau AAAA'), (180, 'Plateau B'), (190, 'Plateau I'), (200, 'Plateau II'), (210, 'Plateau III'), (220, 'Plateau IV'), (230, 'Small')], null=True)),
                ('size_range', django.contrib.postgres.fields.ranges.IntegerRangeField(blank=True, null=True)),
                ('scope', models.IntegerField(blank=True, choices=[(100, 'Plateau 1'), (110, 'Plateau 2'), (120, 'Plateau 3'), (130, 'Plateau 4'), (140, 'Plateau A'), (150, 'Plateau AA'), (160, 'Plateau AAA'), (170, 'Plateau AAAA'), (175, 'Plateau AAAAA')], null=True)),
                ('scope_range', django.contrib.postgres.fields.ranges.FloatRangeField(blank=True, null=True)),
                ('tree_sort', models.IntegerField(blank=True, editable=False, null=True, unique=True)),
            ],
            options={
                'ordering': ['tree_sort'],
            },
        ),
        migrations.CreateModel(
            name='Chart',
            fields=[
                ('created', model_utils.fields.AutoCreatedField(default=django.utils.timezone.now, editable=False, verbose_name='created')),
                ('modified', model_utils.fields.AutoLastModifiedField(default=django.utils.timezone.now, editable=False, verbose_name='modified')),
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('status', django_fsm.FSMIntegerField(choices=[(-20, 'Protected'), (-10, 'Inactive'), (0, 'New'), (10, 'Active')], default=0, help_text='DO NOT CHANGE MANUALLY unless correcting a mistake.  Use the buttons to change state.')),
                ('title', models.CharField(max_length=255)),
                ('arrangers', models.CharField(max_length=255)),
                ('composers', models.CharField(max_length=255)),
                ('lyricists', models.CharField(max_length=255)),
                ('holders', models.TextField(blank=True)),
                ('description', models.TextField(blank=True, help_text="\n            Fun or interesting facts to share about the chart (ie, 'from Disney's Lion King, first sung by Elton John'.)", max_length=1000)),
                ('notes', models.TextField(blank=True, help_text='\n            Private Notes (for internal use only).')),
                ('image', models.ImageField(blank=True, null=True, upload_to=api.fields.UploadPath())),
            ],
        ),
        migrations.CreateModel(
            name='Competitor',
            fields=[
                ('created', model_utils.fields.AutoCreatedField(default=django.utils.timezone.now, editable=False, verbose_name='created')),
                ('modified', model_utils.fields.AutoLastModifiedField(default=django.utils.timezone.now, editable=False, verbose_name='modified')),
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('status', django_fsm.FSMIntegerField(choices=[(-30, 'Disqualified'), (-20, 'Scratched'), (-10, 'Finished'), (0, 'New'), (10, 'Started')], default=0, help_text='DO NOT CHANGE MANUALLY unless correcting a mistake.  Use the buttons to change state.')),
                ('image', models.ImageField(blank=True, null=True, upload_to=api.fields.UploadPath())),
                ('is_private', models.BooleanField(default=False, help_text='Copied from entry.')),
                ('is_ranked', models.BooleanField(default=False, help_text='If the competitor will be ranked in OSS.')),
                ('is_multi', models.BooleanField(default=False, help_text='If the competitor is contesting a multi-round award.')),
                ('participants', models.CharField(blank=True, default='', help_text='Director(s) or Members (listed TLBB)', max_length=255)),
                ('representing', models.CharField(blank=True, default='', help_text='Representing entity', max_length=255)),
                ('contesting', models.CharField(blank=True, default='', help_text='Award numbers contestanting', max_length=255)),
                ('pos', models.IntegerField(blank=True, help_text='Actual Participants-on-Stage', null=True)),
                ('draw', models.IntegerField(blank=True, null=True)),
                ('rank', models.IntegerField(blank=True, null=True)),
                ('mus_points', models.IntegerField(blank=True, null=True)),
                ('per_points', models.IntegerField(blank=True, null=True)),
                ('sng_points', models.IntegerField(blank=True, null=True)),
                ('tot_points', models.IntegerField(blank=True, null=True)),
                ('mus_score', models.FloatField(blank=True, null=True)),
                ('per_score', models.FloatField(blank=True, null=True)),
                ('sng_score', models.FloatField(blank=True, null=True)),
                ('tot_score', models.FloatField(blank=True, null=True)),
                ('mus_rank', models.IntegerField(blank=True, null=True)),
                ('per_rank', models.IntegerField(blank=True, null=True)),
                ('sng_rank', models.IntegerField(blank=True, null=True)),
                ('tot_rank', models.IntegerField(blank=True, null=True)),
                ('csa', models.FileField(blank=True, null=True, upload_to='')),
            ],
            options={
                'verbose_name_plural': 'competitors',
            },
        ),
        migrations.CreateModel(
            name='Complete',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('mark', models.BooleanField(default=False)),
                ('row', models.IntegerField(blank=True, null=True)),
                ('year', models.IntegerField(blank=True, null=True)),
                ('season_raw', models.CharField(blank=True, max_length=255)),
                ('district_raw', models.CharField(blank=True, max_length=255)),
                ('convention_raw', models.CharField(blank=True, max_length=255)),
                ('session_raw', models.CharField(blank=True, max_length=255)),
                ('round_raw', models.CharField(blank=True, max_length=255)),
                ('season_kind', models.IntegerField(blank=True, choices=[(1, 'Summer'), (2, 'Midwinter'), (3, 'Fall'), (4, 'Spring')], null=True)),
                ('district_code', models.CharField(blank=True, max_length=255)),
                ('convention_name', models.CharField(blank=True, max_length=255)),
                ('session_kind', models.IntegerField(blank=True, choices=[(32, 'Chorus'), (41, 'Quartet'), (42, 'Mixed'), (43, 'Senior'), (44, 'Youth'), (45, 'Unknown'), (46, 'VLQ')], null=True)),
                ('round_kind', models.IntegerField(blank=True, choices=[(1, 'Finals'), (2, 'Semi-Finals'), (3, 'Quarter-Finals')], null=True)),
                ('category', models.CharField(blank=True, max_length=255)),
                ('panelist_name', models.CharField(blank=True, max_length=255, null=True)),
                ('panelist_num', models.IntegerField(blank=True, null=True)),
                ('points', django.contrib.postgres.fields.ArrayField(base_field=models.IntegerField(blank=True, null=True), blank=True, null=True, size=None)),
                ('num_sessions', models.IntegerField(blank=True, null=True)),
                ('num_rounds', models.IntegerField(blank=True, null=True)),
                ('num_appearances', models.IntegerField(blank=True, null=True)),
                ('num_panelists', models.IntegerField(blank=True, null=True)),
            ],
        ),
        migrations.CreateModel(
            name='Contender',
            fields=[
                ('created', model_utils.fields.AutoCreatedField(default=django.utils.timezone.now, editable=False, verbose_name='created')),
                ('modified', model_utils.fields.AutoLastModifiedField(default=django.utils.timezone.now, editable=False, verbose_name='modified')),
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('status', django_fsm.FSMIntegerField(choices=[(0, 'New')], default=0, help_text='DO NOT CHANGE MANUALLY unless correcting a mistake.  Use the buttons to change state.')),
                ('mus_points', models.IntegerField(blank=True, null=True)),
                ('per_points', models.IntegerField(blank=True, null=True)),
                ('sng_points', models.IntegerField(blank=True, null=True)),
                ('tot_points', models.IntegerField(blank=True, null=True)),
                ('mus_score', models.FloatField(blank=True, null=True)),
                ('per_score', models.FloatField(blank=True, null=True)),
                ('sng_score', models.FloatField(blank=True, null=True)),
                ('tot_score', models.FloatField(blank=True, null=True)),
                ('mus_rank', models.IntegerField(blank=True, null=True)),
                ('per_rank', models.IntegerField(blank=True, null=True)),
                ('sng_rank', models.IntegerField(blank=True, null=True)),
                ('tot_rank', models.IntegerField(blank=True, null=True)),
                ('appearance', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='contenders', to='api.Appearance')),
            ],
        ),
        migrations.CreateModel(
            name='Contest',
            fields=[
                ('created', model_utils.fields.AutoCreatedField(default=django.utils.timezone.now, editable=False, verbose_name='created')),
                ('modified', model_utils.fields.AutoLastModifiedField(default=django.utils.timezone.now, editable=False, verbose_name='modified')),
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('status', django_fsm.FSMIntegerField(choices=[(-10, 'Excluded'), (0, 'New'), (10, 'Included')], default=0, help_text='DO NOT CHANGE MANUALLY unless correcting a mistake.  Use the buttons to change state.')),
                ('num', models.IntegerField(blank=True, null=True)),
                ('is_primary', models.BooleanField(default=False)),
                ('result', models.CharField(blank=True, default='', max_length=255)),
                ('award', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='contests', to='api.Award')),
            ],
        ),
        migrations.CreateModel(
            name='Contestant',
            fields=[
                ('created', model_utils.fields.AutoCreatedField(default=django.utils.timezone.now, editable=False, verbose_name='created')),
                ('modified', model_utils.fields.AutoLastModifiedField(default=django.utils.timezone.now, editable=False, verbose_name='modified')),
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('status', django_fsm.FSMIntegerField(choices=[(-10, 'Excluded'), (0, 'New'), (10, 'Included')], default=0, help_text='DO NOT CHANGE MANUALLY unless correcting a mistake.  Use the buttons to change state.')),
                ('rank', models.IntegerField(blank=True, null=True)),
                ('mus_points', models.IntegerField(blank=True, null=True)),
                ('per_points', models.IntegerField(blank=True, null=True)),
                ('sng_points', models.IntegerField(blank=True, null=True)),
                ('tot_points', models.IntegerField(blank=True, null=True)),
                ('mus_score', models.FloatField(blank=True, null=True)),
                ('per_score', models.FloatField(blank=True, null=True)),
                ('sng_score', models.FloatField(blank=True, null=True)),
                ('tot_score', models.FloatField(blank=True, null=True)),
                ('mus_rank', models.IntegerField(blank=True, null=True)),
                ('per_rank', models.IntegerField(blank=True, null=True)),
                ('sng_rank', models.IntegerField(blank=True, null=True)),
                ('tot_rank', models.IntegerField(blank=True, null=True)),
                ('contest', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='contestants', to='api.Contest')),
            ],
            options={
                'ordering': ('contest__num',),
            },
        ),
        migrations.CreateModel(
            name='Convention',
            fields=[
                ('created', model_utils.fields.AutoCreatedField(default=django.utils.timezone.now, editable=False, verbose_name='created')),
                ('modified', model_utils.fields.AutoLastModifiedField(default=django.utils.timezone.now, editable=False, verbose_name='modified')),
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=255, unique=True)),
                ('legacy_name', models.CharField(blank=True, max_length=255, null=True, unique=True)),
                ('legacy_venue', models.CharField(blank=True, max_length=255, null=True)),
                ('status', django_fsm.FSMIntegerField(choices=[(-25, 'Manual'), (-20, 'Incomplete'), (-15, 'Imported'), (-10, 'Inactive'), (0, 'New'), (10, 'Active')], default=0, help_text='DO NOT CHANGE MANUALLY unless correcting a mistake.  Use the buttons to change state.')),
                ('season', models.IntegerField(choices=[(1, 'Summer'), (2, 'Midwinter'), (3, 'Fall'), (4, 'Spring')])),
                ('panel', models.IntegerField(blank=True, choices=[(1, 'Single'), (2, 'Double'), (3, 'Triple'), (4, 'Quadruple'), (5, 'Quintiple')], null=True)),
                ('year', models.IntegerField(choices=[(2020, 2020), (2019, 2019), (2018, 2018), (2017, 2017), (2016, 2016), (2015, 2015), (2014, 2014), (2013, 2013), (2012, 2012), (2011, 2011), (2010, 2010), (2009, 2009), (2008, 2008), (2007, 2007), (2006, 2006), (2005, 2005), (2004, 2004), (2003, 2003), (2002, 2002), (2001, 2001), (2000, 2000), (1999, 1999), (1998, 1998), (1997, 1997), (1996, 1996), (1995, 1995), (1994, 1994), (1993, 1993), (1992, 1992), (1991, 1991), (1990, 1990), (1989, 1989), (1988, 1988), (1987, 1987), (1986, 1986), (1985, 1985), (1984, 1984), (1983, 1983), (1982, 1982), (1981, 1981), (1980, 1980), (1979, 1979), (1978, 1978), (1977, 1977), (1976, 1976), (1975, 1975), (1974, 1974), (1973, 1973), (1972, 1972), (1971, 1971), (1970, 1970), (1969, 1969), (1968, 1968), (1967, 1967), (1966, 1966), (1965, 1965), (1964, 1964), (1963, 1963), (1962, 1962), (1961, 1961), (1960, 1960), (1959, 1959), (1958, 1958), (1957, 1957), (1956, 1956), (1955, 1955), (1954, 1954), (1953, 1953), (1952, 1952), (1951, 1951), (1950, 1950), (1949, 1949), (1948, 1948), (1947, 1947), (1946, 1946), (1945, 1945), (1944, 1944), (1943, 1943), (1942, 1942), (1941, 1941), (1940, 1940), (1939, 1939)])),
                ('open_date', models.DateField(blank=True, null=True)),
                ('close_date', models.DateField(blank=True, null=True)),
                ('start_date', models.DateField(blank=True, null=True)),
                ('end_date', models.DateField(blank=True, null=True)),
                ('location', models.CharField(blank=True, max_length=255)),
                ('image', models.ImageField(blank=True, null=True, upload_to=api.fields.UploadPath())),
                ('description', models.TextField(blank=True, help_text='\n            A general description field; usually used for hotel and venue info.', max_length=1000)),
            ],
        ),
        migrations.CreateModel(
            name='Entry',
            fields=[
                ('created', model_utils.fields.AutoCreatedField(default=django.utils.timezone.now, editable=False, verbose_name='created')),
                ('modified', model_utils.fields.AutoLastModifiedField(default=django.utils.timezone.now, editable=False, verbose_name='modified')),
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('status', django_fsm.FSMIntegerField(choices=[(0, 'New'), (2, 'Built'), (5, 'Invited'), (7, 'Withdrawn'), (10, 'Submitted'), (20, 'Approved')], default=0, help_text='DO NOT CHANGE MANUALLY unless correcting a mistake.  Use the buttons to change state.')),
                ('is_evaluation', models.BooleanField(default=True, help_text='\n            Entry requests evaluation.')),
                ('is_private', models.BooleanField(default=False, help_text='\n            Keep scores private.')),
                ('is_mt', models.BooleanField(default=False, help_text='\n            Keep scores private.')),
                ('draw', models.IntegerField(blank=True, help_text='\n            The draw for the initial round only.', null=True)),
                ('seed', models.IntegerField(blank=True, help_text='\n            The incoming rank based on prelim score.', null=True)),
                ('prelim', models.FloatField(blank=True, help_text='\n            The incoming prelim score.', null=True)),
                ('participants', models.CharField(blank=True, default='', max_length=255)),
                ('pos', models.IntegerField(blank=True, help_text='Estimated Participants-on-Stage', null=True)),
                ('representing', models.CharField(blank=True, default='', max_length=255)),
                ('description', models.TextField(blank=True, help_text='\n            Public Notes (usually from competitor).', max_length=1000)),
                ('notes', models.TextField(blank=True, help_text='\n            Private Notes (for internal use only).')),
                ('rank', models.IntegerField(blank=True, null=True)),
                ('mus_points', models.IntegerField(blank=True, null=True)),
                ('per_points', models.IntegerField(blank=True, null=True)),
                ('sng_points', models.IntegerField(blank=True, null=True)),
                ('tot_points', models.IntegerField(blank=True, null=True)),
                ('mus_score', models.FloatField(blank=True, null=True)),
                ('per_score', models.FloatField(blank=True, null=True)),
                ('sng_score', models.FloatField(blank=True, null=True)),
                ('tot_score', models.FloatField(blank=True, null=True)),
                ('mus_rank', models.IntegerField(blank=True, null=True)),
                ('per_rank', models.IntegerField(blank=True, null=True)),
                ('sng_rank', models.IntegerField(blank=True, null=True)),
                ('tot_rank', models.IntegerField(blank=True, null=True)),
            ],
            options={
                'verbose_name_plural': 'entries',
            },
        ),
        migrations.CreateModel(
            name='Flat',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('complete', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='flats', to='api.Complete')),
            ],
        ),
        migrations.CreateModel(
            name='Grid',
            fields=[
                ('created', model_utils.fields.AutoCreatedField(default=django.utils.timezone.now, editable=False, verbose_name='created')),
                ('modified', model_utils.fields.AutoLastModifiedField(default=django.utils.timezone.now, editable=False, verbose_name='modified')),
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('status', django_fsm.FSMIntegerField(choices=[(0, 'New')], default=0, help_text='DO NOT CHANGE MANUALLY unless correcting a mistake.  Use the buttons to change state.')),
                ('period', models.IntegerField(blank=True, choices=[(1, 'One'), (2, 'Two'), (3, 'Three')], null=True)),
                ('num', models.IntegerField(blank=True, null=True)),
                ('location', models.CharField(blank=True, max_length=255)),
                ('photo', models.DateTimeField(blank=True, null=True)),
                ('arrive', models.DateTimeField(blank=True, null=True)),
                ('depart', models.DateTimeField(blank=True, null=True)),
                ('backstage', models.DateTimeField(blank=True, null=True)),
                ('onstage', models.DateTimeField(blank=True, help_text='\n            The scheduled stage time in the Local time of the Venue.', null=True)),
                ('start', models.DateTimeField(blank=True, help_text='\n            The actual start time.', null=True)),
                ('renditions', django.contrib.postgres.fields.ArrayField(base_field=models.CharField(blank=True, max_length=100), blank=True, null=True, size=None)),
                ('appearance', models.OneToOneField(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='api.Appearance')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Group',
            fields=[
                ('created', model_utils.fields.AutoCreatedField(default=django.utils.timezone.now, editable=False, verbose_name='created')),
                ('modified', model_utils.fields.AutoLastModifiedField(default=django.utils.timezone.now, editable=False, verbose_name='modified')),
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('name', models.CharField(default='UNKNOWN', help_text='\n            The name of the resource.\n        ', max_length=255)),
                ('status', django_fsm.FSMIntegerField(choices=[(-10, 'Inactive'), (-5, 'AIC'), (0, 'New'), (10, 'Active')], default=0, help_text='DO NOT CHANGE MANUALLY unless correcting a mistake.  Use the buttons to change state.')),
                ('kind', models.IntegerField(choices=[('International', [(1, 'International')]), ('District', [(11, 'District'), (12, 'Noncompetitive'), (13, 'Affiliate')]), ('Chapter', [(30, 'Chapter')]), ('Group', [(32, 'Chorus'), (41, 'Quartet'), (46, 'VLQ')])], help_text='\n            The kind of group.\n        ')),
                ('gender', models.IntegerField(choices=[(10, 'Male'), (20, 'Female'), (30, 'Mixed')], default=10, help_text='\n            The gender of group.\n        ')),
                ('code', models.CharField(blank=True, help_text='\n            Short-form code.', max_length=255)),
                ('start_date', models.DateField(blank=True, null=True)),
                ('end_date', models.DateField(blank=True, null=True)),
                ('location', models.CharField(blank=True, help_text='\n            The geographical location of the resource.', max_length=255)),
                ('website', models.URLField(blank=True, help_text='\n            The website URL of the resource.')),
                ('facebook', models.URLField(blank=True, help_text='\n            The facebook URL of the resource.')),
                ('twitter', models.CharField(blank=True, help_text='\n            The twitter handle (in form @twitter_handle) of the resource.', max_length=16, validators=[django.core.validators.RegexValidator(message='\n                    Must be a single Twitter handle\n                    in the form `@twitter_handle`.\n                ', regex='@([A-Za-z0-9_]+)')])),
                ('email', api.fields.LowerEmailField(blank=True, help_text='\n            The contact email of the resource.', max_length=254, null=True)),
                ('phone', models.CharField(blank=True, help_text='\n            The phone number of the resource.  Include country code.', max_length=25)),
                ('image', models.ImageField(blank=True, null=True, upload_to=api.fields.UploadPath())),
                ('description', models.TextField(blank=True, help_text='\n            A description of the group.  Max 1000 characters.', max_length=1000)),
                ('bhs_id', models.IntegerField(blank=True, null=True, unique=True)),
                ('notes', models.TextField(blank=True, help_text='\n            Notes (for internal use only).')),
                ('mem_status', models.IntegerField(blank=True, choices=[(10, 'Active'), (20, 'Active Internal'), (30, 'Active Licensed'), (40, 'Cancelled'), (50, 'Closed'), (60, 'Closed Merged'), (70, 'Closed Revoked'), (80, 'Closed Voluntary'), (90, 'Expelled'), (100, 'Expired'), (105, 'Expired Licensed'), (110, 'Lapsed'), (120, 'Not Approved'), (130, 'Pending'), (140, 'Pending Voluntary'), (150, 'Suspended'), (160, 'Suspended Membership'), (170, 'Awaiting Payment')], null=True)),
                ('mc_pk', models.CharField(blank=True, db_index=True, max_length=36, null=True, unique=True)),
                ('tree_sort', models.IntegerField(blank=True, editable=False, null=True, unique=True)),
                ('international', models.TextField(blank=True, help_text='\n            The denormalized international group.', max_length=255)),
                ('district', models.TextField(blank=True, help_text='\n            The denormalized district group.', max_length=255)),
                ('chapter', models.TextField(blank=True, help_text='\n            The denormalized chapter group.', max_length=255)),
                ('is_senior', models.BooleanField(default=False, help_text='Qualifies as a Senior Group.  This can be set manually, but is denormlized nightly for quartets.')),
                ('is_youth', models.BooleanField(default=False, help_text='Qualifies as a Youth Group.  Must be set manually.')),
                ('division', models.IntegerField(blank=True, choices=[(10, 'EVG Division I'), (20, 'EVG Division II'), (30, 'EVG Division III'), (40, 'EVG Division IV'), (50, 'EVG Division V'), (60, 'FWD Arizona'), (70, 'FWD Northeast'), (80, 'FWD Northwest'), (90, 'FWD Southeast'), (100, 'FWD Southwest'), (110, 'LOL 10000 Lakes'), (120, 'LOL Division One'), (130, 'LOL Northern Plains'), (140, 'LOL Packerland'), (150, 'LOL Southwest'), (160, 'MAD Atlantic'), (170, 'MAD Central'), (180, 'MAD Northern'), (190, 'MAD Southern'), (200, 'MAD Western'), (210, 'NED Granite and Pine'), (220, 'NED Mountain'), (230, 'NED Patriot'), (240, 'NED Sunrise'), (250, 'NED Yankee'), (260, 'SWD Northeast'), (270, 'SWD Northwest'), (280, 'SWD Southeast'), (290, 'SWD Southwest')], null=True)),
                ('parent', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='children', to='api.Group')),
            ],
            options={
                'verbose_name_plural': 'groups',
                'ordering': ['tree_sort'],
            },
        ),
        migrations.CreateModel(
            name='Member',
            fields=[
                ('created', model_utils.fields.AutoCreatedField(default=django.utils.timezone.now, editable=False, verbose_name='created')),
                ('modified', model_utils.fields.AutoLastModifiedField(default=django.utils.timezone.now, editable=False, verbose_name='modified')),
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('status', django_fsm.FSMIntegerField(choices=[(-10, 'Inactive'), (0, 'New'), (10, 'Active')], default=0, help_text='DO NOT CHANGE MANUALLY unless correcting a mistake.  Use the buttons to change state.')),
                ('part', models.IntegerField(blank=True, choices=[(1, 'Tenor'), (2, 'Lead'), (3, 'Baritone'), (4, 'Bass')], null=True)),
                ('start_date', models.DateField(blank=True, null=True)),
                ('end_date', models.DateField(blank=True, null=True)),
                ('mc_pk', models.CharField(blank=True, db_index=True, max_length=36, null=True)),
                ('group', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='members', to='api.Group')),
            ],
        ),
        migrations.CreateModel(
            name='Office',
            fields=[
                ('created', model_utils.fields.AutoCreatedField(default=django.utils.timezone.now, editable=False, verbose_name='created')),
                ('modified', model_utils.fields.AutoLastModifiedField(default=django.utils.timezone.now, editable=False, verbose_name='modified')),
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=255)),
                ('status', django_fsm.FSMIntegerField(choices=[(-10, 'Inactive'), (0, 'New'), (10, 'Active')], default=0, help_text='DO NOT CHANGE MANUALLY unless correcting a mistake.  Use the buttons to change state.')),
                ('kind', models.IntegerField(blank=True, choices=[('International', [(1, 'International')]), ('District', [(11, 'District'), (12, 'Noncompetitive'), (13, 'Affiliate')]), ('Group', [(32, 'Chapter'), (41, 'Quartet')])], help_text='\n            The kind of office.', null=True)),
                ('code', models.IntegerField(blank=True, choices=[('International', [(100, 'SCJC Chair'), (110, 'SCJC Chair Past'), (120, 'SCJC CA'), (130, 'SCJC MUS'), (140, 'SCJC PER'), (150, 'SCJC SNG'), (160, 'SCJC Chart'), (170, 'SCJC Admin')]), ('District', [(210, 'DRCJ'), (220, 'DRCJ Assistant'), (230, 'JUDGE CA'), (240, 'JUDGE MUS'), (250, 'JUDGE PER'), (260, 'JUDGE SNG'), (270, 'CANDIDATE CA'), (280, 'CANDIDATE MUS'), (290, 'CANDIDATE PER'), (295, 'CANDIDATE SNG')]), ('Group', [(310, 'CPRES'), (320, 'CSEC'), (320, 'CDIR'), (340, 'CASS'), (350, 'CMAN'), (410, 'QADM')])], help_text='\n            The short-form office code.', null=True)),
                ('mc_pk', models.CharField(blank=True, db_index=True, max_length=36, null=True, unique=True)),
                ('is_convention_manager', models.BooleanField(default=False)),
                ('is_session_manager', models.BooleanField(default=False)),
                ('is_round_manager', models.BooleanField(default=False)),
                ('is_scoring_manager', models.BooleanField(default=False)),
                ('is_group_manager', models.BooleanField(default=False)),
                ('is_person_manager', models.BooleanField(default=False)),
                ('is_award_manager', models.BooleanField(default=False)),
                ('is_officer_manager', models.BooleanField(default=False)),
                ('is_chart_manager', models.BooleanField(default=False)),
                ('is_assignment_manager', models.BooleanField(default=False)),
            ],
            options={
                'ordering': ['code'],
            },
        ),
        migrations.CreateModel(
            name='Officer',
            fields=[
                ('created', model_utils.fields.AutoCreatedField(default=django.utils.timezone.now, editable=False, verbose_name='created')),
                ('modified', model_utils.fields.AutoLastModifiedField(default=django.utils.timezone.now, editable=False, verbose_name='modified')),
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('status', django_fsm.FSMIntegerField(choices=[(-10, 'Inactive'), (0, 'New'), (10, 'Active')], default=0, help_text='DO NOT CHANGE MANUALLY unless correcting a mistake.  Use the buttons to change state.')),
                ('start_date', models.DateField(blank=True, null=True)),
                ('end_date', models.DateField(blank=True, null=True)),
                ('mc_pk', models.CharField(blank=True, db_index=True, max_length=36, null=True)),
                ('group', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='officers', to='api.Group')),
                ('office', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='officers', to='api.Office')),
            ],
        ),
        migrations.CreateModel(
            name='Outcome',
            fields=[
                ('created', model_utils.fields.AutoCreatedField(default=django.utils.timezone.now, editable=False, verbose_name='created')),
                ('modified', model_utils.fields.AutoLastModifiedField(default=django.utils.timezone.now, editable=False, verbose_name='modified')),
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('status', models.IntegerField(choices=[(-10, 'Inactive'), (0, 'New'), (10, 'Active')], default=0)),
                ('num', models.IntegerField(blank=True, null=True)),
                ('name', models.CharField(blank=True, max_length=1024, null=True)),
                ('legacy_name', models.CharField(blank=True, max_length=1024, null=True)),
                ('contest', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='outcomes', to='api.Contest')),
            ],
        ),
        migrations.CreateModel(
            name='Panelist',
            fields=[
                ('created', model_utils.fields.AutoCreatedField(default=django.utils.timezone.now, editable=False, verbose_name='created')),
                ('modified', model_utils.fields.AutoLastModifiedField(default=django.utils.timezone.now, editable=False, verbose_name='modified')),
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('status', models.IntegerField(choices=[(-10, 'Inactive'), (0, 'New'), (10, 'Active')], default=0)),
                ('num', models.IntegerField(blank=True, null=True)),
                ('kind', models.IntegerField(choices=[(10, 'Official'), (20, 'Practice'), (30, 'Observer')])),
                ('category', models.IntegerField(blank=True, choices=[(5, 'DRCJ'), (10, 'CA'), (30, 'Music'), (40, 'Performance'), (50, 'Singing')], null=True)),
                ('legacy_name', models.CharField(blank=True, max_length=255, null=True)),
            ],
        ),
        migrations.CreateModel(
            name='Person',
            fields=[
                ('created', model_utils.fields.AutoCreatedField(default=django.utils.timezone.now, editable=False, verbose_name='created')),
                ('modified', model_utils.fields.AutoLastModifiedField(default=django.utils.timezone.now, editable=False, verbose_name='modified')),
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('first_name', models.CharField(default='Unknown', help_text='\n            The first name of the person.', max_length=255)),
                ('middle_name', models.CharField(blank=True, help_text='\n            The middle name of the person.', max_length=255)),
                ('last_name', models.CharField(default='Unknown', help_text='\n            The last name of the person.', max_length=255)),
                ('nick_name', models.CharField(blank=True, help_text='\n            The nickname of the person.', max_length=255)),
                ('status', django_fsm.FSMIntegerField(choices=[(-10, 'Inactive'), (0, 'New'), (10, 'Active')], default=10, help_text='DO NOT CHANGE MANUALLY unless correcting a mistake.  Use the buttons to change state.')),
                ('birth_date', models.DateField(blank=True, null=True)),
                ('spouse', models.CharField(blank=True, default='', max_length=255)),
                ('location', models.CharField(blank=True, default='', help_text='\n            The geographical location of the resource.', max_length=255)),
                ('part', models.IntegerField(blank=True, choices=[(1, 'Tenor'), (2, 'Lead'), (3, 'Baritone'), (4, 'Bass')], null=True)),
                ('gender', models.IntegerField(blank=True, choices=[(10, 'Male'), (20, 'Female')], null=True)),
                ('is_deceased', models.BooleanField(default=False)),
                ('website', models.URLField(blank=True, default='', help_text='\n            The website URL of the resource.')),
                ('facebook', models.URLField(blank=True, default='', help_text='\n            The facebook URL of the resource.')),
                ('twitter', models.CharField(blank=True, default='', help_text='\n            The twitter handle (in form @twitter_handle) of the resource.', max_length=16, validators=[django.core.validators.RegexValidator(message='\n                    Must be a single Twitter handle\n                    in the form `@twitter_handle`.\n                ', regex='@([A-Za-z0-9_]+)')])),
                ('email', api.fields.LowerEmailField(blank=True, help_text='\n            The contact email of the resource.', max_length=254, null=True, unique=True)),
                ('phone', models.CharField(blank=True, default='', help_text='\n            The phone number of the resource.  Include country code.', max_length=25)),
                ('address', models.TextField(blank=True, default='', help_text='\n            The complete address of the resource.', max_length=1000)),
                ('home_phone', models.CharField(blank=True, default='', help_text='\n            The home phone number of the resource.  Include country code.', max_length=25)),
                ('work_phone', models.CharField(blank=True, default='', help_text='\n            The work phone number of the resource.  Include country code.', max_length=25)),
                ('cell_phone', models.CharField(blank=True, default='', help_text='\n            The cell phone number of the resource.  Include country code.', max_length=25)),
                ('airports', django.contrib.postgres.fields.ArrayField(base_field=models.CharField(blank=True, max_length=3), blank=True, null=True, size=None)),
                ('image', models.ImageField(blank=True, null=True, upload_to=api.fields.UploadPath())),
                ('description', models.TextField(blank=True, default='', help_text='\n            A bio of the person.  Max 1000 characters.', max_length=1000)),
                ('notes', models.TextField(blank=True, default='', help_text='\n            Notes (for internal use only).')),
                ('bhs_id', models.IntegerField(blank=True, null=True, unique=True)),
                ('mc_pk', models.CharField(blank=True, db_index=True, max_length=36, null=True, unique=True)),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Repertory',
            fields=[
                ('created', model_utils.fields.AutoCreatedField(default=django.utils.timezone.now, editable=False, verbose_name='created')),
                ('modified', model_utils.fields.AutoLastModifiedField(default=django.utils.timezone.now, editable=False, verbose_name='modified')),
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('status', django_fsm.FSMIntegerField(choices=[(-10, 'Inactive'), (0, 'New'), (10, 'Active')], default=10, help_text='DO NOT CHANGE MANUALLY unless correcting a mistake.  Use the buttons to change state.')),
                ('chart', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='repertories', to='api.Chart')),
                ('group', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='repertories', to='api.Group')),
            ],
            options={
                'verbose_name_plural': 'repertories',
            },
        ),
        migrations.CreateModel(
            name='Round',
            fields=[
                ('created', model_utils.fields.AutoCreatedField(default=django.utils.timezone.now, editable=False, verbose_name='created')),
                ('modified', model_utils.fields.AutoLastModifiedField(default=django.utils.timezone.now, editable=False, verbose_name='modified')),
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('status', django_fsm.FSMIntegerField(choices=[(0, 'New'), (10, 'Built'), (20, 'Started'), (27, 'Verified'), (30, 'Finished')], default=0, help_text='DO NOT CHANGE MANUALLY unless correcting a mistake.  Use the buttons to change state.')),
                ('kind', models.IntegerField(choices=[(1, 'Finals'), (2, 'Semi-Finals'), (3, 'Quarter-Finals')])),
                ('num', models.IntegerField(default=0)),
                ('spots', models.IntegerField(blank=True, null=True)),
                ('date', models.DateField(blank=True, null=True)),
                ('footnotes', models.TextField(blank=True, help_text='\n            Freeform text field; will print on OSS.')),
                ('oss', models.FileField(blank=True, max_length=200, null=True, upload_to='')),
                ('sa', models.FileField(blank=True, null=True, upload_to='')),
                ('legacy_oss', models.FileField(blank=True, null=True, upload_to='')),
                ('legacy_sa', models.FileField(blank=True, null=True, upload_to='')),
            ],
            options={
                'get_latest_by': ['num'],
            },
        ),
        migrations.CreateModel(
            name='Score',
            fields=[
                ('created', model_utils.fields.AutoCreatedField(default=django.utils.timezone.now, editable=False, verbose_name='created')),
                ('modified', model_utils.fields.AutoLastModifiedField(default=django.utils.timezone.now, editable=False, verbose_name='modified')),
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('status', django_fsm.FSMIntegerField(choices=[(0, 'New'), (10, 'Verified'), (25, 'Cleared'), (30, 'Flagged'), (35, 'Revised'), (40, 'Confirmed')], default=0, help_text='DO NOT CHANGE MANUALLY unless correcting a mistake.  Use the buttons to change state.')),
                ('category', models.IntegerField(choices=[(30, 'Music'), (40, 'Performance'), (50, 'Singing')])),
                ('kind', models.IntegerField(choices=[(10, 'Official'), (20, 'Practice'), (30, 'Composite')])),
                ('num', models.IntegerField()),
                ('points', models.IntegerField(blank=True, help_text='\n            The number of points (0-100)', null=True, validators=[django.core.validators.MaxValueValidator(100, message='Points must be between 0 - 100'), django.core.validators.MinValueValidator(0, message='Points must be between 0 - 100')])),
                ('legacy_panelist', models.CharField(blank=True, max_length=255, null=True)),
                ('panelist', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='scores', to='api.Panelist')),
            ],
        ),
        migrations.CreateModel(
            name='Selection',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('mark', models.BooleanField(default=False)),
                ('row', models.IntegerField(blank=True, null=True)),
                ('season_raw', models.CharField(blank=True, max_length=255)),
                ('year', models.IntegerField(blank=True, null=True)),
                ('district_raw', models.CharField(blank=True, max_length=255)),
                ('event_raw', models.CharField(blank=True, max_length=255)),
                ('session_raw', models.CharField(blank=True, max_length=255)),
                ('season_kind', models.IntegerField(blank=True, choices=[(1, 'Summer'), (2, 'Midwinter'), (3, 'Fall'), (4, 'Spring')], null=True)),
                ('district_code', models.CharField(blank=True, max_length=255)),
                ('convention_name', models.CharField(blank=True, max_length=255)),
                ('session_kind', models.IntegerField(blank=True, choices=[(32, 'Chorus'), (41, 'Quartet'), (42, 'Mixed'), (43, 'Senior'), (44, 'Youth'), (45, 'Unknown'), (46, 'VLQ')], null=True)),
                ('round_kind', models.IntegerField(blank=True, choices=[(1, 'Finals'), (2, 'Semi-Finals'), (3, 'Quarter-Finals')], null=True)),
                ('group_name', models.CharField(blank=True, max_length=255)),
                ('appearance_num', models.IntegerField(blank=True, null=True)),
                ('song_num', models.IntegerField(blank=True, null=True)),
                ('song_title', models.CharField(blank=True, max_length=255)),
                ('totals', models.IntegerField(blank=True, null=True)),
                ('points', django.contrib.postgres.fields.ArrayField(base_field=models.IntegerField(blank=True, null=True), blank=True, null=True, size=None)),
                ('num_sessions', models.IntegerField(blank=True, null=True)),
                ('num_rounds', models.IntegerField(blank=True, null=True)),
                ('num_appearances', models.IntegerField(blank=True, null=True)),
                ('num_panelists', models.IntegerField(blank=True, null=True)),
                ('appearance', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='selections', to='api.Appearance')),
                ('convention', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='selections', to='api.Convention')),
                ('group', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='selections', to='api.Group')),
                ('round', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='selections', to='api.Round')),
            ],
        ),
        migrations.CreateModel(
            name='Session',
            fields=[
                ('created', model_utils.fields.AutoCreatedField(default=django.utils.timezone.now, editable=False, verbose_name='created')),
                ('modified', model_utils.fields.AutoLastModifiedField(default=django.utils.timezone.now, editable=False, verbose_name='modified')),
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('status', django_fsm.FSMIntegerField(choices=[(0, 'New'), (2, 'Built'), (4, 'Opened'), (8, 'Closed'), (10, 'Verified'), (20, 'Started'), (30, 'Finished')], default=0, help_text='DO NOT CHANGE MANUALLY unless correcting a mistake.  Use the buttons to change state.')),
                ('kind', models.IntegerField(choices=[(32, 'Chorus'), (41, 'Quartet'), (42, 'Mixed'), (43, 'Senior'), (44, 'Youth'), (45, 'Unknown'), (46, 'VLQ')], help_text='\n            The kind of session.  Generally this will be either quartet or chorus.\n        ')),
                ('num_rounds', models.IntegerField(default=0)),
                ('is_invitational', models.BooleanField(default=False, help_text='Invite-only (v. Open).')),
                ('description', models.TextField(blank=True, help_text='\n            The Public Description.  Will be sent in all email communications.', max_length=1000)),
                ('notes', models.TextField(blank=True, help_text='\n            Private Notes (for internal use only).  Will not be sent.')),
                ('footnotes', models.TextField(blank=True, help_text='\n            Freeform text field; will print on OSS.')),
                ('oss', models.FileField(blank=True, null=True, upload_to='')),
                ('sa', models.FileField(blank=True, null=True, upload_to='')),
                ('convention', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='sessions', to='api.Convention')),
            ],
        ),
        migrations.CreateModel(
            name='Song',
            fields=[
                ('created', model_utils.fields.AutoCreatedField(default=django.utils.timezone.now, editable=False, verbose_name='created')),
                ('modified', model_utils.fields.AutoLastModifiedField(default=django.utils.timezone.now, editable=False, verbose_name='modified')),
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('status', django_fsm.FSMIntegerField(choices=[(0, 'New'), (10, 'Verified'), (38, 'Finished'), (40, 'Confirmed'), (50, 'Final'), (90, 'Announced'), (95, 'Archived')], default=0, help_text='DO NOT CHANGE MANUALLY unless correcting a mistake.  Use the buttons to change state.')),
                ('num', models.IntegerField()),
                ('legacy_chart', models.CharField(blank=True, default='', max_length=255)),
                ('asterisks', django.contrib.postgres.fields.ArrayField(base_field=models.IntegerField(), blank=True, default=list, size=None)),
                ('dixons', django.contrib.postgres.fields.ArrayField(base_field=models.IntegerField(), blank=True, default=list, size=None)),
                ('penalties', django.contrib.postgres.fields.ArrayField(base_field=models.IntegerField(choices=[(10, 'Primarily Patriotic/Religious Intent'), (30, 'Instrumental Accompaniment'), (40, 'Chorus Exceeding 4-Part Texture'), (50, 'Sound Equipment or Electronic Enhancement')]), blank=True, default=list, size=None)),
                ('stats', django.contrib.postgres.fields.jsonb.JSONField(blank=True, null=True)),
                ('rank', models.IntegerField(blank=True, null=True)),
                ('mus_points', models.IntegerField(blank=True, null=True)),
                ('per_points', models.IntegerField(blank=True, null=True)),
                ('sng_points', models.IntegerField(blank=True, null=True)),
                ('tot_points', models.IntegerField(blank=True, null=True)),
                ('mus_score', models.FloatField(blank=True, null=True)),
                ('per_score', models.FloatField(blank=True, null=True)),
                ('sng_score', models.FloatField(blank=True, null=True)),
                ('tot_score', models.FloatField(blank=True, null=True)),
                ('mus_rank', models.IntegerField(blank=True, null=True)),
                ('per_rank', models.IntegerField(blank=True, null=True)),
                ('sng_rank', models.IntegerField(blank=True, null=True)),
                ('tot_rank', models.IntegerField(blank=True, null=True)),
                ('appearance', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='songs', to='api.Appearance')),
                ('chart', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='songs', to='api.Chart')),
            ],
            options={
                'get_latest_by': ['num'],
            },
        ),
        migrations.CreateModel(
            name='Venue',
            fields=[
                ('created', model_utils.fields.AutoCreatedField(default=django.utils.timezone.now, editable=False, verbose_name='created')),
                ('modified', model_utils.fields.AutoLastModifiedField(default=django.utils.timezone.now, editable=False, verbose_name='modified')),
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('name', models.CharField(default='(TBD)', help_text='\n            The name of the resource.', max_length=255)),
                ('status', django_fsm.FSMIntegerField(choices=[(-10, 'Inactive'), (0, 'New'), (10, 'Active')], default=0, help_text='DO NOT CHANGE MANUALLY unless correcting a mistake.  Use the buttons to change state.')),
                ('city', models.CharField(blank=True, max_length=255)),
                ('state', models.CharField(blank=True, max_length=255)),
                ('airport', models.CharField(blank=True, max_length=30)),
                ('timezone', timezone_field.fields.TimeZoneField(blank=True, help_text='\n            The local timezone of the venue.')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.AddField(
            model_name='selection',
            name='session',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='selections', to='api.Session'),
        ),
        migrations.AddField(
            model_name='selection',
            name='song',
            field=models.OneToOneField(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='api.Song'),
        ),
        migrations.AddField(
            model_name='score',
            name='song',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='scores', to='api.Song'),
        ),
        migrations.AddField(
            model_name='round',
            name='session',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='rounds', to='api.Session'),
        ),
        migrations.AddField(
            model_name='panelist',
            name='person',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='panelists', to='api.Person'),
        ),
        migrations.AddField(
            model_name='panelist',
            name='round',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='panelists', to='api.Round'),
        ),
        migrations.AddField(
            model_name='outcome',
            name='round',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='outcomes', to='api.Round'),
        ),
        migrations.AddField(
            model_name='officer',
            name='person',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='officers', to='api.Person'),
        ),
        migrations.AddField(
            model_name='member',
            name='person',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='members', to='api.Person'),
        ),
        migrations.AddField(
            model_name='grid',
            name='round',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='grids', to='api.Round'),
        ),
        migrations.AddField(
            model_name='grid',
            name='venue',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='grids', to='api.Venue'),
        ),
        migrations.AddField(
            model_name='flat',
            name='score',
            field=models.OneToOneField(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='api.Score'),
        ),
        migrations.AddField(
            model_name='flat',
            name='selection',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='flats', to='api.Selection'),
        ),
        migrations.AddField(
            model_name='entry',
            name='group',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='entries', to='api.Group'),
        ),
        migrations.AddField(
            model_name='entry',
            name='session',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='entries', to='api.Session'),
        ),
        migrations.AddField(
            model_name='convention',
            name='group',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='conventions', to='api.Group'),
        ),
        migrations.AddField(
            model_name='convention',
            name='venue',
            field=models.ForeignKey(blank=True, help_text='\n            The venue for the convention.', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='conventions', to='api.Venue'),
        ),
        migrations.AddField(
            model_name='contestant',
            name='entry',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='contestants', to='api.Entry'),
        ),
        migrations.AddField(
            model_name='contest',
            name='group',
            field=models.ForeignKey(blank=True, help_text='The Winner of the Contest.', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='contests', to='api.Group'),
        ),
        migrations.AddField(
            model_name='contest',
            name='session',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='contests', to='api.Session'),
        ),
        migrations.AddField(
            model_name='contender',
            name='outcome',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='contenders', to='api.Outcome'),
        ),
        migrations.AddField(
            model_name='complete',
            name='convention',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='completes', to='api.Convention'),
        ),
        migrations.AddField(
            model_name='complete',
            name='panelist',
            field=models.OneToOneField(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='completes', to='api.Panelist'),
        ),
        migrations.AddField(
            model_name='complete',
            name='person',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='completes', to='api.Person'),
        ),
        migrations.AddField(
            model_name='complete',
            name='round',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='completes', to='api.Round'),
        ),
        migrations.AddField(
            model_name='complete',
            name='session',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='completes', to='api.Session'),
        ),
        migrations.AddField(
            model_name='competitor',
            name='entry',
            field=models.OneToOneField(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='api.Entry'),
        ),
        migrations.AddField(
            model_name='competitor',
            name='group',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='competitors', to='api.Group'),
        ),
        migrations.AddField(
            model_name='competitor',
            name='session',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='competitors', to='api.Session'),
        ),
        migrations.AlterUniqueTogether(
            name='chart',
            unique_together={('title', 'arrangers')},
        ),
        migrations.AddField(
            model_name='award',
            name='group',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='awards', to='api.Group'),
        ),
        migrations.AddField(
            model_name='award',
            name='parent',
            field=models.ForeignKey(blank=True, help_text='If a qualifier, this is the award qualifying for.', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='children', to='api.Award'),
        ),
        migrations.AddField(
            model_name='assignment',
            name='convention',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='assignments', to='api.Convention'),
        ),
        migrations.AddField(
            model_name='assignment',
            name='person',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='assignments', to='api.Person'),
        ),
        migrations.AddField(
            model_name='appearance',
            name='competitor',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='appearances', to='api.Competitor'),
        ),
        migrations.AddField(
            model_name='appearance',
            name='round',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='appearances', to='api.Round'),
        ),
        migrations.AddField(
            model_name='user',
            name='person',
            field=models.OneToOneField(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='user', to='api.Person'),
        ),
        migrations.AlterUniqueTogether(
            name='song',
            unique_together={('appearance', 'num')},
        ),
        migrations.AlterUniqueTogether(
            name='session',
            unique_together={('convention', 'kind')},
        ),
        migrations.AlterUniqueTogether(
            name='selection',
            unique_together={('convention', 'session', 'round', 'appearance', 'song')},
        ),
        migrations.AlterUniqueTogether(
            name='score',
            unique_together={('song', 'num')},
        ),
        migrations.AlterUniqueTogether(
            name='round',
            unique_together={('session', 'kind')},
        ),
        migrations.AlterUniqueTogether(
            name='repertory',
            unique_together={('group', 'chart')},
        ),
        migrations.AlterUniqueTogether(
            name='panelist',
            unique_together={('round', 'num'), ('round', 'legacy_name')},
        ),
        migrations.AlterUniqueTogether(
            name='outcome',
            unique_together={('round', 'contest')},
        ),
        migrations.AlterUniqueTogether(
            name='member',
            unique_together={('group', 'person')},
        ),
        migrations.AlterUniqueTogether(
            name='group',
            unique_together={('bhs_id', 'kind')},
        ),
        migrations.AlterUniqueTogether(
            name='flat',
            unique_together={('complete', 'selection', 'score')},
        ),
        migrations.AlterUniqueTogether(
            name='entry',
            unique_together={('group', 'session')},
        ),
        migrations.AlterUniqueTogether(
            name='convention',
            unique_together={('year', 'season', 'name', 'group')},
        ),
        migrations.AlterUniqueTogether(
            name='contestant',
            unique_together={('entry', 'contest')},
        ),
        migrations.AlterUniqueTogether(
            name='contest',
            unique_together={('session', 'award')},
        ),
        migrations.AlterUniqueTogether(
            name='contender',
            unique_together={('appearance', 'outcome')},
        ),
        migrations.AlterUniqueTogether(
            name='complete',
            unique_together={('convention', 'session', 'round', 'panelist', 'person')},
        ),
        migrations.AlterUniqueTogether(
            name='competitor',
            unique_together={('group', 'session')},
        ),
        migrations.AlterUniqueTogether(
            name='appearance',
            unique_together={('round', 'num')},
        ),
    ]
