# Generated by Django 2.1.8 on 2019-06-07 19:05

import api.fields
import cloudinary_storage.storage
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone
import django_fsm
import model_utils.fields
import uuid


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('cmanager', '0015_award_is_novice'),
        ('bhs', '0002_auto_20190515_0709'),
    ]

    operations = [
        migrations.CreateModel(
            name='Contest',
            fields=[
                ('created', model_utils.fields.AutoCreatedField(default=django.utils.timezone.now, editable=False, verbose_name='created')),
                ('modified', model_utils.fields.AutoLastModifiedField(default=django.utils.timezone.now, editable=False, verbose_name='modified')),
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('status', django_fsm.FSMIntegerField(choices=[(-10, 'Excluded'), (0, 'New'), (10, 'Included')], default=0, help_text='DO NOT CHANGE MANUALLY unless correcting a mistake.  Use the buttons to change state.')),
                ('is_primary', models.BooleanField(default=False)),
                ('result', models.CharField(blank=True, default='', max_length=255)),
                ('award', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='contests_smanager', to='cmanager.Award')),
                ('group', models.ForeignKey(blank=True, help_text='The Winner of the Contest.', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='contests_smanager', to='bhs.Group')),
            ],
        ),
        migrations.CreateModel(
            name='Contestant',
            fields=[
                ('created', model_utils.fields.AutoCreatedField(default=django.utils.timezone.now, editable=False, verbose_name='created')),
                ('modified', model_utils.fields.AutoLastModifiedField(default=django.utils.timezone.now, editable=False, verbose_name='modified')),
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('status', django_fsm.FSMIntegerField(choices=[(-10, 'Excluded'), (0, 'New'), (10, 'Included')], default=0, help_text='DO NOT CHANGE MANUALLY unless correcting a mistake.  Use the buttons to change state.')),
                ('contest', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='contestants_smanager', to='smanager.Contest')),
            ],
            options={
                'ordering': ('contest__award__tree_sort',),
            },
        ),
        migrations.CreateModel(
            name='Entry',
            fields=[
                ('created', model_utils.fields.AutoCreatedField(default=django.utils.timezone.now, editable=False, verbose_name='created')),
                ('modified', model_utils.fields.AutoLastModifiedField(default=django.utils.timezone.now, editable=False, verbose_name='modified')),
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('status', django_fsm.FSMIntegerField(choices=[(0, 'New'), (2, 'Built'), (5, 'Invited'), (7, 'Withdrawn'), (10, 'Submitted'), (20, 'Approved')], default=0, help_text='DO NOT CHANGE MANUALLY unless correcting a mistake.  Use the buttons to change state.')),
                ('is_evaluation', models.BooleanField(default=True, help_text='\n            Entry requests evaluation.')),
                ('is_private', models.BooleanField(default=False, help_text='\n            Keep scores private.')),
                ('is_mt', models.BooleanField(default=False, help_text='\n            Keep scores private.')),
                ('draw', models.IntegerField(blank=True, help_text='\n            The draw for the initial round only.', null=True)),
                ('seed', models.IntegerField(blank=True, help_text='\n            The incoming rank based on prelim score.', null=True)),
                ('prelim', models.FloatField(blank=True, help_text='\n            The incoming prelim score.', null=True)),
                ('base', models.FloatField(blank=True, help_text='\n            The incoming base score used to determine most-improved winners.', null=True)),
                ('participants', models.CharField(blank=True, default='', max_length=255)),
                ('pos', models.IntegerField(blank=True, help_text='Estimated Participants-on-Stage', null=True)),
                ('representing', models.CharField(blank=True, default='', max_length=255)),
                ('description', models.TextField(blank=True, help_text='\n            Public Notes (usually from group).', max_length=1000)),
                ('notes', models.TextField(blank=True, help_text='\n            Private Notes (for internal use only).')),
                ('group', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='entries_smanager', to='bhs.Group')),
            ],
            options={
                'verbose_name_plural': 'entries',
            },
        ),
        migrations.CreateModel(
            name='Session',
            fields=[
                ('created', model_utils.fields.AutoCreatedField(default=django.utils.timezone.now, editable=False, verbose_name='created')),
                ('modified', model_utils.fields.AutoLastModifiedField(default=django.utils.timezone.now, editable=False, verbose_name='modified')),
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('status', django_fsm.FSMIntegerField(choices=[(0, 'New'), (2, 'Built'), (4, 'Opened'), (8, 'Closed'), (10, 'Verified'), (20, 'Packaged'), (30, 'Finished')], default=0, help_text='DO NOT CHANGE MANUALLY unless correcting a mistake.  Use the buttons to change state.')),
                ('kind', models.IntegerField(choices=[(32, 'Chorus'), (41, 'Quartet'), (42, 'Mixed'), (43, 'Senior'), (44, 'Youth'), (45, 'Unknown'), (46, 'VLQ')], help_text='\n            The kind of session.  Generally this will be either quartet or chorus.\n        ')),
                ('num_rounds', models.IntegerField(default=0)),
                ('is_invitational', models.BooleanField(default=False, help_text='Invite-only (v. Open).')),
                ('description', models.TextField(blank=True, help_text='\n            The Public Description.  Will be sent in all email communications.', max_length=1000)),
                ('notes', models.TextField(blank=True, help_text='\n            Private Notes (for internal use only).  Will not be sent.')),
                ('footnotes', models.TextField(blank=True, help_text='\n            Freeform text field; will print on OSS.')),
                ('legacy_report', models.FileField(blank=True, default='', storage=cloudinary_storage.storage.RawMediaCloudinaryStorage(), upload_to=api.fields.FileUploadPath())),
                ('drcj_report', models.FileField(blank=True, default='', storage=cloudinary_storage.storage.RawMediaCloudinaryStorage(), upload_to=api.fields.FileUploadPath())),
                ('convention', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='sessions_smanager', to='cmanager.Convention')),
                ('target', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='feeders_smanager', to='smanager.Session')),
            ],
        ),
        migrations.AddField(
            model_name='entry',
            name='session',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='entries_smanager', to='smanager.Session'),
        ),
        migrations.AddField(
            model_name='contestant',
            name='entry',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='contestants_smanager', to='smanager.Entry'),
        ),
        migrations.AddField(
            model_name='contest',
            name='session',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='contests_smanager', to='smanager.Session'),
        ),
        migrations.AlterUniqueTogether(
            name='session',
            unique_together={('convention', 'kind')},
        ),
        migrations.AlterUniqueTogether(
            name='entry',
            unique_together={('group', 'session')},
        ),
        migrations.AlterUniqueTogether(
            name='contestant',
            unique_together={('entry', 'contest')},
        ),
        migrations.AlterUniqueTogether(
            name='contest',
            unique_together={('session', 'award')},
        ),
    ]
