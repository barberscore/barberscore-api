# Generated by Django 2.2.3 on 2019-07-19 19:44

import apps.smanager.fields
import cloudinary_storage.storage
from django.conf import settings
import django.contrib.postgres.fields.ranges
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone
import django_fsm
import model_utils.fields
import timezone_field.fields
import uuid


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='Contest',
            fields=[
                ('created', model_utils.fields.AutoCreatedField(default=django.utils.timezone.now, editable=False, verbose_name='created')),
                ('modified', model_utils.fields.AutoLastModifiedField(default=django.utils.timezone.now, editable=False, verbose_name='modified')),
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('status', django_fsm.FSMIntegerField(choices=[(-10, 'Excluded'), (0, 'New'), (10, 'Included')], default=0, help_text='DO NOT CHANGE MANUALLY unless correcting a mistake.  Use the buttons to change state.')),
                ('award_id', models.UUIDField(blank=True, null=True)),
                ('award_name', models.CharField(blank=True, help_text='Award Name.', max_length=255, null=True)),
                ('award_kind', models.IntegerField(blank=True, choices=[(32, 'Chorus'), (41, 'Quartet')], null=True)),
                ('award_gender', models.IntegerField(blank=True, choices=[(10, 'Male'), (20, 'Female'), (30, 'Mixed')], help_text='\n            The gender to which the award is restricted.  If unselected, this award is open to all combinations.\n        ', null=True)),
                ('award_level', models.IntegerField(blank=True, choices=[(10, 'Championship'), (30, 'Qualifier'), (45, 'Representative'), (50, 'Deferred'), (60, 'Manual'), (70, 'Improved - Raw'), (80, 'Improved - Standard')], null=True)),
                ('award_season', models.IntegerField(blank=True, choices=[(1, 'Summer'), (2, 'Midwinter'), (3, 'Fall'), (4, 'Spring')], null=True)),
                ('award_description', models.TextField(blank=True, help_text='\n            The Public description of the award.', max_length=1000, null=True)),
                ('award_district', models.CharField(blank=True, max_length=255, null=True)),
                ('award_division', models.IntegerField(blank=True, choices=[(10, 'EVG Division I'), (20, 'EVG Division II'), (30, 'EVG Division III'), (40, 'EVG Division IV'), (50, 'EVG Division V'), (60, 'FWD Arizona'), (70, 'FWD Northeast'), (80, 'FWD Northwest'), (90, 'FWD Southeast'), (100, 'FWD Southwest'), (110, 'LOL 10000 Lakes'), (120, 'LOL Division One'), (130, 'LOL Northern Plains'), (140, 'LOL Packerland'), (150, 'LOL Southwest'), (170, 'MAD Central'), (180, 'MAD Northern'), (190, 'MAD Southern'), (210, 'NED Granite and Pine'), (220, 'NED Mountain'), (230, 'NED Patriot'), (240, 'NED Sunrise'), (250, 'NED Yankee'), (260, 'SWD Northeast'), (270, 'SWD Northwest'), (280, 'SWD Southeast'), (290, 'SWD Southwest')], null=True)),
                ('award_age', models.IntegerField(blank=True, choices=[(10, 'Seniors'), (20, 'Novice'), (30, 'Youth')], null=True)),
                ('award_is_novice', models.BooleanField(blank=True, default=False, null=True)),
                ('award_size', models.IntegerField(blank=True, choices=[(100, 'Plateau 1'), (110, 'Plateau 2'), (120, 'Plateau 3'), (130, 'Plateau 4'), (140, 'Plateau A'), (150, 'Plateau AA'), (160, 'Plateau AAA'), (170, 'Plateau AAAA'), (180, 'Plateau B'), (190, 'Plateau I'), (200, 'Plateau II'), (210, 'Plateau III'), (220, 'Plateau IV'), (230, 'Small')], null=True)),
                ('award_size_range', django.contrib.postgres.fields.ranges.IntegerRangeField(blank=True, null=True)),
                ('award_scope', models.IntegerField(blank=True, choices=[(100, 'Plateau 1'), (110, 'Plateau 2'), (120, 'Plateau 3'), (130, 'Plateau 4'), (140, 'Plateau A'), (150, 'Plateau AA'), (160, 'Plateau AAA'), (170, 'Plateau AAAA'), (175, 'Plateau AAAAA')], null=True)),
                ('award_scope_range', django.contrib.postgres.fields.ranges.DecimalRangeField(blank=True, null=True)),
                ('award_tree_sort', models.IntegerField(blank=True, editable=False, null=True)),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Convention',
            fields=[
                ('created', model_utils.fields.AutoCreatedField(default=django.utils.timezone.now, editable=False, verbose_name='created')),
                ('modified', model_utils.fields.AutoLastModifiedField(default=django.utils.timezone.now, editable=False, verbose_name='modified')),
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('status', django_fsm.FSMIntegerField(choices=[(-10, 'Inactive'), (0, 'New'), (5, 'Built'), (10, 'Active')], default=0, help_text='DO NOT CHANGE MANUALLY unless correcting a mistake.  Use the buttons to change state.')),
                ('name', models.CharField(default='Convention', max_length=255)),
                ('district', models.CharField(blank=True, max_length=255, null=True)),
                ('season', models.IntegerField(choices=[(3, 'Fall'), (4, 'Spring')])),
                ('panel', models.IntegerField(blank=True, choices=[(1, 'Single'), (2, 'Double'), (3, 'Triple'), (4, 'Quadruple'), (5, 'Quintiple')], null=True)),
                ('year', models.IntegerField(choices=[(2020, 2020), (2019, 2019), (2018, 2018), (2017, 2017), (2016, 2016), (2015, 2015), (2014, 2014), (2013, 2013), (2012, 2012), (2011, 2011), (2010, 2010), (2009, 2009), (2008, 2008), (2007, 2007), (2006, 2006), (2005, 2005), (2004, 2004), (2003, 2003), (2002, 2002), (2001, 2001), (2000, 2000), (1999, 1999), (1998, 1998), (1997, 1997), (1996, 1996), (1995, 1995), (1994, 1994), (1993, 1993), (1992, 1992), (1991, 1991), (1990, 1990), (1989, 1989), (1988, 1988), (1987, 1987), (1986, 1986), (1985, 1985), (1984, 1984), (1983, 1983), (1982, 1982), (1981, 1981), (1980, 1980), (1979, 1979), (1978, 1978), (1977, 1977), (1976, 1976), (1975, 1975), (1974, 1974), (1973, 1973), (1972, 1972), (1971, 1971), (1970, 1970), (1969, 1969), (1968, 1968), (1967, 1967), (1966, 1966), (1965, 1965), (1964, 1964), (1963, 1963), (1962, 1962), (1961, 1961), (1960, 1960), (1959, 1959), (1958, 1958), (1957, 1957), (1956, 1956), (1955, 1955), (1954, 1954), (1953, 1953), (1952, 1952), (1951, 1951), (1950, 1950), (1949, 1949), (1948, 1948), (1947, 1947), (1946, 1946), (1945, 1945), (1944, 1944), (1943, 1943), (1942, 1942), (1941, 1941), (1940, 1940), (1939, 1939)])),
                ('open_date', models.DateField(blank=True, null=True)),
                ('close_date', models.DateField(blank=True, null=True)),
                ('start_date', models.DateField(blank=True, null=True)),
                ('end_date', models.DateField(blank=True, null=True)),
                ('venue_name', models.CharField(default='(TBD)', help_text='\n            The venue name (when available).', max_length=255)),
                ('location', models.CharField(default='(TBD)', help_text='\n            The general location in the form "City, State".', max_length=255)),
                ('timezone', timezone_field.fields.TimeZoneField(blank=True, help_text='\n            The local timezone of the convention.', null=True)),
                ('image', models.ImageField(blank=True, null=True, upload_to=apps.smanager.fields.ImageUploadPath())),
                ('description', models.TextField(blank=True, help_text='\n            A general description field; usually used for hotel and venue info.', max_length=1000)),
                ('divisions', apps.smanager.fields.DivisionsField(base_field=models.IntegerField(choices=[('EVG', [(10, 'EVG Division I'), (20, 'EVG Division II'), (30, 'EVG Division III'), (40, 'EVG Division IV'), (50, 'EVG Division V')]), ('FWD', [(60, 'FWD Arizona'), (70, 'FWD Northeast'), (80, 'FWD Northwest'), (90, 'FWD Southeast'), (100, 'FWD Southwest')]), ('LOL', [(110, 'LOL 10000 Lakes'), (120, 'LOL Division One'), (130, 'LOL Northern Plains'), (140, 'LOL Packerland'), (150, 'LOL Southwest')]), ('MAD', [(170, 'MAD Central'), (180, 'MAD Northern'), (190, 'MAD Southern')]), ('NED', [(210, 'NED Granite and Pine'), (220, 'NED Mountain'), (230, 'NED Patriot'), (240, 'NED Sunrise'), (250, 'NED Yankee')]), ('SWD', [(260, 'SWD Northeast'), (270, 'SWD Northwest'), (280, 'SWD Southeast'), (290, 'SWD Southwest')])]), blank=True, default=list, help_text='Only select divisions if required.  If it is a district-wide convention do not select any.', size=None)),
                ('kinds', apps.smanager.fields.DivisionsField(base_field=models.IntegerField(choices=[(32, 'Chorus'), (41, 'Quartet'), (42, 'Mixed'), (43, 'Senior'), (44, 'Youth'), (45, 'Unknown'), (46, 'VLQ')]), blank=True, default=list, help_text='The session kind(s) created at build time.', size=None)),
                ('group_id', models.UUIDField(blank=True, null=True)),
                ('owners', models.ManyToManyField(related_name='conventions', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Session',
            fields=[
                ('created', model_utils.fields.AutoCreatedField(default=django.utils.timezone.now, editable=False, verbose_name='created')),
                ('modified', model_utils.fields.AutoLastModifiedField(default=django.utils.timezone.now, editable=False, verbose_name='modified')),
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('status', django_fsm.FSMIntegerField(choices=[(0, 'New'), (2, 'Built'), (4, 'Opened'), (8, 'Closed'), (10, 'Verified'), (20, 'Packaged'), (30, 'Finished')], default=0, help_text='DO NOT CHANGE MANUALLY unless correcting a mistake.  Use the buttons to change state.')),
                ('kind', models.IntegerField(choices=[(32, 'Chorus'), (41, 'Quartet'), (42, 'Mixed'), (43, 'Senior'), (44, 'Youth'), (45, 'Unknown'), (46, 'VLQ')], help_text='\n            The kind of session.  Generally this will be either quartet or chorus.\n        ')),
                ('num_rounds', models.IntegerField(default=0)),
                ('is_invitational', models.BooleanField(default=False, help_text='Invite-only (v. Open).')),
                ('description', models.TextField(blank=True, help_text='\n            The Public Description.  Will be sent in all email communications.', max_length=1000)),
                ('notes', models.TextField(blank=True, help_text='\n            Private Notes (for internal use only).  Will not be sent.')),
                ('footnotes', models.TextField(blank=True, help_text='\n            Freeform text field; will print on OSS.')),
                ('legacy_report', models.FileField(blank=True, default='', storage=cloudinary_storage.storage.RawMediaCloudinaryStorage(), upload_to=apps.smanager.fields.FileUploadPath())),
                ('drcj_report', models.FileField(blank=True, default='', storage=cloudinary_storage.storage.RawMediaCloudinaryStorage(), upload_to=apps.smanager.fields.FileUploadPath())),
                ('convention', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='sessions', to='smanager.Convention')),
                ('owners', models.ManyToManyField(related_name='sessions', to=settings.AUTH_USER_MODEL)),
                ('target', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='feeders', to='smanager.Session')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Entry',
            fields=[
                ('created', model_utils.fields.AutoCreatedField(default=django.utils.timezone.now, editable=False, verbose_name='created')),
                ('modified', model_utils.fields.AutoLastModifiedField(default=django.utils.timezone.now, editable=False, verbose_name='modified')),
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('status', django_fsm.FSMIntegerField(choices=[(0, 'New'), (2, 'Built'), (5, 'Invited'), (7, 'Withdrawn'), (10, 'Submitted'), (20, 'Approved')], default=0, help_text='DO NOT CHANGE MANUALLY unless correcting a mistake.  Use the buttons to change state.')),
                ('is_evaluation', models.BooleanField(default=True, help_text='\n            Entry requests evaluation.')),
                ('is_private', models.BooleanField(default=False, help_text='\n            Keep scores private.')),
                ('is_mt', models.BooleanField(default=False, help_text='\n            Keep scores private.')),
                ('draw', models.IntegerField(blank=True, help_text='\n            The draw for the initial round only.', null=True)),
                ('seed', models.IntegerField(blank=True, help_text='\n            The incoming rank based on prelim score.', null=True)),
                ('prelim', models.FloatField(blank=True, help_text='\n            The incoming prelim score.', null=True)),
                ('base', models.FloatField(blank=True, help_text='\n            The incoming base score used to determine most-improved winners.', null=True)),
                ('participants', models.CharField(blank=True, default='', max_length=255)),
                ('pos', models.IntegerField(blank=True, help_text='Estimated Participants-on-Stage', null=True)),
                ('representing', models.CharField(blank=True, default='', max_length=255)),
                ('description', models.TextField(blank=True, help_text='\n            Public Notes (usually from group).', max_length=1000)),
                ('notes', models.TextField(blank=True, help_text='\n            Private Notes (for internal use only).')),
                ('group_id', models.UUIDField(blank=True, null=True)),
                ('owners', models.ManyToManyField(related_name='entries', to=settings.AUTH_USER_MODEL)),
                ('session', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='entries', to='smanager.Session')),
            ],
            options={
                'verbose_name_plural': 'entries',
            },
        ),
        migrations.CreateModel(
            name='Contestant',
            fields=[
                ('created', model_utils.fields.AutoCreatedField(default=django.utils.timezone.now, editable=False, verbose_name='created')),
                ('modified', model_utils.fields.AutoLastModifiedField(default=django.utils.timezone.now, editable=False, verbose_name='modified')),
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('status', django_fsm.FSMIntegerField(choices=[(-10, 'Excluded'), (0, 'New'), (10, 'Included')], default=0, help_text='DO NOT CHANGE MANUALLY unless correcting a mistake.  Use the buttons to change state.')),
                ('contest', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='contestants', to='smanager.Contest')),
                ('entry', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='contestants', to='smanager.Entry')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.AddField(
            model_name='contest',
            name='session',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='contests', to='smanager.Session'),
        ),
        migrations.CreateModel(
            name='Assignment',
            fields=[
                ('created', model_utils.fields.AutoCreatedField(default=django.utils.timezone.now, editable=False, verbose_name='created')),
                ('modified', model_utils.fields.AutoLastModifiedField(default=django.utils.timezone.now, editable=False, verbose_name='modified')),
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('status', django_fsm.FSMIntegerField(choices=[(-10, 'Inactive'), (0, 'New'), (10, 'Active')], default=10, help_text='DO NOT CHANGE MANUALLY unless correcting a mistake.  Use the buttons to change state.')),
                ('kind', models.IntegerField(choices=[(10, 'Official'), (20, 'Practice'), (30, 'Observer')])),
                ('category', models.IntegerField(blank=True, choices=[(5, 'DRCJ'), (10, 'CA'), (30, 'Music'), (40, 'Performance'), (50, 'Singing')], null=True)),
                ('person_id', models.UUIDField(blank=True, null=True)),
                ('convention', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='assignments', to='smanager.Convention')),
                ('user', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='assignments', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'abstract': False,
            },
        ),
    ]
