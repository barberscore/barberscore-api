# Generated by Django 2.2.27 on 2022-03-18 15:06

from math import ceil
from django.db import migrations
from model_utils import Choices
from django.db.models import Sum, Avg, Count, Q

KIND = Choices(
    (10, 'official', 'Official'),
    (20, 'practice', 'Practice'),
    (30, 'observer', 'Observer'),
)

CATEGORY = Choices(
    (5, 'drcj', 'DRCJ'),
    (10, 'ca', 'CA'),
    (30, 'music', 'Music'),
    (40, 'performance', 'Performance'),
    (50, 'singing', 'Singing'),
)

def round_up(num, places=1):
    return ceil(num * (10**places)) / float(10**places)

def get_stats_round(apps, round_id, group_id):
    Round = apps.get_model('adjudication.round')
    rounds = Round.objects.filter(
        id=round_id,
    )
    stats = rounds.aggregate(
        tot_points=Sum(
            'appearances__songs__scores__points',
            filter=Q(
                appearances__songs__scores__panelist__kind=KIND.official,
                appearances__group_id=group_id,
            ),
        ),
        sng_points=Sum(
            'appearances__songs__scores__points',
            filter=Q(
                appearances__songs__scores__panelist__kind=KIND.official,
                appearances__songs__scores__panelist__category=CATEGORY.singing,
                appearances__group_id=group_id,
            ),
        ),
        per_points=Sum(
            'appearances__songs__scores__points',
            filter=Q(
                appearances__songs__scores__panelist__kind=KIND.official,
                appearances__songs__scores__panelist__category=CATEGORY.performance,
                appearances__group_id=group_id,
            ),
        ),
        mus_points=Sum(
            'appearances__songs__scores__points',
            filter=Q(
                appearances__songs__scores__panelist__kind=KIND.official,
                appearances__songs__scores__panelist__category=CATEGORY.music,
                appearances__group_id=group_id,
            ),
        ),
        sng_score=Avg(
            'appearances__songs__scores__points',
            filter=Q(
                appearances__songs__scores__panelist__kind=KIND.official,
                appearances__songs__scores__panelist__category=CATEGORY.singing,
                appearances__group_id=group_id,
            ),
        ),
        per_score=Avg(
            'appearances__songs__scores__points',
            filter=Q(
                appearances__songs__scores__panelist__kind=KIND.official,
                appearances__songs__scores__panelist__category=CATEGORY.performance,
                appearances__group_id=group_id,
            ),
        ),
        mus_score=Avg(
            'appearances__songs__scores__points',
            filter=Q(
                appearances__songs__scores__panelist__kind=KIND.official,
                appearances__songs__scores__panelist__category=CATEGORY.music,
                appearances__group_id=group_id,
            ),
        ),
        score_count=Count(
            'appearances__songs__scores',
            filter=Q(
                appearances__songs__scores__panelist__kind=KIND.official,
                appearances__group_id=group_id,
            ),
        ),
    )
    if stats['tot_points'] is not None:
        stats['tot_score'] = (stats['tot_points'] / stats['score_count'])
    else:
        stats['tot_score'] = 0
    stats.pop("score_count", None)
    for key, value in stats.items():
        if key != 'tot_score' and key.endswith('_score'):
            stats[key] = round_up(value, 1)
        elif key == 'tot_score':
            stats[key] = round(value, 1)
    return stats


def forward(apps, schema_editor):
    Appearance = apps.get_model('adjudication.appearance')

    for a in Appearance.objects.exclude(
            stats__isnull=True
        ).exclude(
            stats__exact=''
        ):
        a.round_stats = get_stats_round(apps, a.round_id, a.group_id)
        a.save()

class Migration(migrations.Migration):

    dependencies = [
        ('adjudication', '0017_appearance_round_stats'),
    ]

    operations = [
        migrations.RunPython(forward),
    ]
