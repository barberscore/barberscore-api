# -*- coding: utf-8 -*-
# Generated by Django 1.9.2 on 2016-02-20 22:30
from __future__ import unicode_literals

import apps.api.models
import autoslug.fields
import django.contrib.postgres.fields.ranges
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion
import django.db.models.manager
import django.utils.timezone
import django_fsm
import model_utils.fields
import mptt.fields
import phonenumber_field.modelfields
import timezone_field.fields
import uuid


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0007_alter_validators_add_error_messages'),
    ]

    operations = [
        migrations.CreateModel(
            name='User',
            fields=[
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('email', models.EmailField(help_text=b'Your email address will be your username.', max_length=254, unique=True)),
                ('name', models.CharField(help_text=b'Your full name.', max_length=200)),
                ('is_active', models.BooleanField(default=True)),
                ('is_staff', models.BooleanField(default=False)),
                ('date_joined', models.DateField(auto_now_add=True)),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Arranger',
            fields=[
                ('created', model_utils.fields.AutoCreatedField(default=django.utils.timezone.now, editable=False, verbose_name='created')),
                ('modified', model_utils.fields.AutoLastModifiedField(default=django.utils.timezone.now, editable=False, verbose_name='modified')),
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=255, unique=True)),
                ('slug', autoslug.fields.AutoSlugField(always_update=True, editable=False, max_length=255, populate_from=b'name', unique=True)),
                ('part', models.IntegerField(choices=[(1, b'Arranger'), (2, b'Co-Arranger')], default=1)),
            ],
        ),
        migrations.CreateModel(
            name='Award',
            fields=[
                ('created', model_utils.fields.AutoCreatedField(default=django.utils.timezone.now, editable=False, verbose_name='created')),
                ('modified', model_utils.fields.AutoLastModifiedField(default=django.utils.timezone.now, editable=False, verbose_name='modified')),
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('name', models.CharField(editable=False, max_length=255, unique=True)),
                ('slug', autoslug.fields.AutoSlugField(always_update=True, editable=False, max_length=255, populate_from=b'name', unique=True)),
                ('status', django_fsm.FSMIntegerField(choices=[(0, b'New'), (10, b'Active'), (20, b'Inactive')], default=0)),
                ('status_monitor', model_utils.fields.MonitorField(default=django.utils.timezone.now, help_text=b'Status last updated', monitor=b'status')),
                ('kind', models.IntegerField(blank=True, choices=[(1, b'Quartet'), (2, b'Chorus'), (3, b'Seniors'), (4, b'Collegiate'), (5, b'Novice')], null=True)),
                ('rounds', models.IntegerField()),
                ('size', django.contrib.postgres.fields.ranges.IntegerRangeField(blank=True, null=True)),
                ('is_improved', models.BooleanField(default=False)),
                ('long_name', models.CharField(blank=True, default=b'', max_length=200)),
                ('stix_num', models.IntegerField(blank=True, null=True)),
                ('stix_name', models.CharField(blank=True, default=b'', max_length=200)),
            ],
            options={
                'ordering': ('organization__level', 'organization__name', 'kind', 'long_name'),
            },
        ),
        migrations.CreateModel(
            name='Catalog',
            fields=[
                ('created', model_utils.fields.AutoCreatedField(default=django.utils.timezone.now, editable=False, verbose_name='created')),
                ('modified', model_utils.fields.AutoLastModifiedField(default=django.utils.timezone.now, editable=False, verbose_name='modified')),
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('song_name', models.CharField(blank=True, max_length=200)),
                ('bhs_id', models.IntegerField(blank=True, null=True)),
                ('bhs_published', models.DateField(blank=True, null=True)),
                ('bhs_songname', models.CharField(blank=True, max_length=200)),
                ('bhs_arranger', models.CharField(blank=True, max_length=200)),
                ('bhs_fee', models.FloatField(blank=True, null=True)),
                ('bhs_difficulty', models.IntegerField(blank=True, choices=[(1, b'Very Easy'), (2, b'Easy'), (3, b'Medium'), (4, b'Hard'), (5, b'Very Hard')], null=True)),
                ('bhs_tempo', models.IntegerField(blank=True, choices=[(1, b'Ballad'), (2, b'Uptune'), (3, b'Mixed')], null=True)),
                ('bhs_medley', models.BooleanField(default=False)),
                ('is_parody', models.BooleanField(default=False)),
                ('is_medley', models.BooleanField(default=False)),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Certification',
            fields=[
                ('created', model_utils.fields.AutoCreatedField(default=django.utils.timezone.now, editable=False, verbose_name='created')),
                ('modified', model_utils.fields.AutoLastModifiedField(default=django.utils.timezone.now, editable=False, verbose_name='modified')),
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=255, unique=True)),
                ('slug', autoslug.fields.AutoSlugField(always_update=True, editable=False, max_length=255, populate_from=b'name', unique=True)),
                ('category', models.IntegerField(choices=[(0, b'Admin'), (1, b'Music'), (2, b'Presentation'), (3, b'Singing')])),
                ('status', django_fsm.FSMIntegerField(choices=[(0, b'New'), (1, b'Active'), (2, b'Candidate'), (3, b'Inactive')], default=0)),
                ('status_monitor', model_utils.fields.MonitorField(default=django.utils.timezone.now, help_text=b'Status last updated', monitor=b'status')),
                ('date', django.contrib.postgres.fields.ranges.DateRangeField(blank=True, help_text=b'\n            The active dates of the resource.', null=True)),
            ],
        ),
        migrations.CreateModel(
            name='Chapter',
            fields=[
                ('created', model_utils.fields.AutoCreatedField(default=django.utils.timezone.now, editable=False, verbose_name='created')),
                ('modified', model_utils.fields.AutoLastModifiedField(default=django.utils.timezone.now, editable=False, verbose_name='modified')),
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('name', models.CharField(error_messages={b'unique': b'The name must be unique.  Add middle initials, suffixes, years, or other identifiers to make the name unique.'}, help_text=b'\n            The name of the resource.', max_length=200, unique=True)),
                ('slug', autoslug.fields.AutoSlugField(always_update=True, editable=False, max_length=255, populate_from=b'name', unique=True)),
                ('date', django.contrib.postgres.fields.ranges.DateRangeField(blank=True, help_text=b'\n            The active dates of the resource.', null=True)),
                ('location', models.CharField(blank=True, default=b'', help_text=b'\n            The geographical location of the resource.', max_length=200)),
                ('website', models.URLField(blank=True, default=b'', help_text=b'\n            The website URL of the resource.')),
                ('facebook', models.URLField(blank=True, default=b'', help_text=b'\n            The facebook URL of the resource.')),
                ('twitter', models.CharField(blank=True, default=b'', help_text=b'\n            The twitter handle (in form @twitter_handle) of the resource.', max_length=16, validators=[django.core.validators.RegexValidator(message=b'\n                    Must be a single Twitter handle\n                    in the form `@twitter_handle`.\n                ', regex=b'@([A-Za-z0-9_]+)')])),
                ('email', models.EmailField(blank=True, default=b'', help_text=b'\n            The contact email of the resource.', max_length=254)),
                ('phone', phonenumber_field.modelfields.PhoneNumberField(blank=True, default=b'', help_text=b'\n            The phone number of the resource.  Include country code.', max_length=128)),
                ('picture', models.ImageField(blank=True, help_text=b'\n            The picture/logo of the resource.', null=True, upload_to=apps.api.models.generate_image_filename)),
                ('description', models.TextField(blank=True, help_text=b'\n            A description/bio of the resource.  Max 1000 characters.', max_length=1000)),
                ('notes', models.TextField(blank=True, help_text=b'\n            Notes (for internal use only).')),
                ('status', django_fsm.FSMIntegerField(choices=[(0, b'New'), (10, b'Active'), (20, b'Inactive'), (50, b'Duplicate')], default=0)),
                ('status_monitor', model_utils.fields.MonitorField(default=django.utils.timezone.now, help_text=b'Status last updated', monitor=b'status')),
                ('code', models.CharField(blank=True, help_text=b'\n            The chapter code.', max_length=200, null=True, unique=True)),
                ('bhs_name', models.CharField(blank=True, max_length=255)),
                ('bhs_chapter_name', models.CharField(blank=True, max_length=255)),
                ('bhs_group_name', models.CharField(blank=True, max_length=255)),
                ('bhs_chapter_code', models.CharField(blank=True, max_length=255)),
                ('bhs_group_id', models.IntegerField(blank=True, null=True, unique=True)),
                ('bhs_website', models.CharField(blank=True, max_length=255)),
                ('bhs_district', models.CharField(blank=True, max_length=255)),
                ('bhs_venue', models.CharField(blank=True, max_length=255)),
                ('bhs_address', models.CharField(blank=True, max_length=255)),
                ('bhs_city', models.CharField(blank=True, max_length=255)),
                ('bhs_state', models.CharField(blank=True, max_length=255)),
                ('bhs_zip', models.CharField(blank=True, max_length=255)),
                ('bhs_contact', models.CharField(blank=True, max_length=255)),
                ('bhs_phone', models.CharField(blank=True, max_length=255)),
            ],
            options={
                'ordering': ('name',),
            },
        ),
        migrations.CreateModel(
            name='Contestant',
            fields=[
                ('created', model_utils.fields.AutoCreatedField(default=django.utils.timezone.now, editable=False, verbose_name='created')),
                ('modified', model_utils.fields.AutoLastModifiedField(default=django.utils.timezone.now, editable=False, verbose_name='modified')),
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('name', models.CharField(editable=False, max_length=255, unique=True)),
                ('slug', autoslug.fields.AutoSlugField(always_update=True, editable=False, max_length=255, populate_from=b'name', unique=True)),
                ('status', django_fsm.FSMIntegerField(choices=[(0, b'New'), (90, b'Final')], default=0)),
                ('status_monitor', model_utils.fields.MonitorField(default=django.utils.timezone.now, help_text=b'Status last updated', monitor=b'status')),
                ('place', models.IntegerField(blank=True, editable=False, help_text=b'\n            The final ranking relative to this award.', null=True)),
                ('mus_points', models.IntegerField(blank=True, editable=False, null=True)),
                ('prs_points', models.IntegerField(blank=True, editable=False, null=True)),
                ('sng_points', models.IntegerField(blank=True, editable=False, null=True)),
                ('total_points', models.IntegerField(blank=True, editable=False, null=True)),
                ('mus_score', models.FloatField(blank=True, editable=False, null=True)),
                ('prs_score', models.FloatField(blank=True, editable=False, null=True)),
                ('sng_score', models.FloatField(blank=True, editable=False, null=True)),
                ('total_score', models.FloatField(blank=True, editable=False, null=True)),
                ('award', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='contestants', to='api.Award')),
            ],
            options={
                'ordering': ('award', 'place'),
            },
        ),
        migrations.CreateModel(
            name='Convention',
            fields=[
                ('created', model_utils.fields.AutoCreatedField(default=django.utils.timezone.now, editable=False, verbose_name='created')),
                ('modified', model_utils.fields.AutoLastModifiedField(default=django.utils.timezone.now, editable=False, verbose_name='modified')),
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('name', models.CharField(editable=False, max_length=255, unique=True)),
                ('slug', autoslug.fields.AutoSlugField(always_update=True, editable=False, max_length=255, populate_from=b'name', unique=True)),
                ('status', django_fsm.FSMIntegerField(choices=[(0, b'New'), (10, b'Scheduled'), (20, b'Started'), (30, b'Finished'), (50, b'Final')], default=0)),
                ('status_monitor', model_utils.fields.MonitorField(default=django.utils.timezone.now, help_text=b'Status last updated', monitor=b'status')),
                ('kind', models.IntegerField(choices=[(1, b'International'), (2, b'Midwinter'), (3, b'Fall'), (4, b'Spring'), (9, b'Video')], help_text=b'\n            The kind of convention.')),
                ('division', models.IntegerField(blank=True, choices=[(200, b'Division I'), (210, b'Division II'), (220, b'Division III'), (230, b'Division IV'), (240, b'Division V'), (250, b'Arizona Division'), (260, b'NE/NW Division'), (270, b'SE/SW Division'), (280, b'Division One/Packerland Division'), (290, b'Northern Plains Division'), (300, b'10,000 Lakes and Southwest Division'), (310, b'Atlantic Division'), (320, b'Northern and Western Division'), (330, b'Southern Division'), (340, b'Sunrise Division')], help_text=b'\n            Detail if division/combo convention.', null=True)),
                ('year', models.IntegerField(choices=[(2017, 2017), (2016, 2016), (2015, 2015), (2014, 2014), (2013, 2013), (2012, 2012), (2011, 2011), (2010, 2010), (2009, 2009), (2008, 2008), (2007, 2007), (2006, 2006), (2005, 2005), (2004, 2004), (2003, 2003), (2002, 2002), (2001, 2001), (2000, 2000), (1999, 1999), (1998, 1998), (1997, 1997), (1996, 1996), (1995, 1995), (1994, 1994), (1993, 1993), (1992, 1992), (1991, 1991), (1990, 1990), (1989, 1989), (1988, 1988), (1987, 1987), (1986, 1986), (1985, 1985), (1984, 1984), (1983, 1983), (1982, 1982), (1981, 1981), (1980, 1980), (1979, 1979), (1978, 1978), (1977, 1977), (1976, 1976), (1975, 1975), (1974, 1974), (1973, 1973), (1972, 1972), (1971, 1971), (1970, 1970), (1969, 1969), (1968, 1968), (1967, 1967), (1966, 1966), (1965, 1965), (1964, 1964), (1963, 1963), (1962, 1962), (1961, 1961), (1960, 1960), (1959, 1959), (1958, 1958), (1957, 1957), (1956, 1956), (1955, 1955), (1954, 1954), (1953, 1953), (1952, 1952), (1951, 1951), (1950, 1950), (1949, 1949), (1948, 1948), (1947, 1947), (1946, 1946), (1945, 1945), (1944, 1944), (1943, 1943), (1942, 1942), (1941, 1941), (1940, 1940), (1939, 1939)], editable=False)),
                ('date', django.contrib.postgres.fields.ranges.DateRangeField(help_text=b'\n            The convention dates (will be replaced by start/end).')),
                ('location', models.CharField(blank=True, help_text=b'\n            The location of the convention.', max_length=200)),
                ('timezone', timezone_field.fields.TimeZoneField(default=b'US/Pacific', help_text=b'\n            The local timezone of the convention.')),
                ('stix_name', models.CharField(blank=True, max_length=200, null=True)),
                ('stix_div', models.CharField(blank=True, max_length=200, null=True)),
                ('stix_file', models.FileField(blank=True, help_text=b'\n            The bbstix file.', null=True, upload_to=apps.api.models.generate_image_filename)),
            ],
            options={
                'ordering': ['-year', 'organization__name'],
            },
        ),
        migrations.CreateModel(
            name='Director',
            fields=[
                ('created', model_utils.fields.AutoCreatedField(default=django.utils.timezone.now, editable=False, verbose_name='created')),
                ('modified', model_utils.fields.AutoLastModifiedField(default=django.utils.timezone.now, editable=False, verbose_name='modified')),
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=255, unique=True)),
                ('slug', autoslug.fields.AutoSlugField(always_update=True, editable=False, max_length=255, populate_from=b'name', unique=True)),
                ('part', models.IntegerField(choices=[(1, b'Director'), (2, b'Co-Director')], default=1)),
            ],
        ),
        migrations.CreateModel(
            name='Group',
            fields=[
                ('created', model_utils.fields.AutoCreatedField(default=django.utils.timezone.now, editable=False, verbose_name='created')),
                ('modified', model_utils.fields.AutoLastModifiedField(default=django.utils.timezone.now, editable=False, verbose_name='modified')),
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('name', models.CharField(error_messages={b'unique': b'The name must be unique.  Add middle initials, suffixes, years, or other identifiers to make the name unique.'}, help_text=b'\n            The name of the resource.', max_length=200)),
                ('slug', autoslug.fields.AutoSlugField(always_update=True, editable=False, max_length=255, populate_from=b'name', unique_with=(b'kind',))),
                ('date', django.contrib.postgres.fields.ranges.DateRangeField(blank=True, help_text=b'\n            The active dates of the resource.', null=True)),
                ('location', models.CharField(blank=True, default=b'', help_text=b'\n            The geographical location of the resource.', max_length=200)),
                ('website', models.URLField(blank=True, default=b'', help_text=b'\n            The website URL of the resource.')),
                ('facebook', models.URLField(blank=True, default=b'', help_text=b'\n            The facebook URL of the resource.')),
                ('twitter', models.CharField(blank=True, default=b'', help_text=b'\n            The twitter handle (in form @twitter_handle) of the resource.', max_length=16, validators=[django.core.validators.RegexValidator(message=b'\n                    Must be a single Twitter handle\n                    in the form `@twitter_handle`.\n                ', regex=b'@([A-Za-z0-9_]+)')])),
                ('email', models.EmailField(blank=True, default=b'', help_text=b'\n            The contact email of the resource.', max_length=254)),
                ('phone', phonenumber_field.modelfields.PhoneNumberField(blank=True, default=b'', help_text=b'\n            The phone number of the resource.  Include country code.', max_length=128)),
                ('picture', models.ImageField(blank=True, help_text=b'\n            The picture/logo of the resource.', null=True, upload_to=apps.api.models.generate_image_filename)),
                ('description', models.TextField(blank=True, help_text=b'\n            A description/bio of the resource.  Max 1000 characters.', max_length=1000)),
                ('notes', models.TextField(blank=True, help_text=b'\n            Notes (for internal use only).')),
                ('status', models.IntegerField(choices=[(0, b'New'), (10, b'Active'), (20, b'Inactive'), (50, b'Duplicate')], default=0)),
                ('status_monitor', model_utils.fields.MonitorField(default=django.utils.timezone.now, help_text=b'Status last updated', monitor=b'status')),
                ('kind', models.IntegerField(choices=[(1, b'Quartet'), (2, b'Chorus')], default=1, help_text=b'\n            The kind of group; choices are Quartet or Chorus.')),
                ('is_senior', models.BooleanField(default=False)),
                ('is_youth', models.BooleanField(default=False)),
                ('is_novice', models.BooleanField(default=False)),
                ('group_id', models.IntegerField(blank=True, null=True, unique=True)),
                ('bhs_name', models.CharField(blank=True, max_length=255)),
                ('bhs_chapter_name', models.CharField(blank=True, max_length=255)),
                ('bhs_chapter_code', models.CharField(blank=True, max_length=255)),
                ('bhs_website', models.CharField(blank=True, max_length=255)),
                ('bhs_district', models.CharField(blank=True, max_length=255)),
                ('bhs_location', models.CharField(blank=True, max_length=255)),
                ('bhs_contact', models.CharField(blank=True, max_length=255)),
                ('bhs_phone', models.CharField(blank=True, max_length=255)),
                ('bhs_expiration', models.CharField(blank=True, max_length=255)),
                ('chapter', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='groups', to='api.Chapter')),
            ],
            options={
                'ordering': ('name',),
            },
        ),
        migrations.CreateModel(
            name='Judge',
            fields=[
                ('created', model_utils.fields.AutoCreatedField(default=django.utils.timezone.now, editable=False, verbose_name='created')),
                ('modified', model_utils.fields.AutoLastModifiedField(default=django.utils.timezone.now, editable=False, verbose_name='modified')),
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('name', models.CharField(editable=False, max_length=255, unique=True)),
                ('slug', autoslug.fields.AutoSlugField(always_update=True, editable=False, max_length=255, populate_from=b'name', unique=True)),
                ('status', models.IntegerField(choices=[(0, b'New'), (10, b'Scheduled'), (20, b'Confirmed'), (30, b'Final')], default=0)),
                ('status_monitor', model_utils.fields.MonitorField(default=django.utils.timezone.now, help_text=b'Status last updated', monitor=b'status')),
                ('category', models.IntegerField(choices=[(1, b'Music'), (2, b'Presentation'), (3, b'Singing')])),
                ('kind', models.IntegerField(choices=[(10, b'Official'), (20, b'Practice'), (30, b'Composite')])),
                ('slot', models.IntegerField(blank=True, null=True)),
                ('panel_id', models.IntegerField(blank=True, null=True)),
            ],
            options={
                'ordering': ('session', 'category', 'kind', 'slot'),
            },
        ),
        migrations.CreateModel(
            name='Organization',
            fields=[
                ('created', model_utils.fields.AutoCreatedField(default=django.utils.timezone.now, editable=False, verbose_name='created')),
                ('modified', model_utils.fields.AutoLastModifiedField(default=django.utils.timezone.now, editable=False, verbose_name='modified')),
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('name', models.CharField(help_text=b'\n            The name of the resource.', max_length=200)),
                ('slug', autoslug.fields.AutoSlugField(always_update=True, editable=False, max_length=255, populate_from=b'name')),
                ('status', django_fsm.FSMIntegerField(choices=[(0, b'New'), (10, b'Active'), (20, b'Inactive')], default=0)),
                ('status_monitor', model_utils.fields.MonitorField(default=django.utils.timezone.now, help_text=b'Status last updated', monitor=b'status')),
                ('level', models.IntegerField(blank=True, choices=[(0, b'International'), (1, b'District/Affiliates'), (2, b'Division')], null=True)),
                ('kind', models.IntegerField(blank=True, choices=[(b'International', [(0, b'International'), (50, b'Harmony Incorporated')]), (b'District', [(10, b'District'), (20, b'Noncompetitive'), (30, b'Affiliate')]), (b'Division', [(40, b'Division')])], help_text=b'\n            The kind of organization.', null=True)),
                ('date', django.contrib.postgres.fields.ranges.DateRangeField(blank=True, help_text=b'\n            The active dates of the resource.', null=True)),
                ('location', models.CharField(blank=True, help_text=b'\n            The geographical location of the resource.', max_length=200)),
                ('website', models.URLField(blank=True, help_text=b'\n            The website URL of the resource.')),
                ('facebook', models.URLField(blank=True, help_text=b'\n            The facebook URL of the resource.')),
                ('twitter', models.CharField(blank=True, help_text=b'\n            The twitter handle (in form @twitter_handle) of the resource.', max_length=16, validators=[django.core.validators.RegexValidator(message=b'\n                    Must be a single Twitter handle\n                    in the form `@twitter_handle`.\n                ', regex=b'@([A-Za-z0-9_]+)')])),
                ('email', models.EmailField(blank=True, help_text=b'\n            The contact email of the resource.', max_length=254)),
                ('phone', phonenumber_field.modelfields.PhoneNumberField(blank=True, help_text=b'\n            The phone number of the resource.  Include country code.', max_length=128, null=True)),
                ('picture', models.ImageField(blank=True, help_text=b'\n            The picture/logo of the resource.', null=True, upload_to=apps.api.models.generate_image_filename)),
                ('description', models.TextField(blank=True, help_text=b'\n            A description/bio of the resource.  Max 1000 characters.', max_length=1000)),
                ('notes', models.TextField(blank=True, help_text=b'\n            Notes (for internal use only).')),
                ('short_name', models.CharField(blank=True, help_text=b'\n            A short-form name for the resource.', max_length=200)),
                ('long_name', models.CharField(blank=True, help_text=b'\n            A long-form name for the resource.', max_length=200)),
                ('code', models.CharField(blank=True, help_text=b'\n            The single-letter code, corresponding to chapter codes.', max_length=1)),
                ('lft', models.PositiveIntegerField(db_index=True, editable=False)),
                ('rght', models.PositiveIntegerField(db_index=True, editable=False)),
                ('tree_id', models.PositiveIntegerField(db_index=True, editable=False)),
                ('parent', mptt.fields.TreeForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='children', to='api.Organization')),
            ],
            options={
                'abstract': False,
            },
            managers=[
                ('_default_manager', django.db.models.manager.Manager()),
            ],
        ),
        migrations.CreateModel(
            name='Performance',
            fields=[
                ('created', model_utils.fields.AutoCreatedField(default=django.utils.timezone.now, editable=False, verbose_name='created')),
                ('modified', model_utils.fields.AutoLastModifiedField(default=django.utils.timezone.now, editable=False, verbose_name='modified')),
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('name', models.CharField(editable=False, max_length=255, unique=True)),
                ('slug', autoslug.fields.AutoSlugField(always_update=True, editable=False, max_length=255, populate_from=b'name', unique=True)),
                ('status', django_fsm.FSMIntegerField(choices=[(0, b'New'), (10, b'Started'), (20, b'Finished'), (30, b'Entered'), (40, b'Flagged'), (50, b'Accepted'), (90, b'Final')], default=0)),
                ('status_monitor', model_utils.fields.MonitorField(default=django.utils.timezone.now, help_text=b'Status last updated', monitor=b'status')),
                ('position', models.PositiveSmallIntegerField(verbose_name=b'Position')),
                ('slot', models.IntegerField(blank=True, null=True)),
                ('scheduled', django.contrib.postgres.fields.ranges.DateTimeRangeField(blank=True, help_text=b'\n            The scheduled performance window.', null=True)),
                ('actual', django.contrib.postgres.fields.ranges.DateTimeRangeField(blank=True, help_text=b'\n            The actual performance window.', null=True)),
                ('place', models.IntegerField(blank=True, editable=False, help_text=b'\n            The final ranking relative to this round.', null=True)),
                ('mus_points', models.IntegerField(blank=True, editable=False, null=True)),
                ('prs_points', models.IntegerField(blank=True, editable=False, null=True)),
                ('sng_points', models.IntegerField(blank=True, editable=False, null=True)),
                ('total_points', models.IntegerField(blank=True, editable=False, null=True)),
                ('mus_score', models.FloatField(blank=True, editable=False, null=True)),
                ('prs_score', models.FloatField(blank=True, editable=False, null=True)),
                ('sng_score', models.FloatField(blank=True, editable=False, null=True)),
                ('total_score', models.FloatField(blank=True, editable=False, null=True)),
            ],
            options={
                'ordering': ('round', 'slot'),
            },
        ),
        migrations.CreateModel(
            name='Performer',
            fields=[
                ('created', model_utils.fields.AutoCreatedField(default=django.utils.timezone.now, editable=False, verbose_name='created')),
                ('modified', model_utils.fields.AutoLastModifiedField(default=django.utils.timezone.now, editable=False, verbose_name='modified')),
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('name', models.CharField(editable=False, max_length=255, unique=True)),
                ('slug', autoslug.fields.AutoSlugField(always_update=True, editable=False, max_length=255, populate_from=b'name', unique=True)),
                ('status', django_fsm.FSMIntegerField(choices=[(0, b'New'), (10, b'Qualified'), (20, b'Accepted'), (30, b'Declined'), (40, b'Dropped'), (50, b'Official'), (60, b'Finished'), (90, b'Final')], default=0)),
                ('status_monitor', model_utils.fields.MonitorField(default=django.utils.timezone.now, help_text=b'Status last updated', monitor=b'status')),
                ('picture', models.ImageField(blank=True, help_text=b'\n            The on-stage session picture (as opposed to the "official" photo).', null=True, upload_to=apps.api.models.generate_image_filename)),
                ('men', models.IntegerField(blank=True, default=4, help_text=b'\n            The number of men on stage.', null=True)),
                ('seed', models.IntegerField(blank=True, help_text=b'\n            The incoming rank based on prelim score.', null=True)),
                ('prelim', models.FloatField(blank=True, help_text=b'\n            The incoming prelim score.', null=True)),
                ('place', models.IntegerField(blank=True, editable=False, null=True)),
                ('mus_points', models.IntegerField(blank=True, editable=False, null=True)),
                ('prs_points', models.IntegerField(blank=True, editable=False, null=True)),
                ('sng_points', models.IntegerField(blank=True, editable=False, null=True)),
                ('total_points', models.IntegerField(blank=True, editable=False, null=True)),
                ('mus_score', models.FloatField(blank=True, editable=False, null=True)),
                ('prs_score', models.FloatField(blank=True, editable=False, null=True)),
                ('sng_score', models.FloatField(blank=True, editable=False, null=True)),
                ('total_score', models.FloatField(blank=True, editable=False, null=True)),
                ('group', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='performers', to='api.Group')),
                ('organization', mptt.fields.TreeForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='performers', to='api.Organization')),
            ],
            options={
                'ordering': ('session', 'group'),
            },
        ),
        migrations.CreateModel(
            name='Person',
            fields=[
                ('created', model_utils.fields.AutoCreatedField(default=django.utils.timezone.now, editable=False, verbose_name='created')),
                ('modified', model_utils.fields.AutoLastModifiedField(default=django.utils.timezone.now, editable=False, verbose_name='modified')),
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('name', models.CharField(error_messages={b'unique': b'The name must be unique.  Add middle initials, suffixes, years, or other identifiers to make the name unique.'}, help_text=b'\n            The name of the resource.', max_length=200, unique=True)),
                ('slug', autoslug.fields.AutoSlugField(always_update=True, editable=False, max_length=255, populate_from=b'name', unique=True)),
                ('date', django.contrib.postgres.fields.ranges.DateRangeField(blank=True, help_text=b'\n            The active dates of the resource.', null=True)),
                ('location', models.CharField(blank=True, default=b'', help_text=b'\n            The geographical location of the resource.', max_length=200)),
                ('website', models.URLField(blank=True, default=b'', help_text=b'\n            The website URL of the resource.')),
                ('facebook', models.URLField(blank=True, default=b'', help_text=b'\n            The facebook URL of the resource.')),
                ('twitter', models.CharField(blank=True, default=b'', help_text=b'\n            The twitter handle (in form @twitter_handle) of the resource.', max_length=16, validators=[django.core.validators.RegexValidator(message=b'\n                    Must be a single Twitter handle\n                    in the form `@twitter_handle`.\n                ', regex=b'@([A-Za-z0-9_]+)')])),
                ('email', models.EmailField(blank=True, default=b'', help_text=b'\n            The contact email of the resource.', max_length=254)),
                ('phone', phonenumber_field.modelfields.PhoneNumberField(blank=True, default=b'', help_text=b'\n            The phone number of the resource.  Include country code.', max_length=128)),
                ('picture', models.ImageField(blank=True, help_text=b'\n            The picture/logo of the resource.', null=True, upload_to=apps.api.models.generate_image_filename)),
                ('description', models.TextField(blank=True, help_text=b'\n            A description/bio of the resource.  Max 1000 characters.', max_length=1000)),
                ('notes', models.TextField(blank=True, help_text=b'\n            Notes (for internal use only).')),
                ('status', models.IntegerField(choices=[(0, b'New'), (10, b'Active'), (20, b'Inactive'), (30, b'Retired'), (40, b'Deceased'), (50, b'Stix Issue'), (60, b'Possible Duplicate')], default=0)),
                ('status_monitor', model_utils.fields.MonitorField(default=django.utils.timezone.now, help_text=b'Status last updated', monitor=b'status')),
                ('member', models.IntegerField(blank=True, null=True, unique=True)),
                ('common_name', models.CharField(blank=True, default=b'', editable=False, max_length=255)),
                ('full_name', models.CharField(blank=True, default=b'', editable=False, max_length=255)),
                ('formal_name', models.CharField(blank=True, default=b'', editable=False, max_length=255)),
                ('is_judge', models.BooleanField(default=False, editable=False)),
                ('bhs_member_id', models.IntegerField(blank=True, null=True, unique=True)),
                ('bhs_name', models.CharField(blank=True, max_length=255)),
                ('bhs_city', models.CharField(blank=True, max_length=255)),
                ('bhs_state', models.CharField(blank=True, max_length=255)),
                ('bhs_phone', models.CharField(blank=True, max_length=255)),
                ('bhs_email', models.EmailField(blank=True, max_length=254)),
                ('organization', mptt.fields.TreeForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='api.Organization')),
            ],
            options={
                'ordering': ['name'],
            },
        ),
        migrations.CreateModel(
            name='Round',
            fields=[
                ('created', model_utils.fields.AutoCreatedField(default=django.utils.timezone.now, editable=False, verbose_name='created')),
                ('modified', model_utils.fields.AutoLastModifiedField(default=django.utils.timezone.now, editable=False, verbose_name='modified')),
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('name', models.CharField(editable=False, max_length=255, unique=True)),
                ('slug', autoslug.fields.AutoSlugField(always_update=True, editable=False, max_length=255, populate_from=b'name', unique=True)),
                ('status', django_fsm.FSMIntegerField(choices=[(0, b'New'), (10, b'Built'), (15, b'Ready'), (20, b'Started'), (25, b'Finished'), (28, b'Ranked'), (30, b'Final')], default=0)),
                ('status_monitor', model_utils.fields.MonitorField(default=django.utils.timezone.now, help_text=b'Status last updated', monitor=b'status')),
                ('kind', models.IntegerField(choices=[(1, b'Finals'), (2, b'Semi-Finals'), (3, b'Quarter-Finals')])),
                ('num', models.IntegerField()),
                ('date', django.contrib.postgres.fields.ranges.DateRangeField(blank=True, help_text=b'\n            The active dates of the resource.', null=True)),
                ('slots', models.IntegerField(blank=True, null=True)),
                ('stix_name', models.CharField(blank=True, default=b'', max_length=255)),
            ],
            options={
                'ordering': ('session', 'kind'),
            },
        ),
        migrations.CreateModel(
            name='Score',
            fields=[
                ('created', model_utils.fields.AutoCreatedField(default=django.utils.timezone.now, editable=False, verbose_name='created')),
                ('modified', model_utils.fields.AutoLastModifiedField(default=django.utils.timezone.now, editable=False, verbose_name='modified')),
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('name', models.CharField(editable=False, max_length=255, unique=True)),
                ('slug', autoslug.fields.AutoSlugField(always_update=True, editable=False, max_length=255, populate_from=b'name', unique=True)),
                ('status', django_fsm.FSMIntegerField(choices=[(0, b'New'), (20, b'Entered'), (30, b'Flagged'), (35, b'Validated'), (40, b'Confirmed'), (50, b'Final')], default=0)),
                ('status_monitor', model_utils.fields.MonitorField(default=django.utils.timezone.now, help_text=b'Status last updated', monitor=b'status')),
                ('category', models.IntegerField(choices=[(0, b'Admin'), (1, b'Music'), (2, b'Presentation'), (3, b'Singing')])),
                ('kind', models.IntegerField(choices=[(10, b'Official'), (20, b'Practice'), (30, b'Composite')])),
                ('dixon_test', models.NullBooleanField()),
                ('asterisk_test', models.NullBooleanField()),
                ('is_composite', models.BooleanField(default=False)),
                ('points', models.IntegerField(blank=True, help_text=b'\n            The number of points (0-100)', null=True, validators=[django.core.validators.MaxValueValidator(100, message=b'Points must be between 0 - 100'), django.core.validators.MinValueValidator(0, message=b'Points must be between 0 - 100')])),
                ('judge', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='scores', to='api.Judge')),
            ],
            options={
                'ordering': ('song', 'judge'),
            },
        ),
        migrations.CreateModel(
            name='Session',
            fields=[
                ('created', model_utils.fields.AutoCreatedField(default=django.utils.timezone.now, editable=False, verbose_name='created')),
                ('modified', model_utils.fields.AutoLastModifiedField(default=django.utils.timezone.now, editable=False, verbose_name='modified')),
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('name', models.CharField(editable=False, max_length=255, unique=True)),
                ('slug', autoslug.fields.AutoSlugField(always_update=True, editable=False, max_length=255, populate_from=b'name', unique=True)),
                ('status', django_fsm.FSMIntegerField(choices=[(0, b'New'), (10, b'Built'), (20, b'Started'), (25, b'Ranked'), (30, b'Finished'), (50, b'Final')], default=0)),
                ('status_monitor', model_utils.fields.MonitorField(default=django.utils.timezone.now, help_text=b'Status last updated', monitor=b'status')),
                ('kind', models.IntegerField(choices=[(1, b'Quartet'), (2, b'Chorus'), (3, b'Seniors'), (4, b'Collegiate'), (5, b'Novice')], help_text=b'\n            The kind of session.  Generally this will be either quartet or chorus, with the exception being International and Midwinter which hold exclusive Collegiate and Senior sessions respectively.')),
                ('size', models.IntegerField(choices=[(5, 5), (4, 4), (3, 3), (2, 2), (1, 1)], help_text=b'\n            Size of the judging panel (per category).')),
                ('date', django.contrib.postgres.fields.ranges.DateRangeField(blank=True, help_text=b'\n            The active dates of the session.', null=True)),
                ('history', models.IntegerField(choices=[(0, b'New'), (10, b'None'), (20, b'PDF'), (30, b'Places'), (40, b'Incomplete'), (50, b'Complete')], default=0, help_text=b'Used to manage state for historical imports.')),
                ('history_monitor', model_utils.fields.MonitorField(default=django.utils.timezone.now, help_text=b'History last updated', monitor=b'history')),
                ('scoresheet_pdf', models.FileField(blank=True, help_text=b'\n            The historical PDF OSS.', null=True, upload_to=apps.api.models.generate_image_filename)),
                ('scoresheet_csv', models.FileField(blank=True, help_text=b'\n            The parsed scoresheet (used for legacy imports).', null=True, upload_to=apps.api.models.generate_image_filename)),
                ('year', models.IntegerField(editable=False)),
                ('administrator', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='sessions', to='api.Person')),
                ('convention', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='sessions', to='api.Convention')),
                ('organization', mptt.fields.TreeForeignKey(editable=False, on_delete=django.db.models.deletion.CASCADE, related_name='sessions', to='api.Organization')),
            ],
            options={
                'ordering': ('-year', 'convention', 'kind'),
            },
        ),
        migrations.CreateModel(
            name='Singer',
            fields=[
                ('created', model_utils.fields.AutoCreatedField(default=django.utils.timezone.now, editable=False, verbose_name='created')),
                ('modified', model_utils.fields.AutoLastModifiedField(default=django.utils.timezone.now, editable=False, verbose_name='modified')),
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=255, unique=True)),
                ('slug', autoslug.fields.AutoSlugField(always_update=True, editable=False, max_length=255, populate_from=b'name', unique=True)),
                ('part', models.IntegerField(choices=[(1, b'Tenor'), (2, b'Lead'), (3, b'Baritone'), (4, b'Bass')])),
                ('performer', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='singers', to='api.Performer')),
                ('person', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='quartets', to='api.Person')),
            ],
            options={
                'ordering': ('-name',),
            },
        ),
        migrations.CreateModel(
            name='Song',
            fields=[
                ('created', model_utils.fields.AutoCreatedField(default=django.utils.timezone.now, editable=False, verbose_name='created')),
                ('modified', model_utils.fields.AutoLastModifiedField(default=django.utils.timezone.now, editable=False, verbose_name='modified')),
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('name', models.CharField(editable=False, max_length=255, unique=True)),
                ('slug', autoslug.fields.AutoSlugField(always_update=True, editable=False, max_length=255, populate_from=b'name', unique=True)),
                ('status', django_fsm.FSMIntegerField(choices=[(0, b'New'), (40, b'Confirmed'), (50, b'Final')], default=0)),
                ('status_monitor', model_utils.fields.MonitorField(default=django.utils.timezone.now, help_text=b'Status last updated', monitor=b'status')),
                ('order', models.IntegerField(choices=[(1, b'First'), (2, b'Second')])),
                ('title', models.CharField(blank=True, max_length=255)),
                ('arranger', models.CharField(blank=True, max_length=255)),
                ('is_parody', models.BooleanField(default=False)),
                ('mus_points', models.IntegerField(blank=True, editable=False, null=True)),
                ('prs_points', models.IntegerField(blank=True, editable=False, null=True)),
                ('sng_points', models.IntegerField(blank=True, editable=False, null=True)),
                ('total_points', models.IntegerField(blank=True, editable=False, null=True)),
                ('mus_score', models.FloatField(blank=True, editable=False, null=True)),
                ('prs_score', models.FloatField(blank=True, editable=False, null=True)),
                ('sng_score', models.FloatField(blank=True, editable=False, null=True)),
                ('total_score', models.FloatField(blank=True, editable=False, null=True)),
                ('catalog', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='songs', to='api.Catalog')),
                ('performance', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='songs', to='api.Performance')),
            ],
            options={
                'ordering': ['performance', 'order'],
            },
        ),
        migrations.CreateModel(
            name='Tune',
            fields=[
                ('created', model_utils.fields.AutoCreatedField(default=django.utils.timezone.now, editable=False, verbose_name='created')),
                ('modified', model_utils.fields.AutoLastModifiedField(default=django.utils.timezone.now, editable=False, verbose_name='modified')),
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=200, unique=True)),
                ('slug', autoslug.fields.AutoSlugField(always_update=True, editable=False, max_length=255, populate_from=b'name', unique=True)),
            ],
            options={
                'ordering': ['name'],
            },
        ),
        migrations.AddField(
            model_name='song',
            name='tune',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='songs', to='api.Tune'),
        ),
        migrations.AddField(
            model_name='score',
            name='song',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='scores', to='api.Song'),
        ),
        migrations.AddField(
            model_name='round',
            name='session',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='rounds', to='api.Session'),
        ),
        migrations.AddField(
            model_name='performer',
            name='session',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='performers', to='api.Session'),
        ),
        migrations.AddField(
            model_name='performance',
            name='performer',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='performances', to='api.Performer'),
        ),
        migrations.AddField(
            model_name='performance',
            name='round',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='performances', to='api.Round'),
        ),
        migrations.AddField(
            model_name='judge',
            name='organization',
            field=mptt.fields.TreeForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='judges', to='api.Organization'),
        ),
        migrations.AddField(
            model_name='judge',
            name='person',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='panels', to='api.Person'),
        ),
        migrations.AddField(
            model_name='judge',
            name='session',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='judges', to='api.Session'),
        ),
        migrations.AddField(
            model_name='group',
            name='organization',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='groups', to='api.Organization'),
        ),
        migrations.AddField(
            model_name='director',
            name='performer',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='directors', to='api.Performer'),
        ),
        migrations.AddField(
            model_name='director',
            name='person',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='choruses', to='api.Person'),
        ),
        migrations.AddField(
            model_name='convention',
            name='drcj',
            field=models.ForeignKey(blank=True, help_text=b'\n            The person managing the convention.', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='conventions', to='api.Person'),
        ),
        migrations.AddField(
            model_name='convention',
            name='organization',
            field=mptt.fields.TreeForeignKey(help_text=b'\n            The organization hosting the convention.', on_delete=django.db.models.deletion.CASCADE, related_name='conventions', to='api.Organization'),
        ),
        migrations.AddField(
            model_name='contestant',
            name='performer',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='contestants', to='api.Performer'),
        ),
        migrations.AddField(
            model_name='chapter',
            name='organization',
            field=mptt.fields.TreeForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='chapters', to='api.Organization'),
        ),
        migrations.AddField(
            model_name='certification',
            name='person',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='certifications', to='api.Person'),
        ),
        migrations.AddField(
            model_name='catalog',
            name='tune',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='catalogs', to='api.Tune'),
        ),
        migrations.AddField(
            model_name='award',
            name='organization',
            field=mptt.fields.TreeForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='awards', to='api.Organization'),
        ),
        migrations.AddField(
            model_name='arranger',
            name='catalog',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='arrangers', to='api.Catalog'),
        ),
        migrations.AddField(
            model_name='arranger',
            name='person',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='arrangements', to='api.Person'),
        ),
        migrations.AddField(
            model_name='user',
            name='groups',
            field=models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.Group', verbose_name='groups'),
        ),
        migrations.AddField(
            model_name='user',
            name='user_permissions',
            field=models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.Permission', verbose_name='user permissions'),
        ),
        migrations.AlterUniqueTogether(
            name='song',
            unique_together=set([('performance', 'order')]),
        ),
        migrations.AlterUniqueTogether(
            name='singer',
            unique_together=set([('performer', 'person')]),
        ),
        migrations.AlterUniqueTogether(
            name='session',
            unique_together=set([('convention', 'kind')]),
        ),
        migrations.AlterUniqueTogether(
            name='round',
            unique_together=set([('session', 'kind')]),
        ),
        migrations.AlterUniqueTogether(
            name='performer',
            unique_together=set([('group', 'session')]),
        ),
        migrations.AlterUniqueTogether(
            name='performance',
            unique_together=set([('round', 'slot')]),
        ),
        migrations.AlterUniqueTogether(
            name='judge',
            unique_together=set([('session', 'category', 'kind', 'slot')]),
        ),
        migrations.AlterUniqueTogether(
            name='group',
            unique_together=set([('name', 'kind')]),
        ),
        migrations.AlterUniqueTogether(
            name='director',
            unique_together=set([('performer', 'person')]),
        ),
        migrations.AlterUniqueTogether(
            name='convention',
            unique_together=set([('organization', 'kind', 'year', 'division')]),
        ),
        migrations.AlterUniqueTogether(
            name='contestant',
            unique_together=set([('performer', 'award')]),
        ),
        migrations.AlterUniqueTogether(
            name='certification',
            unique_together=set([('category', 'person')]),
        ),
        migrations.AlterUniqueTogether(
            name='award',
            unique_together=set([('organization', 'long_name', 'kind')]),
        ),
        migrations.AlterUniqueTogether(
            name='arranger',
            unique_together=set([('catalog', 'person')]),
        ),
    ]
