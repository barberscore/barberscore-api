# -*- coding: utf-8 -*-
# Generated by Django 1.9.5 on 2016-05-05 05:36
from __future__ import unicode_literals

import apps.api.models
import django.contrib.postgres.fields
import django.contrib.postgres.fields.ranges
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion
import django.db.models.manager
import django.utils.timezone
import django_fsm
import model_utils.fields
import mptt.fields
import phonenumber_field.modelfields
import timezone_field.fields
import uuid


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0007_alter_validators_add_error_messages'),
    ]

    operations = [
        migrations.CreateModel(
            name='User',
            fields=[
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('email', models.EmailField(help_text=b'Your email address will be your username.', max_length=254, unique=True)),
                ('name', models.CharField(help_text=b'Your full name.', max_length=200)),
                ('is_active', models.BooleanField(default=True)),
                ('is_staff', models.BooleanField(default=False)),
                ('date_joined', models.DateField(auto_now_add=True)),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Assistant',
            fields=[
                ('created', model_utils.fields.AutoCreatedField(default=django.utils.timezone.now, editable=False, verbose_name='created')),
                ('modified', model_utils.fields.AutoLastModifiedField(default=django.utils.timezone.now, editable=False, verbose_name='modified')),
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('name', models.CharField(editable=False, max_length=255, unique=True)),
                ('status', models.IntegerField(choices=[(0, b'New')], default=0)),
                ('category', models.IntegerField(blank=True, choices=[(10, b'ACA'), (20, b'Other')], null=True)),
                ('kind', models.IntegerField(choices=[(10, b'Official'), (20, b'Practice'), (25, b'Guest'), (30, b'Composite')])),
            ],
        ),
        migrations.CreateModel(
            name='Award',
            fields=[
                ('created', model_utils.fields.AutoCreatedField(default=django.utils.timezone.now, editable=False, verbose_name='created')),
                ('modified', model_utils.fields.AutoLastModifiedField(default=django.utils.timezone.now, editable=False, verbose_name='modified')),
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('name', models.CharField(editable=False, max_length=255, unique=True)),
                ('status', django_fsm.FSMIntegerField(choices=[(0, b'New'), (10, b'Active'), (20, b'Inactive')], default=0)),
                ('kind', models.IntegerField(choices=[(1, b'Quartet'), (2, b'Chorus'), (10, b'Seniors'), (20, b'Collegiate'), (30, b'Youth')])),
                ('season', models.IntegerField(blank=True, choices=[(1, b'International'), (2, b'Midwinter'), (3, b'Fall'), (4, b'Spring'), (9, b'Video')], null=True)),
                ('size', models.IntegerField(blank=True, choices=[(100, b'Plateau 1'), (110, b'Plateau 2'), (120, b'Plateau 3'), (130, b'Plateau 4'), (140, b'Plateau A'), (150, b'Plateau AA'), (160, b'Plateau AAA'), (170, b'Plateau AAAA'), (180, b'Plateau B'), (190, b'Plateau I'), (200, b'Plateau II'), (210, b'Plateau III'), (220, b'Plateau IV'), (230, b'Small')], null=True)),
                ('size_range', django.contrib.postgres.fields.ranges.IntegerRangeField(blank=True, null=True)),
                ('scope', models.IntegerField(blank=True, choices=[(100, b'Plateau 1'), (110, b'Plateau 2'), (120, b'Plateau 3'), (130, b'Plateau 4'), (140, b'Plateau A'), (150, b'Plateau AA'), (160, b'Plateau AAA'), (170, b'Plateau AAAA'), (175, b'Plateau AAAAA')], null=True)),
                ('scope_range', django.contrib.postgres.fields.ranges.FloatRangeField(blank=True, null=True)),
                ('num_rounds', models.IntegerField()),
                ('is_primary', models.BooleanField(default=False)),
                ('is_improved', models.BooleanField(default=False)),
                ('is_novice', models.BooleanField(default=False)),
                ('is_manual', models.BooleanField(default=False)),
                ('idiom', models.CharField(blank=True, max_length=200, null=True)),
                ('cutoff', models.FloatField(blank=True, null=True)),
                ('minimum', models.FloatField(blank=True, null=True)),
                ('stix_num', models.IntegerField(blank=True, null=True)),
                ('stix_name', models.CharField(blank=True, default=b'', max_length=200)),
                ('level', models.IntegerField(choices=[(0, b'International'), (1, b'District'), (2, b'Division'), (3, b'Chapter')], editable=False)),
            ],
        ),
        migrations.CreateModel(
            name='Certification',
            fields=[
                ('created', model_utils.fields.AutoCreatedField(default=django.utils.timezone.now, editable=False, verbose_name='created')),
                ('modified', model_utils.fields.AutoLastModifiedField(default=django.utils.timezone.now, editable=False, verbose_name='modified')),
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('name', models.CharField(editable=False, max_length=255, unique=True)),
                ('category', models.IntegerField(choices=[(0, b'Admin'), (1, b'Music'), (2, b'Presentation'), (3, b'Singing')])),
                ('status', django_fsm.FSMIntegerField(choices=[(0, b'New'), (1, b'Active'), (2, b'Candidate'), (3, b'Inactive')], default=0)),
                ('date', django.contrib.postgres.fields.ranges.DateRangeField(blank=True, help_text=b'\n            The active dates of the resource.', null=True)),
            ],
        ),
        migrations.CreateModel(
            name='Chapter',
            fields=[
                ('created', model_utils.fields.AutoCreatedField(default=django.utils.timezone.now, editable=False, verbose_name='created')),
                ('modified', model_utils.fields.AutoLastModifiedField(default=django.utils.timezone.now, editable=False, verbose_name='modified')),
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('name', models.CharField(help_text=b'\n            The name of the resource.', max_length=200)),
                ('status', django_fsm.FSMIntegerField(choices=[(0, b'New'), (10, b'Active'), (20, b'Inactive'), (30, b'Affiliate'), (50, b'Duplicate')], default=0)),
                ('code', models.CharField(blank=True, help_text=b'\n            The chapter code.', max_length=200, null=True, unique=True)),
                ('bhs_id', models.IntegerField(blank=True, null=True, unique=True)),
                ('bhs_name', models.CharField(blank=True, max_length=255)),
                ('bhs_chapter_name', models.CharField(blank=True, max_length=255)),
                ('bhs_group_name', models.CharField(blank=True, max_length=255)),
                ('bhs_chapter_code', models.CharField(blank=True, max_length=255)),
                ('bhs_website', models.CharField(blank=True, max_length=255)),
                ('bhs_district', models.CharField(blank=True, max_length=255)),
                ('bhs_venue', models.CharField(blank=True, max_length=255)),
                ('bhs_address', models.CharField(blank=True, max_length=255)),
                ('bhs_city', models.CharField(blank=True, max_length=255)),
                ('bhs_state', models.CharField(blank=True, max_length=255)),
                ('bhs_zip', models.CharField(blank=True, max_length=255)),
                ('bhs_contact', models.CharField(blank=True, max_length=255)),
                ('bhs_phone', models.CharField(blank=True, max_length=255)),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Chart',
            fields=[
                ('created', model_utils.fields.AutoCreatedField(default=django.utils.timezone.now, editable=False, verbose_name='created')),
                ('modified', model_utils.fields.AutoLastModifiedField(default=django.utils.timezone.now, editable=False, verbose_name='modified')),
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('name', models.CharField(editable=False, max_length=255, unique=True)),
                ('status', django_fsm.FSMIntegerField(choices=[(0, b'New')], default=0)),
                ('is_generic', models.BooleanField(default=False)),
                ('is_parody', models.BooleanField(default=False)),
                ('is_medley', models.BooleanField(default=False)),
                ('title', models.CharField(max_length=200)),
                ('arranger', models.CharField(blank=True, max_length=200)),
                ('composer', models.CharField(blank=True, max_length=200)),
                ('lyricist', models.CharField(blank=True, max_length=200)),
                ('bhs_id', models.IntegerField(blank=True, null=True, unique=True)),
                ('bhs_marketplace', models.IntegerField(blank=True, null=True, unique=True)),
                ('bhs_published', models.DateField(blank=True, null=True)),
                ('bhs_arranger', models.CharField(blank=True, max_length=200)),
                ('bhs_fee', models.FloatField(blank=True, null=True)),
                ('bhs_songname', models.CharField(blank=True, max_length=200)),
                ('bhs_copyright_date', models.CharField(blank=True, max_length=200)),
                ('bhs_copyright_owner', models.CharField(blank=True, max_length=200)),
                ('bhs_difficulty', models.IntegerField(blank=True, choices=[(1, b'Very Easy'), (2, b'Easy'), (3, b'Medium'), (4, b'Hard'), (5, b'Very Hard')], null=True)),
                ('bhs_tempo', models.IntegerField(blank=True, choices=[(1, b'Ballad'), (2, b'Uptune'), (3, b'Mixed')], null=True)),
                ('bhs_medley', models.BooleanField(default=False)),
            ],
        ),
        migrations.CreateModel(
            name='Contest',
            fields=[
                ('created', model_utils.fields.AutoCreatedField(default=django.utils.timezone.now, editable=False, verbose_name='created')),
                ('modified', model_utils.fields.AutoLastModifiedField(default=django.utils.timezone.now, editable=False, verbose_name='modified')),
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('name', models.CharField(editable=False, max_length=200)),
                ('status', django_fsm.FSMIntegerField(choices=[(0, b'New'), (20, b'Started'), (30, b'Finished'), (40, b'Drafted'), (45, b'Published'), (50, b'Final')], default=0)),
                ('cycle', models.IntegerField(choices=[(2017, 2017), (2016, 2016), (2015, 2015), (2014, 2014), (2013, 2013), (2012, 2012), (2011, 2011), (2010, 2010), (2009, 2009), (2008, 2008), (2007, 2007), (2006, 2006), (2005, 2005), (2004, 2004), (2003, 2003), (2002, 2002), (2001, 2001), (2000, 2000), (1999, 1999), (1998, 1998), (1997, 1997), (1996, 1996), (1995, 1995), (1994, 1994), (1993, 1993), (1992, 1992), (1991, 1991), (1990, 1990), (1989, 1989), (1988, 1988), (1987, 1987), (1986, 1986), (1985, 1985), (1984, 1984), (1983, 1983), (1982, 1982), (1981, 1981), (1980, 1980), (1979, 1979), (1978, 1978), (1977, 1977), (1976, 1976), (1975, 1975), (1974, 1974), (1973, 1973), (1972, 1972), (1971, 1971), (1970, 1970), (1969, 1969), (1968, 1968), (1967, 1967), (1966, 1966), (1965, 1965), (1964, 1964), (1963, 1963), (1962, 1962), (1961, 1961), (1960, 1960), (1959, 1959), (1958, 1958), (1957, 1957), (1956, 1956), (1955, 1955), (1954, 1954), (1953, 1953), (1952, 1952), (1951, 1951), (1950, 1950), (1949, 1949), (1948, 1948), (1947, 1947), (1946, 1946), (1945, 1945), (1944, 1944), (1943, 1943), (1942, 1942), (1941, 1941), (1940, 1940), (1939, 1939)], editable=False)),
                ('is_qualifier', models.BooleanField(default=False)),
                ('stix_num', models.IntegerField(blank=True, null=True)),
                ('stix_name', models.CharField(blank=True, default=b'', max_length=255)),
                ('award', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='contests', to='api.Award')),
            ],
        ),
        migrations.CreateModel(
            name='Contestant',
            fields=[
                ('created', model_utils.fields.AutoCreatedField(default=django.utils.timezone.now, editable=False, verbose_name='created')),
                ('modified', model_utils.fields.AutoLastModifiedField(default=django.utils.timezone.now, editable=False, verbose_name='modified')),
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('name', models.CharField(editable=False, max_length=255, unique=True)),
                ('status', django_fsm.FSMIntegerField(choices=[(0, b'New'), (10, b'Eligible'), (20, b'Ineligible'), (30, b'Did Not Qualify'), (50, b'Qualified'), (60, b'Ranked'), (90, b'Final')], default=0)),
                ('rank', models.IntegerField(blank=True, editable=False, help_text=b'\n            The final ranking relative to this award.', null=True)),
                ('mus_points', models.IntegerField(blank=True, editable=False, null=True)),
                ('prs_points', models.IntegerField(blank=True, editable=False, null=True)),
                ('sng_points', models.IntegerField(blank=True, editable=False, null=True)),
                ('total_points', models.IntegerField(blank=True, editable=False, null=True)),
                ('mus_score', models.FloatField(blank=True, editable=False, null=True)),
                ('prs_score', models.FloatField(blank=True, editable=False, null=True)),
                ('sng_score', models.FloatField(blank=True, editable=False, null=True)),
                ('total_score', models.FloatField(blank=True, editable=False, null=True)),
                ('contest', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='contestants', to='api.Contest')),
            ],
        ),
        migrations.CreateModel(
            name='Convention',
            fields=[
                ('created', model_utils.fields.AutoCreatedField(default=django.utils.timezone.now, editable=False, verbose_name='created')),
                ('modified', model_utils.fields.AutoLastModifiedField(default=django.utils.timezone.now, editable=False, verbose_name='modified')),
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('name', models.CharField(editable=False, max_length=255)),
                ('status', django_fsm.FSMIntegerField(choices=[(0, b'New'), (10, b'Scheduled'), (15, b'Upcoming'), (20, b'Started'), (30, b'Finished'), (40, b'Recent'), (50, b'Final')], default=0)),
                ('kind', models.IntegerField(blank=True, choices=[(10, b'International'), (20, b'District'), (30, b'Division'), (40, b'District and Division'), (200, b'EVG Division I'), (210, b'EVG Division II'), (220, b'EVG Division III'), (230, b'EVG Division IV'), (240, b'EVG Division V'), (250, b'FWD Arizona Division'), (260, b'FWD NE/NW Divisions'), (270, b'FWD SE/SW Divisions'), (280, b'LOL Division One/Packerland Divisions'), (290, b'LOL Northern Plains Division'), (300, b'LOL 10,000 Lakes and Southwest Divisions'), (322, b'MAD Northern Division'), (324, b'MAD Central Division'), (330, b'MAD Southern Division'), (340, b'NED Sunrise Division'), (342, b'NED Western Regional'), (344, b'NED Eastern Regional'), (350, b'SWD NE/NW/SE/SW Divisions')], null=True)),
                ('season', models.IntegerField(choices=[(1, b'International'), (2, b'Midwinter'), (3, b'Fall'), (4, b'Spring'), (9, b'Video')])),
                ('risers', django.contrib.postgres.fields.ArrayField(base_field=models.IntegerField(blank=True, null=True), blank=True, null=True, size=None)),
                ('division', models.IntegerField(blank=True, choices=[(200, b'EVG Division I'), (210, b'EVG Division II'), (220, b'EVG Division III'), (230, b'EVG Division IV'), (240, b'EVG Division V'), (250, b'FWD Arizona Division'), (260, b'FWD NE/NW Divisions'), (270, b'FWD SE/SW Divisions'), (280, b'LOL Division One/Packerland Divisions'), (290, b'LOL Northern Plains Division'), (300, b'LOL 10,000 Lakes and Southwest Divisions'), (322, b'MAD Northern Division'), (324, b'MAD Central Division'), (330, b'MAD Southern Division'), (340, b'NED Sunrise Division'), (342, b'NED Western Regional'), (344, b'NED Eastern Regional'), (350, b'SWD NE/NW/SE/SW Divisions')], help_text=b'\n            Detail if division/regional convention.', null=True)),
                ('year', models.IntegerField(blank=True, choices=[(2017, 2017), (2016, 2016), (2015, 2015), (2014, 2014), (2013, 2013), (2012, 2012), (2011, 2011), (2010, 2010), (2009, 2009), (2008, 2008), (2007, 2007), (2006, 2006), (2005, 2005), (2004, 2004), (2003, 2003), (2002, 2002), (2001, 2001), (2000, 2000), (1999, 1999), (1998, 1998), (1997, 1997), (1996, 1996), (1995, 1995), (1994, 1994), (1993, 1993), (1992, 1992), (1991, 1991), (1990, 1990), (1989, 1989), (1988, 1988), (1987, 1987), (1986, 1986), (1985, 1985), (1984, 1984), (1983, 1983), (1982, 1982), (1981, 1981), (1980, 1980), (1979, 1979), (1978, 1978), (1977, 1977), (1976, 1976), (1975, 1975), (1974, 1974), (1973, 1973), (1972, 1972), (1971, 1971), (1970, 1970), (1969, 1969), (1968, 1968), (1967, 1967), (1966, 1966), (1965, 1965), (1964, 1964), (1963, 1963), (1962, 1962), (1961, 1961), (1960, 1960), (1959, 1959), (1958, 1958), (1957, 1957), (1956, 1956), (1955, 1955), (1954, 1954), (1953, 1953), (1952, 1952), (1951, 1951), (1950, 1950), (1949, 1949), (1948, 1948), (1947, 1947), (1946, 1946), (1945, 1945), (1944, 1944), (1943, 1943), (1942, 1942), (1941, 1941), (1940, 1940), (1939, 1939)], null=True)),
                ('date', django.contrib.postgres.fields.ranges.DateTimeRangeField(blank=True, help_text=b'\n            The scheduled time frame for the convention.', null=True)),
                ('is_prelims', models.BooleanField(default=False)),
                ('bhs_id', models.IntegerField(blank=True, null=True)),
                ('level', models.IntegerField(blank=True, choices=[(0, b'International'), (1, b'District'), (2, b'Division'), (3, b'Chapter')], editable=False, null=True)),
                ('stix_name', models.CharField(blank=True, max_length=200, null=True)),
                ('stix_div', models.CharField(blank=True, max_length=200, null=True)),
                ('stix_file', models.FileField(blank=True, help_text=b'\n            The bbstix file.', null=True, upload_to=apps.api.models.generate_image_filename)),
            ],
        ),
        migrations.CreateModel(
            name='Group',
            fields=[
                ('created', model_utils.fields.AutoCreatedField(default=django.utils.timezone.now, editable=False, verbose_name='created')),
                ('modified', model_utils.fields.AutoLastModifiedField(default=django.utils.timezone.now, editable=False, verbose_name='modified')),
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('name', models.CharField(error_messages={b'unique': b'The name must be unique.  Add middle initials, suffixes, years, or other identifiers to make the name unique.'}, help_text=b'\n            The name of the resource.', max_length=200)),
                ('date', django.contrib.postgres.fields.ranges.DateRangeField(blank=True, help_text=b'\n            The active dates of the resource.', null=True)),
                ('location', models.CharField(blank=True, default=b'', help_text=b'\n            The geographical location of the resource.', max_length=200)),
                ('website', models.URLField(blank=True, default=b'', help_text=b'\n            The website URL of the resource.')),
                ('facebook', models.URLField(blank=True, default=b'', help_text=b'\n            The facebook URL of the resource.')),
                ('twitter', models.CharField(blank=True, default=b'', help_text=b'\n            The twitter handle (in form @twitter_handle) of the resource.', max_length=16, validators=[django.core.validators.RegexValidator(message=b'\n                    Must be a single Twitter handle\n                    in the form `@twitter_handle`.\n                ', regex=b'@([A-Za-z0-9_]+)')])),
                ('email', models.EmailField(blank=True, default=b'', help_text=b'\n            The contact email of the resource.', max_length=254)),
                ('phone', phonenumber_field.modelfields.PhoneNumberField(blank=True, default=b'', help_text=b'\n            The phone number of the resource.  Include country code.', max_length=128)),
                ('picture', models.ImageField(blank=True, help_text=b'\n            The picture/logo of the resource.', null=True, upload_to=apps.api.models.generate_image_filename)),
                ('description', models.TextField(blank=True, help_text=b'\n            A description/bio of the resource.  Max 1000 characters.', max_length=1000)),
                ('notes', models.TextField(blank=True, help_text=b'\n            Notes (for internal use only).')),
                ('status', models.IntegerField(choices=[(0, b'New'), (10, b'Active'), (20, b'Inactive'), (50, b'Duplicate')], default=0)),
                ('kind', models.IntegerField(choices=[(1, b'Quartet'), (2, b'Chorus')], help_text=b'\n            The kind of group; choices are Quartet or Chorus.')),
                ('age', models.IntegerField(blank=True, choices=[(10, b'Seniors'), (20, b'Collegiate'), (30, b'Youth')], null=True)),
                ('is_novice', models.BooleanField(default=False)),
                ('chap_name', models.CharField(blank=True, editable=False, max_length=255, null=True)),
                ('bhs_id', models.IntegerField(blank=True, null=True, unique=True)),
                ('bhs_name', models.CharField(blank=True, max_length=255)),
                ('bhs_chapter_name', models.CharField(blank=True, max_length=255)),
                ('bhs_chapter_code', models.CharField(blank=True, max_length=255)),
                ('bhs_website', models.CharField(blank=True, max_length=255)),
                ('bhs_district', models.CharField(blank=True, max_length=255)),
                ('bhs_location', models.CharField(blank=True, max_length=255)),
                ('bhs_contact', models.CharField(blank=True, max_length=255)),
                ('bhs_phone', models.CharField(blank=True, max_length=255)),
                ('bhs_expiration', models.CharField(blank=True, max_length=255)),
                ('chapter', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='groups', to='api.Chapter')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Judge',
            fields=[
                ('created', model_utils.fields.AutoCreatedField(default=django.utils.timezone.now, editable=False, verbose_name='created')),
                ('modified', model_utils.fields.AutoLastModifiedField(default=django.utils.timezone.now, editable=False, verbose_name='modified')),
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('name', models.CharField(editable=False, max_length=255, unique=True)),
                ('status', models.IntegerField(choices=[(0, b'New'), (10, b'Scheduled'), (20, b'Confirmed'), (30, b'Final')], default=0)),
                ('category', models.IntegerField(choices=[(0, b'Admin'), (1, b'Music'), (2, b'Presentation'), (3, b'Singing')])),
                ('kind', models.IntegerField(choices=[(10, b'Official'), (12, b'CA'), (14, b'ACA'), (20, b'Practice'), (30, b'Composite')])),
                ('slot', models.IntegerField(blank=True, null=True)),
                ('bhs_panel_id', models.IntegerField(blank=True, null=True)),
                ('certification', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='judges', to='api.Certification')),
            ],
        ),
        migrations.CreateModel(
            name='Member',
            fields=[
                ('created', model_utils.fields.AutoCreatedField(default=django.utils.timezone.now, editable=False, verbose_name='created')),
                ('modified', model_utils.fields.AutoLastModifiedField(default=django.utils.timezone.now, editable=False, verbose_name='modified')),
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('name', models.CharField(editable=False, max_length=255, unique=True)),
                ('status', models.IntegerField(choices=[(0, b'New'), (10, b'Active'), (20, b'Inactive')], default=0)),
                ('chapter', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='members', to='api.Chapter')),
            ],
        ),
        migrations.CreateModel(
            name='Organization',
            fields=[
                ('created', model_utils.fields.AutoCreatedField(default=django.utils.timezone.now, editable=False, verbose_name='created')),
                ('modified', model_utils.fields.AutoLastModifiedField(default=django.utils.timezone.now, editable=False, verbose_name='modified')),
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('name', models.CharField(help_text=b'\n            The name of the resource.', max_length=200)),
                ('status', django_fsm.FSMIntegerField(choices=[(0, b'New'), (10, b'Active'), (20, b'Inactive')], default=0)),
                ('level', models.IntegerField(blank=True, choices=[(0, b'International'), (1, b'District/Affiliates'), (2, b'Division'), (3, b'Chapter')], null=True)),
                ('kind', models.IntegerField(blank=True, choices=[(b'International', [(0, b'International'), (50, b'Harmony Incorporated')]), (b'District', [(10, b'District'), (20, b'Noncompetitive'), (30, b'Affiliate')]), (b'Division', [(40, b'Division')]), (b'Chapter', [(60, b'Chapter')])], help_text=b'\n            The kind of organization.', null=True)),
                ('date', django.contrib.postgres.fields.ranges.DateRangeField(blank=True, help_text=b'\n            The active dates of the resource.', null=True)),
                ('location', models.CharField(blank=True, help_text=b'\n            The geographical location of the resource.', max_length=200)),
                ('website', models.URLField(blank=True, help_text=b'\n            The website URL of the resource.')),
                ('facebook', models.URLField(blank=True, help_text=b'\n            The facebook URL of the resource.')),
                ('twitter', models.CharField(blank=True, help_text=b'\n            The twitter handle (in form @twitter_handle) of the resource.', max_length=16, validators=[django.core.validators.RegexValidator(message=b'\n                    Must be a single Twitter handle\n                    in the form `@twitter_handle`.\n                ', regex=b'@([A-Za-z0-9_]+)')])),
                ('email', models.EmailField(blank=True, help_text=b'\n            The contact email of the resource.', max_length=254)),
                ('phone', phonenumber_field.modelfields.PhoneNumberField(blank=True, help_text=b'\n            The phone number of the resource.  Include country code.', max_length=128, null=True)),
                ('picture', models.ImageField(blank=True, help_text=b'\n            The picture/logo of the resource.', null=True, upload_to=apps.api.models.generate_image_filename)),
                ('description', models.TextField(blank=True, help_text=b'\n            A description/bio of the resource.  Max 1000 characters.', max_length=1000)),
                ('notes', models.TextField(blank=True, help_text=b'\n            Notes (for internal use only).')),
                ('short_name', models.CharField(blank=True, help_text=b'\n            A short-form name for the resource.', max_length=200)),
                ('long_name', models.CharField(blank=True, help_text=b'\n            A long-form name for the resource.', max_length=200)),
                ('code', models.CharField(blank=True, help_text=b'\n            The chapter code.', max_length=200, null=True)),
                ('bhs_id', models.IntegerField(blank=True, null=True, unique=True)),
                ('bhs_name', models.CharField(blank=True, max_length=255)),
                ('bhs_chapter_name', models.CharField(blank=True, max_length=255)),
                ('bhs_group_name', models.CharField(blank=True, max_length=255)),
                ('bhs_chapter_code', models.CharField(blank=True, max_length=255)),
                ('bhs_website', models.CharField(blank=True, max_length=255)),
                ('bhs_district', models.CharField(blank=True, max_length=255)),
                ('bhs_venue', models.CharField(blank=True, max_length=255)),
                ('bhs_address', models.CharField(blank=True, max_length=255)),
                ('bhs_city', models.CharField(blank=True, max_length=255)),
                ('bhs_state', models.CharField(blank=True, max_length=255)),
                ('bhs_zip', models.CharField(blank=True, max_length=255)),
                ('bhs_contact', models.CharField(blank=True, max_length=255)),
                ('bhs_phone', models.CharField(blank=True, max_length=255)),
                ('lft', models.PositiveIntegerField(db_index=True, editable=False)),
                ('rght', models.PositiveIntegerField(db_index=True, editable=False)),
                ('tree_id', models.PositiveIntegerField(db_index=True, editable=False)),
                ('parent', mptt.fields.TreeForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='children', to='api.Organization')),
            ],
            options={
                'abstract': False,
            },
            managers=[
                ('_default_manager', django.db.models.manager.Manager()),
            ],
        ),
        migrations.CreateModel(
            name='Participant',
            fields=[
                ('created', model_utils.fields.AutoCreatedField(default=django.utils.timezone.now, editable=False, verbose_name='created')),
                ('modified', model_utils.fields.AutoLastModifiedField(default=django.utils.timezone.now, editable=False, verbose_name='modified')),
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('name', models.CharField(editable=False, max_length=255, unique=True)),
                ('status', django_fsm.FSMIntegerField(choices=[(0, b'New')], default=0)),
                ('is_qualifier', models.BooleanField(default=False)),
                ('convention', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='participants', to='api.Convention')),
                ('organization', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='participants', to='api.Organization')),
            ],
        ),
        migrations.CreateModel(
            name='Performance',
            fields=[
                ('created', model_utils.fields.AutoCreatedField(default=django.utils.timezone.now, editable=False, verbose_name='created')),
                ('modified', model_utils.fields.AutoLastModifiedField(default=django.utils.timezone.now, editable=False, verbose_name='modified')),
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('name', models.CharField(editable=False, max_length=255, unique=True)),
                ('status', django_fsm.FSMIntegerField(choices=[(0, b'New'), (10, b'Started'), (20, b'Finished'), (30, b'Completed'), (50, b'Confirmed'), (90, b'Final')], default=0)),
                ('slot', models.IntegerField(blank=True, null=True)),
                ('scheduled', django.contrib.postgres.fields.ranges.DateTimeRangeField(blank=True, help_text=b'\n            The scheduled performance window.', null=True)),
                ('actual', django.contrib.postgres.fields.ranges.DateTimeRangeField(blank=True, help_text=b'\n            The actual performance window.', null=True)),
                ('rank', models.IntegerField(blank=True, editable=False, help_text=b'\n            The final ranking relative to this round.', null=True)),
                ('mus_points', models.IntegerField(blank=True, editable=False, null=True)),
                ('prs_points', models.IntegerField(blank=True, editable=False, null=True)),
                ('sng_points', models.IntegerField(blank=True, editable=False, null=True)),
                ('total_points', models.IntegerField(blank=True, editable=False, null=True)),
                ('mus_score', models.FloatField(blank=True, editable=False, null=True)),
                ('prs_score', models.FloatField(blank=True, editable=False, null=True)),
                ('sng_score', models.FloatField(blank=True, editable=False, null=True)),
                ('total_score', models.FloatField(blank=True, editable=False, null=True)),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Performer',
            fields=[
                ('created', model_utils.fields.AutoCreatedField(default=django.utils.timezone.now, editable=False, verbose_name='created')),
                ('modified', model_utils.fields.AutoLastModifiedField(default=django.utils.timezone.now, editable=False, verbose_name='modified')),
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('name', models.CharField(editable=False, max_length=255, unique=True)),
                ('status', django_fsm.FSMIntegerField(choices=[(0, b'New'), (10, b'Qualified'), (20, b'Accepted'), (30, b'Declined'), (40, b'Dropped'), (45, b'Evaluation'), (50, b'Official'), (55, b'Disqualified'), (60, b'Finished'), (90, b'Final')], default=0)),
                ('picture', models.ImageField(blank=True, help_text=b'\n            The on-stage session picture (as opposed to the "official" photo).', null=True, upload_to=apps.api.models.generate_image_filename)),
                ('soa', models.IntegerField(blank=True, help_text=b'\n            Starting Order of Appearance.', null=True)),
                ('men', models.IntegerField(blank=True, help_text=b'\n            The number of men on stage.', null=True)),
                ('risers', models.IntegerField(blank=True, help_text=b'\n            The number of risers select.', null=True)),
                ('is_evaluation', models.BooleanField(default=True, help_text=b'\n            Performer requests evaluation.')),
                ('bhs_id', models.IntegerField(blank=True, null=True)),
                ('seed', models.IntegerField(blank=True, editable=False, help_text=b'\n            The incoming rank based on prelim score.', null=True)),
                ('prelim', models.FloatField(blank=True, editable=False, help_text=b'\n            The incoming prelim score.', null=True)),
                ('rank', models.IntegerField(blank=True, editable=False, null=True)),
                ('mus_points', models.IntegerField(blank=True, editable=False, null=True)),
                ('prs_points', models.IntegerField(blank=True, editable=False, null=True)),
                ('sng_points', models.IntegerField(blank=True, editable=False, null=True)),
                ('total_points', models.IntegerField(blank=True, editable=False, null=True)),
                ('mus_score', models.FloatField(blank=True, editable=False, null=True)),
                ('prs_score', models.FloatField(blank=True, editable=False, null=True)),
                ('sng_score', models.FloatField(blank=True, editable=False, null=True)),
                ('total_score', models.FloatField(blank=True, editable=False, null=True)),
            ],
        ),
        migrations.CreateModel(
            name='Person',
            fields=[
                ('created', model_utils.fields.AutoCreatedField(default=django.utils.timezone.now, editable=False, verbose_name='created')),
                ('modified', model_utils.fields.AutoLastModifiedField(default=django.utils.timezone.now, editable=False, verbose_name='modified')),
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('name', models.CharField(help_text=b'\n            The name of the resource.', max_length=200)),
                ('status', models.IntegerField(choices=[(0, b'New'), (10, b'Active'), (20, b'Inactive'), (30, b'Retired'), (40, b'Deceased'), (50, b'Stix Issue'), (60, b'Possible Duplicate')], default=0)),
                ('date', django.contrib.postgres.fields.ranges.DateRangeField(blank=True, help_text=b'\n            The active dates of the resource.', null=True)),
                ('location', models.CharField(blank=True, default=b'', help_text=b'\n            The geographical location of the resource.', max_length=200)),
                ('website', models.URLField(blank=True, default=b'', help_text=b'\n            The website URL of the resource.')),
                ('facebook', models.URLField(blank=True, default=b'', help_text=b'\n            The facebook URL of the resource.')),
                ('twitter', models.CharField(blank=True, default=b'', help_text=b'\n            The twitter handle (in form @twitter_handle) of the resource.', max_length=16, validators=[django.core.validators.RegexValidator(message=b'\n                    Must be a single Twitter handle\n                    in the form `@twitter_handle`.\n                ', regex=b'@([A-Za-z0-9_]+)')])),
                ('email', models.EmailField(blank=True, default=b'', help_text=b'\n            The contact email of the resource.', max_length=254)),
                ('phone', phonenumber_field.modelfields.PhoneNumberField(blank=True, default=b'', help_text=b'\n            The phone number of the resource.  Include country code.', max_length=128)),
                ('picture', models.ImageField(blank=True, help_text=b'\n            The picture/logo of the resource.', null=True, upload_to=apps.api.models.generate_image_filename)),
                ('description', models.TextField(blank=True, help_text=b'\n            A description/bio of the resource.  Max 1000 characters.', max_length=1000)),
                ('notes', models.TextField(blank=True, help_text=b'\n            Notes (for internal use only).')),
                ('birth_date', models.DateField(blank=True, null=True)),
                ('bhs_id', models.IntegerField(blank=True, null=True, unique=True)),
                ('common_name', models.CharField(blank=True, default=b'', editable=False, max_length=255)),
                ('id_name', models.CharField(blank=True, editable=False, max_length=255, null=True)),
                ('full_name', models.CharField(blank=True, default=b'', editable=False, max_length=255)),
                ('formal_name', models.CharField(blank=True, default=b'', editable=False, max_length=255)),
                ('bhs_name', models.CharField(blank=True, max_length=255)),
                ('bhs_city', models.CharField(blank=True, max_length=255)),
                ('bhs_state', models.CharField(blank=True, max_length=255)),
                ('bhs_phone', models.CharField(blank=True, max_length=255)),
                ('bhs_email', models.EmailField(blank=True, max_length=254)),
                ('chapter', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='api.Chapter')),
                ('organization', mptt.fields.TreeForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='api.Organization')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Role',
            fields=[
                ('created', model_utils.fields.AutoCreatedField(default=django.utils.timezone.now, editable=False, verbose_name='created')),
                ('modified', model_utils.fields.AutoLastModifiedField(default=django.utils.timezone.now, editable=False, verbose_name='modified')),
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('name', models.CharField(editable=False, max_length=255)),
                ('status', django_fsm.FSMIntegerField(choices=[(0, b'New'), (10, b'Active'), (20, b'Inactive')], default=0)),
                ('part', models.IntegerField(choices=[(1, b'Tenor'), (2, b'Lead'), (3, b'Baritone'), (4, b'Bass'), (5, b'Director')])),
                ('date', django.contrib.postgres.fields.ranges.DateRangeField(blank=True, help_text=b'\n            Active Dates', null=True)),
                ('bhs_id', models.IntegerField(blank=True, null=True)),
                ('bhs_file', models.FileField(blank=True, null=True, upload_to=apps.api.models.generate_image_filename)),
                ('group', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='roles', to='api.Group')),
                ('person', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='roles', to='api.Person')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Round',
            fields=[
                ('created', model_utils.fields.AutoCreatedField(default=django.utils.timezone.now, editable=False, verbose_name='created')),
                ('modified', model_utils.fields.AutoLastModifiedField(default=django.utils.timezone.now, editable=False, verbose_name='modified')),
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('name', models.CharField(editable=False, max_length=255, unique=True)),
                ('status', django_fsm.FSMIntegerField(choices=[(0, b'New'), (10, b'Built'), (15, b'Ready'), (20, b'Started'), (25, b'Finished'), (28, b'Ranked'), (30, b'Final')], default=0)),
                ('kind', models.IntegerField(choices=[(1, b'Finals'), (2, b'Semi-Finals'), (3, b'Quarter-Finals')])),
                ('num', models.IntegerField()),
                ('date', django.contrib.postgres.fields.ranges.DateTimeRangeField(blank=True, help_text=b'\n            The active dates of the resource.', null=True)),
                ('stix_name', models.CharField(blank=True, default=b'', max_length=255)),
                ('mt', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='mic_tester', to='api.Group')),
            ],
        ),
        migrations.CreateModel(
            name='Score',
            fields=[
                ('created', model_utils.fields.AutoCreatedField(default=django.utils.timezone.now, editable=False, verbose_name='created')),
                ('modified', model_utils.fields.AutoLastModifiedField(default=django.utils.timezone.now, editable=False, verbose_name='modified')),
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('name', models.CharField(editable=False, max_length=255, unique=True)),
                ('status', django_fsm.FSMIntegerField(choices=[(0, b'New'), (20, b'Entered'), (30, b'Flagged'), (35, b'Validated'), (40, b'Confirmed'), (50, b'Final')], default=0)),
                ('category', models.IntegerField(choices=[(1, b'Music'), (2, b'Presentation'), (3, b'Singing')])),
                ('kind', models.IntegerField(choices=[(10, b'Official'), (20, b'Practice'), (30, b'Composite')])),
                ('dixon_test', models.NullBooleanField()),
                ('asterisk_test', models.NullBooleanField()),
                ('points', models.IntegerField(blank=True, help_text=b'\n            The number of points (0-100)', null=True, validators=[django.core.validators.MaxValueValidator(100, message=b'Points must be between 0 - 100'), django.core.validators.MinValueValidator(0, message=b'Points must be between 0 - 100')])),
                ('violation', django_fsm.FSMIntegerField(blank=True, choices=[(10, b'General')], null=True)),
                ('penalty', models.IntegerField(blank=True, help_text=b'\n            The penalty (0-100)', null=True, validators=[django.core.validators.MaxValueValidator(100, message=b'Points must be between 0 - 100'), django.core.validators.MinValueValidator(0, message=b'Points must be between 0 - 100')])),
                ('judge', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='scores', to='api.Judge')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Session',
            fields=[
                ('created', model_utils.fields.AutoCreatedField(default=django.utils.timezone.now, editable=False, verbose_name='created')),
                ('modified', model_utils.fields.AutoLastModifiedField(default=django.utils.timezone.now, editable=False, verbose_name='modified')),
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('name', models.CharField(editable=False, max_length=255, unique=True)),
                ('status', django_fsm.FSMIntegerField(choices=[(0, b'New'), (4, b'Opened'), (8, b'Closed'), (10, b'Validated'), (20, b'Started'), (30, b'Finished'), (40, b'Drafted'), (45, b'Published'), (50, b'Final')], default=0)),
                ('kind', models.IntegerField(choices=[(1, b'Quartet'), (2, b'Chorus'), (10, b'Seniors'), (20, b'Collegiate'), (30, b'Youth')], help_text=b'\n            The kind of session.  Generally this will be either quartet or chorus, with the exception being International and Midwinter which hold exclusive Collegiate and Senior sessions respectively.')),
                ('date', django.contrib.postgres.fields.ranges.DateTimeRangeField(blank=True, help_text=b'\n            The active dates of the session.', null=True)),
                ('cutoff', models.IntegerField(blank=True, null=True)),
                ('scoresheet_pdf', models.FileField(blank=True, help_text=b'\n            The historical PDF OSS.', null=True, upload_to=apps.api.models.generate_image_filename)),
                ('entry_form', models.FileField(blank=True, help_text=b'\n            The cj20 entry form.', null=True, upload_to=apps.api.models.generate_image_filename)),
                ('song_list', models.FileField(blank=True, help_text=b'\n            The cj20 song list.', null=True, upload_to=apps.api.models.generate_image_filename)),
                ('cursor', models.CharField(blank=True, max_length=255, null=True)),
                ('aca', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='sessions_aca', to='api.Certification')),
                ('administrator', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='sessions_ca', to='api.Person')),
                ('ca', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='sessions_ca', to='api.Certification')),
                ('convention', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='sessions', to='api.Convention')),
            ],
        ),
        migrations.CreateModel(
            name='Song',
            fields=[
                ('created', model_utils.fields.AutoCreatedField(default=django.utils.timezone.now, editable=False, verbose_name='created')),
                ('modified', model_utils.fields.AutoLastModifiedField(default=django.utils.timezone.now, editable=False, verbose_name='modified')),
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('name', models.CharField(editable=False, max_length=255, unique=True)),
                ('status', django_fsm.FSMIntegerField(choices=[(0, b'New'), (40, b'Confirmed'), (50, b'Final')], default=0)),
                ('order', models.IntegerField(choices=[(1, b'First'), (2, b'Second')])),
                ('is_parody', models.BooleanField(default=False)),
                ('mus_points', models.IntegerField(blank=True, editable=False, null=True)),
                ('prs_points', models.IntegerField(blank=True, editable=False, null=True)),
                ('sng_points', models.IntegerField(blank=True, editable=False, null=True)),
                ('total_points', models.IntegerField(blank=True, editable=False, null=True)),
                ('mus_score', models.FloatField(blank=True, editable=False, null=True)),
                ('prs_score', models.FloatField(blank=True, editable=False, null=True)),
                ('sng_score', models.FloatField(blank=True, editable=False, null=True)),
                ('total_score', models.FloatField(blank=True, editable=False, null=True)),
                ('chart', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='songs', to='api.Chart')),
                ('performance', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='songs', to='api.Performance')),
            ],
        ),
        migrations.CreateModel(
            name='Submission',
            fields=[
                ('created', model_utils.fields.AutoCreatedField(default=django.utils.timezone.now, editable=False, verbose_name='created')),
                ('modified', model_utils.fields.AutoLastModifiedField(default=django.utils.timezone.now, editable=False, verbose_name='modified')),
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('name', models.CharField(editable=False, max_length=255, unique=True)),
                ('status', django_fsm.FSMIntegerField(choices=[(0, b'New')], default=0)),
                ('chart', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='submissions', to='api.Chart')),
                ('performer', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='submissions', to='api.Performer')),
            ],
        ),
        migrations.CreateModel(
            name='Venue',
            fields=[
                ('created', model_utils.fields.AutoCreatedField(default=django.utils.timezone.now, editable=False, verbose_name='created')),
                ('modified', model_utils.fields.AutoLastModifiedField(default=django.utils.timezone.now, editable=False, verbose_name='modified')),
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('name', models.CharField(editable=False, max_length=200, unique=True)),
                ('location', models.CharField(max_length=255)),
                ('city', models.CharField(max_length=255)),
                ('state', models.CharField(max_length=255)),
                ('airport', models.CharField(blank=True, max_length=3, null=True)),
                ('timezone', timezone_field.fields.TimeZoneField(default=b'US/Pacific', help_text=b'\n            The local timezone of the venue.')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.AddField(
            model_name='song',
            name='submission',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='songs', to='api.Submission'),
        ),
        migrations.AddField(
            model_name='score',
            name='song',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='scores', to='api.Song'),
        ),
        migrations.AddField(
            model_name='round',
            name='session',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='rounds', to='api.Session'),
        ),
        migrations.AddField(
            model_name='performer',
            name='baritone',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='performers_baritone', to='api.Role'),
        ),
        migrations.AddField(
            model_name='performer',
            name='bass',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='performers_bass', to='api.Role'),
        ),
        migrations.AddField(
            model_name='performer',
            name='codirector',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='performers_codirector', to='api.Role'),
        ),
        migrations.AddField(
            model_name='performer',
            name='director',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='performers_director', to='api.Role'),
        ),
        migrations.AddField(
            model_name='performer',
            name='group',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='performers', to='api.Group'),
        ),
        migrations.AddField(
            model_name='performer',
            name='lead',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='performers_lead', to='api.Role'),
        ),
        migrations.AddField(
            model_name='performer',
            name='representing',
            field=mptt.fields.TreeForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='performers', to='api.Organization'),
        ),
        migrations.AddField(
            model_name='performer',
            name='session',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='performers', to='api.Session'),
        ),
        migrations.AddField(
            model_name='performer',
            name='tenor',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='performers_tenor', to='api.Role'),
        ),
        migrations.AddField(
            model_name='performance',
            name='performer',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='performances', to='api.Performer'),
        ),
        migrations.AddField(
            model_name='performance',
            name='round',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='performances', to='api.Round'),
        ),
        migrations.AddField(
            model_name='organization',
            name='representative',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='organizations', to='api.Person'),
        ),
        migrations.AddField(
            model_name='member',
            name='person',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='members', to='api.Person'),
        ),
        migrations.AddField(
            model_name='judge',
            name='organization',
            field=mptt.fields.TreeForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='judges', to='api.Organization'),
        ),
        migrations.AddField(
            model_name='judge',
            name='person',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='panels', to='api.Person'),
        ),
        migrations.AddField(
            model_name='judge',
            name='session',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='judges', to='api.Session'),
        ),
        migrations.AddField(
            model_name='group',
            name='organization',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='groups', to='api.Organization'),
        ),
        migrations.AddField(
            model_name='convention',
            name='drcj',
            field=models.ForeignKey(blank=True, help_text=b'\n            The person managing the convention.', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='conventions', to='api.Person'),
        ),
        migrations.AddField(
            model_name='convention',
            name='organization',
            field=mptt.fields.TreeForeignKey(blank=True, help_text=b'\n            The organization hosting the convention.', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='conventions', to='api.Organization'),
        ),
        migrations.AddField(
            model_name='convention',
            name='venue',
            field=models.ForeignKey(blank=True, help_text=b'\n            The venue for the convention.', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='conventions', to='api.Venue'),
        ),
        migrations.AddField(
            model_name='contestant',
            name='performer',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='contestants', to='api.Performer'),
        ),
        migrations.AddField(
            model_name='contest',
            name='champion',
            field=models.OneToOneField(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='contests', to='api.Contestant'),
        ),
        migrations.AddField(
            model_name='contest',
            name='session',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='contests', to='api.Session'),
        ),
        migrations.AlterUniqueTogether(
            name='chart',
            unique_together=set([('title', 'bhs_marketplace')]),
        ),
        migrations.AddField(
            model_name='chapter',
            name='organization',
            field=mptt.fields.TreeForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='chapters', to='api.Organization'),
        ),
        migrations.AddField(
            model_name='certification',
            name='person',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='certifications', to='api.Person'),
        ),
        migrations.AddField(
            model_name='award',
            name='organization',
            field=mptt.fields.TreeForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='awards', to='api.Organization'),
        ),
        migrations.AddField(
            model_name='assistant',
            name='organization',
            field=mptt.fields.TreeForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='assistants', to='api.Organization'),
        ),
        migrations.AddField(
            model_name='assistant',
            name='person',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='assistants', to='api.Person'),
        ),
        migrations.AddField(
            model_name='assistant',
            name='session',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='assistants', to='api.Session'),
        ),
        migrations.AddField(
            model_name='user',
            name='groups',
            field=models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.Group', verbose_name='groups'),
        ),
        migrations.AddField(
            model_name='user',
            name='user_permissions',
            field=models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.Permission', verbose_name='user permissions'),
        ),
        migrations.AlterUniqueTogether(
            name='submission',
            unique_together=set([('performer', 'chart')]),
        ),
        migrations.AlterUniqueTogether(
            name='song',
            unique_together=set([('performance', 'order')]),
        ),
        migrations.AlterUniqueTogether(
            name='session',
            unique_together=set([('convention', 'kind')]),
        ),
        migrations.AlterUniqueTogether(
            name='round',
            unique_together=set([('session', 'kind')]),
        ),
        migrations.AlterUniqueTogether(
            name='performer',
            unique_together=set([('group', 'session')]),
        ),
        migrations.AlterUniqueTogether(
            name='participant',
            unique_together=set([('organization', 'convention')]),
        ),
        migrations.AlterUniqueTogether(
            name='member',
            unique_together=set([('chapter', 'person')]),
        ),
        migrations.AlterUniqueTogether(
            name='judge',
            unique_together=set([('session', 'category', 'kind', 'slot')]),
        ),
        migrations.AlterUniqueTogether(
            name='convention',
            unique_together=set([('organization', 'season', 'year', 'division')]),
        ),
        migrations.AlterUniqueTogether(
            name='contestant',
            unique_together=set([('performer', 'contest')]),
        ),
        migrations.AlterUniqueTogether(
            name='contest',
            unique_together=set([('session', 'award')]),
        ),
        migrations.AlterUniqueTogether(
            name='certification',
            unique_together=set([('category', 'person')]),
        ),
        migrations.AlterUniqueTogether(
            name='award',
            unique_together=set([('organization', 'is_improved', 'is_novice', 'size', 'scope', 'idiom', 'kind')]),
        ),
        migrations.AlterUniqueTogether(
            name='assistant',
            unique_together=set([('session', 'person')]),
        ),
    ]
