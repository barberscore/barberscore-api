# -*- coding: utf-8 -*-
from __future__ import unicode_literals

from django.db import migrations, models
import django_fsm
import django.db.models.deletion
import phonenumber_field.modelfields
import uuid
import django.core.validators
import timezone_field.fields
import apps.api.validators
import autoslug.fields
import mptt.fields
import django.utils.timezone
import apps.api.models
import model_utils.fields


class Migration(migrations.Migration):

    dependencies = [
        ('auth', '0006_require_contenttypes_0002'),
    ]

    operations = [
        migrations.CreateModel(
            name='User',
            fields=[
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(null=True, verbose_name='last login', blank=True)),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('id', models.UUIDField(default=uuid.uuid4, serialize=False, editable=False, primary_key=True)),
                ('email', models.EmailField(help_text=b'Your email address will be your username.', unique=True, max_length=254)),
                ('name', models.CharField(help_text=b'Your full name.', max_length=200)),
                ('is_active', models.BooleanField(default=True)),
                ('is_staff', models.BooleanField(default=False)),
                ('date_joined', models.DateField(auto_now_add=True)),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Arranger',
            fields=[
                ('created', model_utils.fields.AutoCreatedField(default=django.utils.timezone.now, verbose_name='created', editable=False)),
                ('modified', model_utils.fields.AutoLastModifiedField(default=django.utils.timezone.now, verbose_name='modified', editable=False)),
                ('id', models.UUIDField(default=uuid.uuid4, serialize=False, editable=False, primary_key=True)),
                ('name', models.CharField(unique=True, max_length=255)),
                ('slug', autoslug.fields.AutoSlugField(editable=False, populate_from=b'name', max_length=255, always_update=True, unique=True)),
                ('part', models.IntegerField(default=1, choices=[(1, b'Arranger'), (2, b'Co-Arranger')])),
            ],
        ),
        migrations.CreateModel(
            name='Catalog',
            fields=[
                ('created', model_utils.fields.AutoCreatedField(default=django.utils.timezone.now, verbose_name='created', editable=False)),
                ('modified', model_utils.fields.AutoLastModifiedField(default=django.utils.timezone.now, verbose_name='modified', editable=False)),
                ('id', models.UUIDField(default=uuid.uuid4, serialize=False, editable=False, primary_key=True)),
                ('song_name', models.CharField(max_length=200, blank=True)),
                ('bhs_id', models.IntegerField(null=True, blank=True)),
                ('bhs_published', models.DateField(null=True, blank=True)),
                ('bhs_songname', models.CharField(max_length=200, blank=True)),
                ('bhs_arranger', models.CharField(max_length=200, blank=True)),
                ('bhs_fee', models.FloatField(null=True, blank=True)),
                ('bhs_difficulty', models.IntegerField(blank=True, null=True, choices=[(1, b'Very Easy'), (2, b'Easy'), (3, b'Medium'), (4, b'Hard'), (5, b'Very Hard')])),
                ('bhs_tempo', models.IntegerField(blank=True, null=True, choices=[(1, b'Ballad'), (2, b'Uptune'), (3, b'Mixed')])),
                ('bhs_medley', models.BooleanField(default=False)),
                ('is_parody', models.BooleanField(default=False)),
                ('is_medley', models.BooleanField(default=False)),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Certification',
            fields=[
                ('created', model_utils.fields.AutoCreatedField(default=django.utils.timezone.now, verbose_name='created', editable=False)),
                ('modified', model_utils.fields.AutoLastModifiedField(default=django.utils.timezone.now, verbose_name='modified', editable=False)),
                ('id', models.UUIDField(default=uuid.uuid4, serialize=False, editable=False, primary_key=True)),
                ('name', models.CharField(unique=True, max_length=255)),
                ('slug', autoslug.fields.AutoSlugField(editable=False, populate_from=b'name', max_length=255, always_update=True, unique=True)),
                ('category', models.IntegerField(choices=[(0, b'Admin'), (1, b'Music'), (2, b'Presentation'), (3, b'Singing')])),
                ('status', django_fsm.FSMIntegerField(default=0, choices=[(0, b'New'), (1, b'Active'), (2, b'Candidate'), (3, b'Inactive')])),
                ('status_monitor', model_utils.fields.MonitorField(default=django.utils.timezone.now, help_text=b'Status last updated', monitor=b'status')),
            ],
        ),
        migrations.CreateModel(
            name='Chapter',
            fields=[
                ('created', model_utils.fields.AutoCreatedField(default=django.utils.timezone.now, verbose_name='created', editable=False)),
                ('modified', model_utils.fields.AutoLastModifiedField(default=django.utils.timezone.now, verbose_name='modified', editable=False)),
                ('id', models.UUIDField(default=uuid.uuid4, serialize=False, editable=False, primary_key=True)),
                ('name', models.CharField(help_text=b'\n            The name of the resource.', max_length=200, unique=True, error_messages={b'unique': b'The name must be unique.  Add middle initials, suffixes, years, or other identifiers to make the name unique.'}, validators=[apps.api.validators.validate_trimmed])),
                ('slug', autoslug.fields.AutoSlugField(editable=False, populate_from=b'name', max_length=255, always_update=True, unique=True)),
                ('sts', django_fsm.FSMIntegerField(default=0, choices=[(0, b'New'), (10, b'Active'), (20, b'Inactive')])),
                ('sts_monitor', model_utils.fields.MonitorField(default=django.utils.timezone.now, help_text=b'Status last updated', monitor=b'sts')),
                ('start_date', models.DateField(help_text=b'\n            The founding/birth date of the resource.', null=True, blank=True)),
                ('end_date', models.DateField(help_text=b'\n            The retirement/deceased date of the resource.', null=True, blank=True)),
                ('location', models.CharField(help_text=b'\n            The geographical location of the resource.', max_length=200, blank=True)),
                ('website', models.URLField(help_text=b'\n            The website URL of the resource.', blank=True)),
                ('facebook', models.URLField(help_text=b'\n            The facebook URL of the resource.', blank=True)),
                ('twitter', models.CharField(blank=True, help_text=b'\n            The twitter handle (in form @twitter_handle) of the resource.', max_length=16, validators=[django.core.validators.RegexValidator(regex=b'@([A-Za-z0-9_]+)', message=b'\n                    Must be a single Twitter handle\n                    in the form `@twitter_handle`.\n                ')])),
                ('email', models.EmailField(help_text=b'\n            The contact email of the resource.', max_length=254, blank=True)),
                ('phone', phonenumber_field.modelfields.PhoneNumberField(help_text=b'\n            The phone number of the resource.  Include country code.', max_length=128, null=True, blank=True)),
                ('picture', models.ImageField(help_text=b'\n            The picture/logo of the resource.', null=True, upload_to=apps.api.models.generate_image_filename, blank=True)),
                ('description', models.TextField(help_text=b'\n            A description/bio of the resource.  Max 1000 characters.', max_length=1000, blank=True)),
                ('notes', models.TextField(help_text=b'\n            Notes (for internal use only).', blank=True)),
                ('status', django_fsm.FSMIntegerField(default=0, choices=[(0, b'New'), (10, b'Active'), (20, b'Inactive')])),
                ('status_monitor', model_utils.fields.MonitorField(default=django.utils.timezone.now, help_text=b'Status last updated', monitor=b'status')),
                ('code', models.CharField(blank=True, help_text=b'\n            The chapter code.', max_length=200, validators=[apps.api.validators.validate_trimmed])),
            ],
            options={
                'ordering': ('name',),
            },
        ),
        migrations.CreateModel(
            name='Contest',
            fields=[
                ('created', model_utils.fields.AutoCreatedField(default=django.utils.timezone.now, verbose_name='created', editable=False)),
                ('modified', model_utils.fields.AutoLastModifiedField(default=django.utils.timezone.now, verbose_name='modified', editable=False)),
                ('id', models.UUIDField(default=uuid.uuid4, serialize=False, editable=False, primary_key=True)),
                ('name', models.CharField(unique=True, max_length=200, editable=False)),
                ('slug', autoslug.fields.AutoSlugField(editable=False, populate_from=b'name', max_length=255, always_update=True, unique=True)),
                ('status', django_fsm.FSMIntegerField(default=0, choices=[(0, b'New'), (10, b'Built'), (20, b'Started'), (25, b'Finished'), (30, b'Final')])),
                ('status_monitor', model_utils.fields.MonitorField(default=django.utils.timezone.now, help_text=b'Status last updated', monitor=b'status')),
                ('level', models.IntegerField(help_text=b'\n            The level of the contest.  Note that this may be different than the level of the parent session.', choices=[(1, b'International'), (2, b'District'), (3, b'Division')])),
                ('kind', models.IntegerField(help_text=b'\n            The kind of the contest.  Note that this may be different than the kind of the parent session.', choices=[(1, b'Quartet'), (2, b'Chorus'), (3, b'Senior'), (4, b'Collegiate'), (5, b'Novice'), (6, b'Plateau A'), (7, b'Plateau AA'), (8, b'Plateau AAA'), (9, b"Dealer's Choice")])),
                ('goal', models.IntegerField(help_text=b'\n            The objective of the contest.', choices=[(0, b'Championship'), (1, b'Qualifier')])),
                ('qual_score', models.FloatField(help_text=b'\n            The objective of the contest.  Note that if the goal is `qualifier` then this must be set.', null=True, blank=True)),
                ('year', models.IntegerField(choices=[(2016, 2016), (2015, 2015), (2014, 2014), (2013, 2013), (2012, 2012), (2011, 2011), (2010, 2010), (2009, 2009), (2008, 2008), (2007, 2007), (2006, 2006), (2005, 2005), (2004, 2004), (2003, 2003), (2002, 2002), (2001, 2001), (2000, 2000), (1999, 1999), (1998, 1998), (1997, 1997), (1996, 1996), (1995, 1995), (1994, 1994), (1993, 1993), (1992, 1992), (1991, 1991), (1990, 1990), (1989, 1989), (1988, 1988), (1987, 1987), (1986, 1986), (1985, 1985), (1984, 1984), (1983, 1983), (1982, 1982), (1981, 1981), (1980, 1980), (1979, 1979), (1978, 1978), (1977, 1977), (1976, 1976), (1975, 1975), (1974, 1974), (1973, 1973), (1972, 1972), (1971, 1971), (1970, 1970), (1969, 1969), (1968, 1968), (1967, 1967), (1966, 1966), (1965, 1965), (1964, 1964), (1963, 1963), (1962, 1962), (1961, 1961), (1960, 1960), (1959, 1959), (1958, 1958), (1957, 1957), (1956, 1956), (1955, 1955), (1954, 1954), (1953, 1953), (1952, 1952), (1951, 1951), (1950, 1950), (1949, 1949), (1948, 1948), (1947, 1947), (1946, 1946), (1945, 1945), (1944, 1944), (1943, 1943), (1942, 1942), (1941, 1941), (1940, 1940), (1939, 1939)])),
                ('rounds', models.IntegerField(help_text=b'\n            The number of rounds that will be used in determining the contest.  Note that this may be fewer than the total number of rounds (rounds) in the parent session.', choices=[(3, 3), (2, 2), (1, 1)])),
                ('history', models.IntegerField(default=0, help_text=b'Used to manage state for historical imports.', choices=[(0, b'New'), (10, b'None'), (20, b'PDF'), (30, b'Places'), (40, b'Incomplete'), (50, b'Complete')])),
                ('history_monitor', model_utils.fields.MonitorField(default=django.utils.timezone.now, help_text=b'History last updated', monitor=b'history')),
                ('scoresheet_pdf', models.FileField(help_text=b'\n            PDF of the OSS.', null=True, upload_to=apps.api.models.generate_image_filename, blank=True)),
                ('scoresheet_csv', models.FileField(help_text=b'\n            The parsed scoresheet (used for legacy imports).', null=True, upload_to=apps.api.models.generate_image_filename, blank=True)),
                ('subsession_id', models.IntegerField(null=True, blank=True)),
                ('lft', models.PositiveIntegerField(editable=False, db_index=True)),
                ('rght', models.PositiveIntegerField(editable=False, db_index=True)),
                ('tree_id', models.PositiveIntegerField(editable=False, db_index=True)),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Contestant',
            fields=[
                ('created', model_utils.fields.AutoCreatedField(default=django.utils.timezone.now, verbose_name='created', editable=False)),
                ('modified', model_utils.fields.AutoLastModifiedField(default=django.utils.timezone.now, verbose_name='modified', editable=False)),
                ('id', models.UUIDField(default=uuid.uuid4, serialize=False, editable=False, primary_key=True)),
                ('name', models.CharField(unique=True, max_length=255, editable=False)),
                ('slug', autoslug.fields.AutoSlugField(editable=False, populate_from=b'name', max_length=255, always_update=True, unique=True)),
                ('status', django_fsm.FSMIntegerField(default=0, choices=[(0, b'New')])),
                ('status_monitor', model_utils.fields.MonitorField(default=django.utils.timezone.now, help_text=b'Status last updated', monitor=b'status')),
                ('place', models.IntegerField(help_text=b'\n            The final ranking relative to this contest.', null=True, editable=False, blank=True)),
                ('mus_points', models.IntegerField(null=True, editable=False, blank=True)),
                ('prs_points', models.IntegerField(null=True, editable=False, blank=True)),
                ('sng_points', models.IntegerField(null=True, editable=False, blank=True)),
                ('total_points', models.IntegerField(null=True, editable=False, blank=True)),
                ('mus_score', models.FloatField(null=True, editable=False, blank=True)),
                ('prs_score', models.FloatField(null=True, editable=False, blank=True)),
                ('sng_score', models.FloatField(null=True, editable=False, blank=True)),
                ('total_score', models.FloatField(null=True, editable=False, blank=True)),
                ('contest', mptt.fields.TreeForeignKey(related_name='contestants', to='api.Contest')),
            ],
            options={
                'ordering': ('contest', 'performer'),
            },
        ),
        migrations.CreateModel(
            name='Convention',
            fields=[
                ('created', model_utils.fields.AutoCreatedField(default=django.utils.timezone.now, verbose_name='created', editable=False)),
                ('modified', model_utils.fields.AutoLastModifiedField(default=django.utils.timezone.now, verbose_name='modified', editable=False)),
                ('id', models.UUIDField(default=uuid.uuid4, serialize=False, editable=False, primary_key=True)),
                ('name', models.CharField(unique=True, max_length=255, editable=False)),
                ('slug', autoslug.fields.AutoSlugField(editable=False, populate_from=b'name', max_length=255, always_update=True, unique=True)),
                ('status', models.IntegerField(default=0, choices=[(0, b'New'), (10, b'Built'), (20, b'Started'), (30, b'Final')])),
                ('status_monitor', model_utils.fields.MonitorField(default=django.utils.timezone.now, help_text=b'Status last updated', monitor=b'status')),
                ('kind', models.IntegerField(help_text=b'\n            The kind of convention.', choices=[(1, b'International'), (2, b'Midwinter'), (3, b'Fall'), (4, b'Spring'), (5, b'Pacific'), (6, b'Southeast and Southwest'), (7, b'Northeast and Northwest'), (8, b'District')])),
                ('year', models.IntegerField(choices=[(2016, 2016), (2015, 2015), (2014, 2014), (2013, 2013), (2012, 2012), (2011, 2011), (2010, 2010), (2009, 2009), (2008, 2008), (2007, 2007), (2006, 2006), (2005, 2005), (2004, 2004), (2003, 2003), (2002, 2002), (2001, 2001), (2000, 2000), (1999, 1999), (1998, 1998), (1997, 1997), (1996, 1996), (1995, 1995), (1994, 1994), (1993, 1993), (1992, 1992), (1991, 1991), (1990, 1990), (1989, 1989), (1988, 1988), (1987, 1987), (1986, 1986), (1985, 1985), (1984, 1984), (1983, 1983), (1982, 1982), (1981, 1981), (1980, 1980), (1979, 1979), (1978, 1978), (1977, 1977), (1976, 1976), (1975, 1975), (1974, 1974), (1973, 1973), (1972, 1972), (1971, 1971), (1970, 1970), (1969, 1969), (1968, 1968), (1967, 1967), (1966, 1966), (1965, 1965), (1964, 1964), (1963, 1963), (1962, 1962), (1961, 1961), (1960, 1960), (1959, 1959), (1958, 1958), (1957, 1957), (1956, 1956), (1955, 1955), (1954, 1954), (1953, 1953), (1952, 1952), (1951, 1951), (1950, 1950), (1949, 1949), (1948, 1948), (1947, 1947), (1946, 1946), (1945, 1945), (1944, 1944), (1943, 1943), (1942, 1942), (1941, 1941), (1940, 1940), (1939, 1939)])),
                ('dates', models.CharField(help_text=b'\n            The convention dates (will be replaced by start/end).', max_length=200, blank=True)),
                ('location', models.CharField(help_text=b'\n            The location of the convention.', max_length=200, blank=True)),
                ('timezone', timezone_field.fields.TimeZoneField(default=b'US/Pacific', help_text=b'\n            The local timezone of the convention.')),
                ('stix_file', models.FileField(help_text=b'\n            The bbstix file.', null=True, upload_to=apps.api.models.generate_image_filename, blank=True)),
            ],
            options={
                'ordering': ['-year', 'organization__name'],
            },
        ),
        migrations.CreateModel(
            name='Director',
            fields=[
                ('created', model_utils.fields.AutoCreatedField(default=django.utils.timezone.now, verbose_name='created', editable=False)),
                ('modified', model_utils.fields.AutoLastModifiedField(default=django.utils.timezone.now, verbose_name='modified', editable=False)),
                ('id', models.UUIDField(default=uuid.uuid4, serialize=False, editable=False, primary_key=True)),
                ('name', models.CharField(unique=True, max_length=255)),
                ('slug', autoslug.fields.AutoSlugField(editable=False, populate_from=b'name', max_length=255, always_update=True, unique=True)),
                ('part', models.IntegerField(default=1, choices=[(1, b'Director'), (2, b'Co-Director')])),
            ],
        ),
        migrations.CreateModel(
            name='Group',
            fields=[
                ('created', model_utils.fields.AutoCreatedField(default=django.utils.timezone.now, verbose_name='created', editable=False)),
                ('modified', model_utils.fields.AutoLastModifiedField(default=django.utils.timezone.now, verbose_name='modified', editable=False)),
                ('id', models.UUIDField(default=uuid.uuid4, serialize=False, editable=False, primary_key=True)),
                ('name', models.CharField(help_text=b'\n            The name of the resource.', max_length=200, unique=True, error_messages={b'unique': b'The name must be unique.  Add middle initials, suffixes, years, or other identifiers to make the name unique.'}, validators=[apps.api.validators.validate_trimmed])),
                ('slug', autoslug.fields.AutoSlugField(editable=False, populate_from=b'name', max_length=255, always_update=True, unique=True)),
                ('sts', django_fsm.FSMIntegerField(default=0, choices=[(0, b'New'), (10, b'Active'), (20, b'Inactive')])),
                ('sts_monitor', model_utils.fields.MonitorField(default=django.utils.timezone.now, help_text=b'Status last updated', monitor=b'sts')),
                ('start_date', models.DateField(help_text=b'\n            The founding/birth date of the resource.', null=True, blank=True)),
                ('end_date', models.DateField(help_text=b'\n            The retirement/deceased date of the resource.', null=True, blank=True)),
                ('location', models.CharField(help_text=b'\n            The geographical location of the resource.', max_length=200, blank=True)),
                ('website', models.URLField(help_text=b'\n            The website URL of the resource.', blank=True)),
                ('facebook', models.URLField(help_text=b'\n            The facebook URL of the resource.', blank=True)),
                ('twitter', models.CharField(blank=True, help_text=b'\n            The twitter handle (in form @twitter_handle) of the resource.', max_length=16, validators=[django.core.validators.RegexValidator(regex=b'@([A-Za-z0-9_]+)', message=b'\n                    Must be a single Twitter handle\n                    in the form `@twitter_handle`.\n                ')])),
                ('email', models.EmailField(help_text=b'\n            The contact email of the resource.', max_length=254, blank=True)),
                ('phone', phonenumber_field.modelfields.PhoneNumberField(help_text=b'\n            The phone number of the resource.  Include country code.', max_length=128, null=True, blank=True)),
                ('picture', models.ImageField(help_text=b'\n            The picture/logo of the resource.', null=True, upload_to=apps.api.models.generate_image_filename, blank=True)),
                ('description', models.TextField(help_text=b'\n            A description/bio of the resource.  Max 1000 characters.', max_length=1000, blank=True)),
                ('notes', models.TextField(help_text=b'\n            Notes (for internal use only).', blank=True)),
                ('status', models.IntegerField(default=0, choices=[(0, b'New'), (10, b'Active'), (20, b'Inactive')])),
                ('status_monitor', model_utils.fields.MonitorField(default=django.utils.timezone.now, help_text=b'Status last updated', monitor=b'status')),
                ('kind', models.IntegerField(default=1, help_text=b'\n            The kind of group; choices are Quartet or Chorus.', choices=[(1, b'Quartet'), (2, b'Chorus')])),
                ('chapter', models.ForeignKey(related_name='groups', blank=True, to='api.Chapter', null=True)),
            ],
            options={
                'ordering': ('name',),
            },
        ),
        migrations.CreateModel(
            name='Judge',
            fields=[
                ('created', model_utils.fields.AutoCreatedField(default=django.utils.timezone.now, verbose_name='created', editable=False)),
                ('modified', model_utils.fields.AutoLastModifiedField(default=django.utils.timezone.now, verbose_name='modified', editable=False)),
                ('id', models.UUIDField(default=uuid.uuid4, serialize=False, editable=False, primary_key=True)),
                ('name', models.CharField(unique=True, max_length=255, editable=False)),
                ('slug', autoslug.fields.AutoSlugField(editable=False, populate_from=b'name', max_length=255, always_update=True, unique=True)),
                ('status', models.IntegerField(default=0, choices=[(0, b'New'), (10, b'Scheduled'), (20, b'Confirmed'), (30, b'Final')])),
                ('status_monitor', model_utils.fields.MonitorField(default=django.utils.timezone.now, help_text=b'Status last updated', monitor=b'status')),
                ('category', models.IntegerField(choices=[(0, b'Admin'), (1, b'Music'), (2, b'Presentation'), (3, b'Singing')])),
                ('kind', models.IntegerField(choices=[(10, b'Official'), (20, b'Practice'), (30, b'Composite')])),
                ('slot', models.IntegerField(choices=[(1, 1), (2, 2), (3, 3), (4, 4), (5, 5)])),
                ('panel_id', models.IntegerField(null=True, blank=True)),
            ],
            options={
                'ordering': ('session', 'kind', 'category', 'slot'),
            },
        ),
        migrations.CreateModel(
            name='Organization',
            fields=[
                ('created', model_utils.fields.AutoCreatedField(default=django.utils.timezone.now, verbose_name='created', editable=False)),
                ('modified', model_utils.fields.AutoLastModifiedField(default=django.utils.timezone.now, verbose_name='modified', editable=False)),
                ('id', models.UUIDField(default=uuid.uuid4, serialize=False, editable=False, primary_key=True)),
                ('name', models.CharField(help_text=b'\n            The name of the resource.', max_length=200, editable=False, validators=[apps.api.validators.validate_trimmed])),
                ('slug', autoslug.fields.AutoSlugField(always_update=True, populate_from=b'name', max_length=255, editable=False)),
                ('status', django_fsm.FSMIntegerField(default=0, choices=[(0, b'New'), (10, b'Active'), (20, b'Inactive')])),
                ('status_monitor', model_utils.fields.MonitorField(default=django.utils.timezone.now, help_text=b'Status last updated', monitor=b'status')),
                ('level', models.IntegerField(blank=True, help_text=b'\n            The level of the contest.  Note that this may be different than the level of the parent session.', null=True, choices=[(0, b'International'), (1, b'District'), (2, b'Division')])),
                ('start_date', models.DateField(help_text=b'\n            The founding/birth date of the resource.', null=True, blank=True)),
                ('end_date', models.DateField(help_text=b'\n            The retirement/deceased date of the resource.', null=True, blank=True)),
                ('location', models.CharField(help_text=b'\n            The geographical location of the resource.', max_length=200, blank=True)),
                ('website', models.URLField(help_text=b'\n            The website URL of the resource.', blank=True)),
                ('facebook', models.URLField(help_text=b'\n            The facebook URL of the resource.', blank=True)),
                ('twitter', models.CharField(blank=True, help_text=b'\n            The twitter handle (in form @twitter_handle) of the resource.', max_length=16, validators=[django.core.validators.RegexValidator(regex=b'@([A-Za-z0-9_]+)', message=b'\n                    Must be a single Twitter handle\n                    in the form `@twitter_handle`.\n                ')])),
                ('email', models.EmailField(help_text=b'\n            The contact email of the resource.', max_length=254, blank=True)),
                ('phone', phonenumber_field.modelfields.PhoneNumberField(help_text=b'\n            The phone number of the resource.  Include country code.', max_length=128, null=True, blank=True)),
                ('picture', models.ImageField(help_text=b'\n            The picture/logo of the resource.', null=True, upload_to=apps.api.models.generate_image_filename, blank=True)),
                ('description', models.TextField(help_text=b'\n            A description/bio of the resource.  Max 1000 characters.', max_length=1000, blank=True)),
                ('notes', models.TextField(help_text=b'\n            Notes (for internal use only).', blank=True)),
                ('short_name', models.CharField(help_text=b'\n            A short-form name for the resource.', max_length=200, blank=True)),
                ('long_name', models.CharField(help_text=b'\n            A long-form name for the resource.', max_length=200, blank=True)),
                ('lft', models.PositiveIntegerField(editable=False, db_index=True)),
                ('rght', models.PositiveIntegerField(editable=False, db_index=True)),
                ('tree_id', models.PositiveIntegerField(editable=False, db_index=True)),
                ('parent', mptt.fields.TreeForeignKey(related_name='children', blank=True, to='api.Organization', null=True)),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Performance',
            fields=[
                ('created', model_utils.fields.AutoCreatedField(default=django.utils.timezone.now, verbose_name='created', editable=False)),
                ('modified', model_utils.fields.AutoLastModifiedField(default=django.utils.timezone.now, verbose_name='modified', editable=False)),
                ('id', models.UUIDField(default=uuid.uuid4, serialize=False, editable=False, primary_key=True)),
                ('name', models.CharField(unique=True, max_length=255, editable=False)),
                ('slug', autoslug.fields.AutoSlugField(editable=False, populate_from=b'name', max_length=255, always_update=True, unique=True)),
                ('status', django_fsm.FSMIntegerField(default=0, choices=[(0, b'New'), (20, b'Started'), (25, b'Finished'), (40, b'Confirmed'), (50, b'Final')])),
                ('status_monitor', model_utils.fields.MonitorField(default=django.utils.timezone.now, help_text=b'Status last updated', monitor=b'status')),
                ('position', models.PositiveSmallIntegerField(verbose_name=b'Position')),
                ('start_time', models.DateTimeField(null=True, blank=True)),
                ('place', models.IntegerField(help_text=b'\n            The final ranking relative to this round.', null=True, editable=False, blank=True)),
                ('mus_points', models.IntegerField(null=True, editable=False, blank=True)),
                ('prs_points', models.IntegerField(null=True, editable=False, blank=True)),
                ('sng_points', models.IntegerField(null=True, editable=False, blank=True)),
                ('total_points', models.IntegerField(null=True, editable=False, blank=True)),
                ('mus_score', models.FloatField(null=True, editable=False, blank=True)),
                ('prs_score', models.FloatField(null=True, editable=False, blank=True)),
                ('sng_score', models.FloatField(null=True, editable=False, blank=True)),
                ('total_score', models.FloatField(null=True, editable=False, blank=True)),
            ],
            options={
                'ordering': ('round', 'position'),
            },
        ),
        migrations.CreateModel(
            name='Performer',
            fields=[
                ('created', model_utils.fields.AutoCreatedField(default=django.utils.timezone.now, verbose_name='created', editable=False)),
                ('modified', model_utils.fields.AutoLastModifiedField(default=django.utils.timezone.now, verbose_name='modified', editable=False)),
                ('id', models.UUIDField(default=uuid.uuid4, serialize=False, editable=False, primary_key=True)),
                ('name', models.CharField(unique=True, max_length=255, editable=False)),
                ('slug', autoslug.fields.AutoSlugField(editable=False, populate_from=b'name', max_length=255, always_update=True, unique=True)),
                ('status', django_fsm.FSMIntegerField(default=0, choices=[(0, b'New'), (10, b'Qualified'), (20, b'Accepted'), (30, b'Declined'), (40, b'Dropped'), (50, b'Official'), (60, b'Finished'), (90, b'Final')])),
                ('status_monitor', model_utils.fields.MonitorField(default=django.utils.timezone.now, help_text=b'Status last updated', monitor=b'status')),
                ('picture', models.ImageField(help_text=b'\n            The on-stage session picture (as opposed to the "official" photo).', null=True, upload_to=apps.api.models.generate_image_filename, blank=True)),
                ('seed', models.IntegerField(help_text=b'\n            The incoming rank based on prelim score.', null=True, blank=True)),
                ('prelim', models.FloatField(help_text=b'\n            The incoming prelim score.', null=True, blank=True)),
                ('men', models.IntegerField(default=4, help_text=b'\n            The number of men on stage.', null=True, blank=True)),
                ('place', models.IntegerField(help_text=b'\n            The final placement/rank of the performer for the entire session (ie, not a specific contest).', null=True, editable=False, blank=True)),
                ('mus_points', models.IntegerField(null=True, editable=False, blank=True)),
                ('prs_points', models.IntegerField(null=True, editable=False, blank=True)),
                ('sng_points', models.IntegerField(null=True, editable=False, blank=True)),
                ('total_points', models.IntegerField(null=True, editable=False, blank=True)),
                ('mus_score', models.FloatField(null=True, editable=False, blank=True)),
                ('prs_score', models.FloatField(null=True, editable=False, blank=True)),
                ('sng_score', models.FloatField(null=True, editable=False, blank=True)),
                ('total_score', models.FloatField(null=True, editable=False, blank=True)),
                ('group', models.ForeignKey(related_name='performers', to='api.Group')),
                ('organization', mptt.fields.TreeForeignKey(related_name='performers', blank=True, to='api.Organization', null=True)),
            ],
            options={
                'ordering': ('session', 'group'),
            },
        ),
        migrations.CreateModel(
            name='Person',
            fields=[
                ('created', model_utils.fields.AutoCreatedField(default=django.utils.timezone.now, verbose_name='created', editable=False)),
                ('modified', model_utils.fields.AutoLastModifiedField(default=django.utils.timezone.now, verbose_name='modified', editable=False)),
                ('id', models.UUIDField(default=uuid.uuid4, serialize=False, editable=False, primary_key=True)),
                ('name', models.CharField(help_text=b'\n            The name of the resource.', max_length=200, unique=True, error_messages={b'unique': b'The name must be unique.  Add middle initials, suffixes, years, or other identifiers to make the name unique.'}, validators=[apps.api.validators.validate_trimmed])),
                ('slug', autoslug.fields.AutoSlugField(editable=False, populate_from=b'name', max_length=255, always_update=True, unique=True)),
                ('sts', django_fsm.FSMIntegerField(default=0, choices=[(0, b'New'), (10, b'Active'), (20, b'Inactive')])),
                ('sts_monitor', model_utils.fields.MonitorField(default=django.utils.timezone.now, help_text=b'Status last updated', monitor=b'sts')),
                ('start_date', models.DateField(help_text=b'\n            The founding/birth date of the resource.', null=True, blank=True)),
                ('end_date', models.DateField(help_text=b'\n            The retirement/deceased date of the resource.', null=True, blank=True)),
                ('location', models.CharField(help_text=b'\n            The geographical location of the resource.', max_length=200, blank=True)),
                ('website', models.URLField(help_text=b'\n            The website URL of the resource.', blank=True)),
                ('facebook', models.URLField(help_text=b'\n            The facebook URL of the resource.', blank=True)),
                ('twitter', models.CharField(blank=True, help_text=b'\n            The twitter handle (in form @twitter_handle) of the resource.', max_length=16, validators=[django.core.validators.RegexValidator(regex=b'@([A-Za-z0-9_]+)', message=b'\n                    Must be a single Twitter handle\n                    in the form `@twitter_handle`.\n                ')])),
                ('email', models.EmailField(help_text=b'\n            The contact email of the resource.', max_length=254, blank=True)),
                ('phone', phonenumber_field.modelfields.PhoneNumberField(help_text=b'\n            The phone number of the resource.  Include country code.', max_length=128, null=True, blank=True)),
                ('picture', models.ImageField(help_text=b'\n            The picture/logo of the resource.', null=True, upload_to=apps.api.models.generate_image_filename, blank=True)),
                ('description', models.TextField(help_text=b'\n            A description/bio of the resource.  Max 1000 characters.', max_length=1000, blank=True)),
                ('notes', models.TextField(help_text=b'\n            Notes (for internal use only).', blank=True)),
                ('kind', models.IntegerField(default=1, help_text=b'\n            Most persons are individuals; however, they can be grouped into teams for the purpose of multi-arranger songs.', choices=[(1, b'Individual'), (2, b'Team')])),
                ('status', models.IntegerField(default=0, choices=[(0, b'New'), (10, b'Active'), (20, b'Inactive'), (30, b'Retired'), (40, b'Deceased')])),
                ('status_monitor', model_utils.fields.MonitorField(default=django.utils.timezone.now, help_text=b'Status last updated', monitor=b'status')),
                ('member', models.IntegerField(null=True, blank=True)),
                ('is_judge', models.BooleanField(default=False)),
                ('organization', mptt.fields.TreeForeignKey(blank=True, to='api.Organization', null=True)),
            ],
            options={
                'ordering': ['name'],
            },
        ),
        migrations.CreateModel(
            name='Round',
            fields=[
                ('created', model_utils.fields.AutoCreatedField(default=django.utils.timezone.now, verbose_name='created', editable=False)),
                ('modified', model_utils.fields.AutoLastModifiedField(default=django.utils.timezone.now, verbose_name='modified', editable=False)),
                ('id', models.UUIDField(default=uuid.uuid4, serialize=False, editable=False, primary_key=True)),
                ('name', models.CharField(unique=True, max_length=255, editable=False)),
                ('slug', autoslug.fields.AutoSlugField(editable=False, populate_from=b'name', max_length=255, always_update=True, unique=True)),
                ('status', django_fsm.FSMIntegerField(default=0, choices=[(0, b'New'), (10, b'Built'), (15, b'Ready'), (20, b'Started'), (25, b'Finished'), (30, b'Final')])),
                ('status_monitor', model_utils.fields.MonitorField(default=django.utils.timezone.now, help_text=b'Status last updated', monitor=b'status')),
                ('kind', models.IntegerField(choices=[(1, b'Finals'), (2, b'Semis'), (3, b'Quarters')])),
                ('num', models.IntegerField(null=True, blank=True)),
                ('start_date', models.DateField(null=True, blank=True)),
                ('slots', models.IntegerField(null=True, blank=True)),
            ],
            options={
                'ordering': ('session', 'kind'),
            },
        ),
        migrations.CreateModel(
            name='Score',
            fields=[
                ('created', model_utils.fields.AutoCreatedField(default=django.utils.timezone.now, verbose_name='created', editable=False)),
                ('modified', model_utils.fields.AutoLastModifiedField(default=django.utils.timezone.now, verbose_name='modified', editable=False)),
                ('id', models.UUIDField(default=uuid.uuid4, serialize=False, editable=False, primary_key=True)),
                ('name', models.CharField(unique=True, max_length=255, editable=False)),
                ('slug', autoslug.fields.AutoSlugField(editable=False, populate_from=b'name', max_length=255, always_update=True, unique=True)),
                ('status', django_fsm.FSMIntegerField(default=0, choices=[(0, b'New'), (20, b'Entered'), (30, b'Flagged'), (35, b'Validated'), (40, b'Confirmed'), (50, b'Final')])),
                ('status_monitor', model_utils.fields.MonitorField(default=django.utils.timezone.now, help_text=b'Status last updated', monitor=b'status')),
                ('category', models.IntegerField(choices=[(0, b'Admin'), (1, b'Music'), (2, b'Presentation'), (3, b'Singing')])),
                ('kind', models.IntegerField(choices=[(10, b'Official'), (20, b'Practice'), (30, b'Composite')])),
                ('points', models.IntegerField(blank=True, help_text=b'\n            The number of points contested (0-100)', null=True, validators=[django.core.validators.MaxValueValidator(100, message=b'Points must be between 0 - 100'), django.core.validators.MinValueValidator(0, message=b'Points must be between 0 - 100')])),
                ('judge', models.ForeignKey(related_name='scores', to='api.Judge')),
            ],
            options={
                'ordering': ('judge', 'song'),
            },
        ),
        migrations.CreateModel(
            name='Session',
            fields=[
                ('created', model_utils.fields.AutoCreatedField(default=django.utils.timezone.now, verbose_name='created', editable=False)),
                ('modified', model_utils.fields.AutoLastModifiedField(default=django.utils.timezone.now, verbose_name='modified', editable=False)),
                ('id', models.UUIDField(default=uuid.uuid4, serialize=False, editable=False, primary_key=True)),
                ('name', models.CharField(unique=True, max_length=255, editable=False)),
                ('slug', autoslug.fields.AutoSlugField(editable=False, populate_from=b'name', max_length=255, always_update=True, unique=True)),
                ('status', django_fsm.FSMIntegerField(default=0, choices=[(0, b'New'), (10, b'Built'), (20, b'Started'), (30, b'Final')])),
                ('status_monitor', model_utils.fields.MonitorField(default=django.utils.timezone.now, help_text=b'Status last updated', monitor=b'status')),
                ('kind', models.IntegerField(help_text=b'\n            The kind of session.  Generally this will be either quartet or chorus, with the exception being International and Midwinter which hold exclusive Collegiate and Senior sessions respectively.', choices=[(1, b'Quartet'), (2, b'Chorus'), (3, b'Senior'), (4, b'Collegiate')])),
                ('size', models.IntegerField(help_text=b'\n            Size of the judging panel (per category).', choices=[(5, 5), (4, 4), (3, 3), (2, 2), (1, 1)])),
                ('num_rounds', models.IntegerField(default=1, help_text=b'\n            Number of rounds (rounds) for the session.', choices=[(3, 3), (2, 2), (1, 1)])),
                ('year', models.IntegerField(editable=False, choices=[(2016, 2016), (2015, 2015), (2014, 2014), (2013, 2013), (2012, 2012), (2011, 2011), (2010, 2010), (2009, 2009), (2008, 2008), (2007, 2007), (2006, 2006), (2005, 2005), (2004, 2004), (2003, 2003), (2002, 2002), (2001, 2001), (2000, 2000), (1999, 1999), (1998, 1998), (1997, 1997), (1996, 1996), (1995, 1995), (1994, 1994), (1993, 1993), (1992, 1992), (1991, 1991), (1990, 1990), (1989, 1989), (1988, 1988), (1987, 1987), (1986, 1986), (1985, 1985), (1984, 1984), (1983, 1983), (1982, 1982), (1981, 1981), (1980, 1980), (1979, 1979), (1978, 1978), (1977, 1977), (1976, 1976), (1975, 1975), (1974, 1974), (1973, 1973), (1972, 1972), (1971, 1971), (1970, 1970), (1969, 1969), (1968, 1968), (1967, 1967), (1966, 1966), (1965, 1965), (1964, 1964), (1963, 1963), (1962, 1962), (1961, 1961), (1960, 1960), (1959, 1959), (1958, 1958), (1957, 1957), (1956, 1956), (1955, 1955), (1954, 1954), (1953, 1953), (1952, 1952), (1951, 1951), (1950, 1950), (1949, 1949), (1948, 1948), (1947, 1947), (1946, 1946), (1945, 1945), (1944, 1944), (1943, 1943), (1942, 1942), (1941, 1941), (1940, 1940), (1939, 1939)])),
                ('history', models.IntegerField(default=0, help_text=b'Used to manage state for historical imports.', choices=[(0, b'New'), (10, b'None'), (20, b'PDF'), (30, b'Places'), (40, b'Incomplete'), (50, b'Complete')])),
                ('history_monitor', model_utils.fields.MonitorField(default=django.utils.timezone.now, help_text=b'History last updated', monitor=b'history')),
                ('scoresheet_pdf', models.FileField(help_text=b'\n            The historical PDF OSS.', null=True, upload_to=apps.api.models.generate_image_filename, blank=True)),
                ('scoresheet_csv', models.FileField(help_text=b'\n            The parsed scoresheet (used for legacy imports).', null=True, upload_to=apps.api.models.generate_image_filename, blank=True)),
                ('convention', models.ForeignKey(related_name='sessions', to='api.Convention')),
                ('organization', mptt.fields.TreeForeignKey(related_name='sessions', editable=False, to='api.Organization', help_text=b'\n            The organization that will confer the contest.  Note that this may be different than the organization running the parent session.')),
            ],
            options={
                'ordering': ('-year', 'convention', 'kind'),
            },
        ),
        migrations.CreateModel(
            name='Singer',
            fields=[
                ('created', model_utils.fields.AutoCreatedField(default=django.utils.timezone.now, verbose_name='created', editable=False)),
                ('modified', model_utils.fields.AutoLastModifiedField(default=django.utils.timezone.now, verbose_name='modified', editable=False)),
                ('id', models.UUIDField(default=uuid.uuid4, serialize=False, editable=False, primary_key=True)),
                ('name', models.CharField(unique=True, max_length=255)),
                ('slug', autoslug.fields.AutoSlugField(editable=False, populate_from=b'name', max_length=255, always_update=True, unique=True)),
                ('part', models.IntegerField(choices=[(1, b'Tenor'), (2, b'Lead'), (3, b'Baritone'), (4, b'Bass')])),
                ('performer', models.ForeignKey(related_name='singers', to='api.Performer')),
                ('person', models.ForeignKey(related_name='quartets', to='api.Person')),
            ],
            options={
                'ordering': ('-name',),
            },
        ),
        migrations.CreateModel(
            name='Song',
            fields=[
                ('created', model_utils.fields.AutoCreatedField(default=django.utils.timezone.now, verbose_name='created', editable=False)),
                ('modified', model_utils.fields.AutoLastModifiedField(default=django.utils.timezone.now, verbose_name='modified', editable=False)),
                ('id', models.UUIDField(default=uuid.uuid4, serialize=False, editable=False, primary_key=True)),
                ('name', models.CharField(unique=True, max_length=255, editable=False)),
                ('slug', autoslug.fields.AutoSlugField(editable=False, populate_from=b'name', max_length=255, always_update=True, unique=True)),
                ('status', django_fsm.FSMIntegerField(default=0, choices=[(0, b'New'), (40, b'Confirmed'), (50, b'Final')])),
                ('status_monitor', model_utils.fields.MonitorField(default=django.utils.timezone.now, help_text=b'Status last updated', monitor=b'status')),
                ('order', models.IntegerField(choices=[(1, b'First'), (2, b'Second')])),
                ('title', models.CharField(max_length=255, blank=True)),
                ('arranger', models.CharField(max_length=255, blank=True)),
                ('is_parody', models.BooleanField(default=False)),
                ('mus_points', models.IntegerField(null=True, editable=False, blank=True)),
                ('prs_points', models.IntegerField(null=True, editable=False, blank=True)),
                ('sng_points', models.IntegerField(null=True, editable=False, blank=True)),
                ('total_points', models.IntegerField(null=True, editable=False, blank=True)),
                ('mus_score', models.FloatField(null=True, editable=False, blank=True)),
                ('prs_score', models.FloatField(null=True, editable=False, blank=True)),
                ('sng_score', models.FloatField(null=True, editable=False, blank=True)),
                ('total_score', models.FloatField(null=True, editable=False, blank=True)),
                ('catalog', models.ForeignKey(related_name='songs', on_delete=django.db.models.deletion.SET_NULL, blank=True, to='api.Catalog', null=True)),
                ('performance', models.ForeignKey(related_name='songs', to='api.Performance')),
            ],
            options={
                'ordering': ['performance', 'order'],
            },
        ),
        migrations.CreateModel(
            name='Tune',
            fields=[
                ('created', model_utils.fields.AutoCreatedField(default=django.utils.timezone.now, verbose_name='created', editable=False)),
                ('modified', model_utils.fields.AutoLastModifiedField(default=django.utils.timezone.now, verbose_name='modified', editable=False)),
                ('id', models.UUIDField(default=uuid.uuid4, serialize=False, editable=False, primary_key=True)),
                ('name', models.CharField(unique=True, max_length=200)),
                ('slug', autoslug.fields.AutoSlugField(editable=False, populate_from=b'name', max_length=255, always_update=True, unique=True)),
            ],
            options={
                'ordering': ['name'],
            },
        ),
        migrations.AddField(
            model_name='song',
            name='tune',
            field=models.ForeignKey(related_name='songs', on_delete=django.db.models.deletion.SET_NULL, blank=True, to='api.Tune', null=True),
        ),
        migrations.AddField(
            model_name='score',
            name='song',
            field=models.ForeignKey(related_name='scores', to='api.Song'),
        ),
        migrations.AddField(
            model_name='round',
            name='session',
            field=models.ForeignKey(related_name='rounds', to='api.Session'),
        ),
        migrations.AddField(
            model_name='performer',
            name='session',
            field=models.ForeignKey(related_name='performers', to='api.Session'),
        ),
        migrations.AddField(
            model_name='performance',
            name='performer',
            field=models.ForeignKey(related_name='performances', to='api.Performer'),
        ),
        migrations.AddField(
            model_name='performance',
            name='round',
            field=models.ForeignKey(related_name='performances', to='api.Round'),
        ),
        migrations.AddField(
            model_name='judge',
            name='organization',
            field=mptt.fields.TreeForeignKey(related_name='judges', blank=True, to='api.Organization', null=True),
        ),
        migrations.AddField(
            model_name='judge',
            name='person',
            field=models.ForeignKey(related_name='sessions', on_delete=django.db.models.deletion.SET_NULL, blank=True, to='api.Person', null=True),
        ),
        migrations.AddField(
            model_name='judge',
            name='session',
            field=models.ForeignKey(related_name='judges', to='api.Session'),
        ),
        migrations.AddField(
            model_name='director',
            name='performer',
            field=models.ForeignKey(related_name='directors', to='api.Performer'),
        ),
        migrations.AddField(
            model_name='director',
            name='person',
            field=models.ForeignKey(related_name='choruses', to='api.Person'),
        ),
        migrations.AddField(
            model_name='convention',
            name='organization',
            field=mptt.fields.TreeForeignKey(help_text=b'\n            The organization hosting the convention.', to='api.Organization'),
        ),
        migrations.AddField(
            model_name='contestant',
            name='performer',
            field=models.ForeignKey(related_name='contestants', to='api.Performer'),
        ),
        migrations.AddField(
            model_name='contest',
            name='organization',
            field=mptt.fields.TreeForeignKey(related_name='contests', to='api.Organization', help_text=b'\n            The organization that will confer the contest.  Note that this may be different than the organization running the parent session.'),
        ),
        migrations.AddField(
            model_name='contest',
            name='parent',
            field=mptt.fields.TreeForeignKey(related_name='children', blank=True, to='api.Contest', null=True),
        ),
        migrations.AddField(
            model_name='contest',
            name='session',
            field=models.ForeignKey(related_name='contests', to='api.Session'),
        ),
        migrations.AddField(
            model_name='chapter',
            name='organization',
            field=mptt.fields.TreeForeignKey(related_name='chapters', blank=True, to='api.Organization', null=True),
        ),
        migrations.AddField(
            model_name='certification',
            name='person',
            field=models.ForeignKey(related_name='certifications', to='api.Person'),
        ),
        migrations.AddField(
            model_name='catalog',
            name='tune',
            field=models.ForeignKey(related_name='catalogs', blank=True, to='api.Tune', null=True),
        ),
        migrations.AddField(
            model_name='arranger',
            name='catalog',
            field=models.ForeignKey(related_name='arrangers', blank=True, to='api.Catalog', null=True),
        ),
        migrations.AddField(
            model_name='arranger',
            name='person',
            field=models.ForeignKey(related_name='arrangements', to='api.Person'),
        ),
        migrations.AddField(
            model_name='user',
            name='groups',
            field=models.ManyToManyField(related_query_name='user', related_name='user_set', to='auth.Group', blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', verbose_name='groups'),
        ),
        migrations.AddField(
            model_name='user',
            name='user_permissions',
            field=models.ManyToManyField(related_query_name='user', related_name='user_set', to='auth.Permission', blank=True, help_text='Specific permissions for this user.', verbose_name='user permissions'),
        ),
        migrations.AlterUniqueTogether(
            name='song',
            unique_together=set([('performance', 'order')]),
        ),
        migrations.AlterUniqueTogether(
            name='singer',
            unique_together=set([('performer', 'person')]),
        ),
        migrations.AlterUniqueTogether(
            name='session',
            unique_together=set([('convention', 'kind')]),
        ),
        migrations.AlterUniqueTogether(
            name='round',
            unique_together=set([('session', 'kind')]),
        ),
        migrations.AlterUniqueTogether(
            name='performer',
            unique_together=set([('group', 'session')]),
        ),
        migrations.AlterUniqueTogether(
            name='performance',
            unique_together=set([('round', 'performer')]),
        ),
        migrations.AlterUniqueTogether(
            name='judge',
            unique_together=set([('session', 'kind', 'category', 'slot')]),
        ),
        migrations.AlterUniqueTogether(
            name='director',
            unique_together=set([('performer', 'person')]),
        ),
        migrations.AlterUniqueTogether(
            name='convention',
            unique_together=set([('organization', 'kind', 'year')]),
        ),
        migrations.AlterUniqueTogether(
            name='contestant',
            unique_together=set([('performer', 'contest')]),
        ),
        migrations.AlterUniqueTogether(
            name='certification',
            unique_together=set([('category', 'person')]),
        ),
        migrations.AlterUniqueTogether(
            name='arranger',
            unique_together=set([('catalog', 'person')]),
        ),
    ]
