# Generated by Django 2.1.8 on 2019-04-24 17:37

from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone
import django_fsm
import model_utils.fields
import uuid


class Migration(migrations.Migration):

    dependencies = [
        ('mem', '0014_auto_20190424_0910'),
    ]

    operations = [
        migrations.CreateModel(
            name='Member',
            fields=[
                ('created', model_utils.fields.AutoCreatedField(default=django.utils.timezone.now, editable=False, verbose_name='created')),
                ('modified', model_utils.fields.AutoLastModifiedField(default=django.utils.timezone.now, editable=False, verbose_name='modified')),
                ('id', models.UUIDField(default=uuid.uuid4, primary_key=True, serialize=False)),
                ('status', django_fsm.FSMIntegerField(choices=[(-30, 'Cancelled'), (-20, 'Swapped'), (-10, 'Expired'), (0, 'New'), (10, 'Lapsed'), (20, 'Pending'), (90, 'Active')], default=0)),
                ('code', models.IntegerField(blank=True, choices=[(10, 'RG Regular'), (20, 'R5 Regular 50 Year'), (30, 'SN Senior'), (40, 'S5 Senior 50 Year'), (50, 'SL Senior Legacy'), (60, 'Y1 Youth Initial'), (70, 'Y2 Youth Subsequent'), (80, 'LF Lifetime Regular'), (90, 'L5 Lifetime 50 Year'), (100, 'LY Lifetime Youth'), (110, 'LS Lifetime Senior'), (120, 'AS Associate'), (120, 'SNA'), (120, 'YA2'), (120, 'MEP'), (120, 'YA1')], null=True)),
                ('part', models.IntegerField(blank=True, choices=[(10, 'Tenor'), (20, 'Lead'), (30, 'Baritone'), (40, 'Bass')], null=True)),
                ('start_date', models.DateField(blank=True, null=True)),
                ('end_date', models.DateField(blank=True, null=True)),
                ('group', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='members', to='mem.Group')),
                ('person', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='members', to='mem.Person')),
            ],
        ),
        migrations.AlterUniqueTogether(
            name='member',
            unique_together={('group', 'person')},
        ),
    ]
